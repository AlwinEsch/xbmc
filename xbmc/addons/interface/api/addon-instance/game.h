/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "addons/interface/IMsgHdl.h"

// API include
#include "addons/kodi-dev-kit/include/kodi/c-api/addon-instance/game.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct directFuncToAddon_addoninstance_game_h;
struct directFuncToKodi_addoninstance_game_h;

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

class CHdl_kodi_addoninstance_game_h : public IMsgHdl
{
public:
  CHdl_kodi_addoninstance_game_h(CInterface& interface) : IMsgHdl(interface) {}

  void InitDirect(directFuncToKodi_addoninstance_game_h* ifcToKodi,
                  directFuncToAddon_addoninstance_game_h* ifcToAddon);

  // To handle callbacks from addon by shared sandbox API (static functions below in private becomes used)
  bool HandleMessage(int funcGroup,
                     int func,
                     const msgpack::unpacked& in,
                     msgpack::sbuffer& out) override;

  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

  // Function calls from Kodi to addon
  KODI_ADDON_GAME_HDL kodi_addon_game_create_v1(KODI_OWN_HDL kodi_hdl); // Added with API 1

  void kodi_addon_game_destroy_v1(KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_load_game_v1(const KODI_ADDON_GAME_HDL hdl,
                                               const char* url); // Added with API 1

  enum GAME_ERROR kodi_addon_game_load_game_special_v1(const KODI_ADDON_GAME_HDL hdl,
                                                       enum SPECIAL_GAME_TYPE type,
                                                       const char** urls,
                                                       size_t urlCount); // Added with API 1

  enum GAME_ERROR kodi_addon_game_load_standalone_v1(
      const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_unload_game_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_get_game_timing_v1(
      const KODI_ADDON_GAME_HDL hdl, struct game_system_timing* timing_info); // Added with API 1

  enum GAME_REGION kodi_addon_game_get_region_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  bool kodi_addon_game_requires_game_loop_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_run_frame_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_reset_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_hw_context_reset_v1(
      const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_hw_context_destroy_v1(
      const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  bool kodi_addon_game_has_feature_v1(const KODI_ADDON_GAME_HDL hdl,
                                      const char* controller_id,
                                      const char* feature_name); // Added with API 1

  struct game_input_topology* kodi_addon_game_get_topology_v1(
      const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  void kodi_addon_game_free_topology_v1(const KODI_ADDON_GAME_HDL hdl,
                                        struct game_input_topology* topology); // Added with API 1

  void kodi_addon_game_set_controller_layouts_v1(const KODI_ADDON_GAME_HDL hdl,
                                                 const struct game_controller_layout* controllers,
                                                 size_t controller_count); // Added with API 1

  bool kodi_addon_game_enable_keyboard_v1(const KODI_ADDON_GAME_HDL hdl,
                                          bool enable,
                                          const char* controller_id); // Added with API 1

  bool kodi_addon_game_enable_mouse_v1(const KODI_ADDON_GAME_HDL hdl,
                                       bool enable,
                                       const char* controller_id); // Added with API 1

  bool kodi_addon_game_connect_controller_v1(const KODI_ADDON_GAME_HDL hdl,
                                             bool connect,
                                             const char* port_address,
                                             const char* controller_id); // Added with API 1

  bool kodi_addon_game_input_event_v1(const KODI_ADDON_GAME_HDL hdl,
                                      const struct game_input_event* event); // Added with API 1

  size_t kodi_addon_game_serialize_size_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_serialize_v1(const KODI_ADDON_GAME_HDL hdl,
                                               uint8_t* data,
                                               size_t size); // Added with API 1

  enum GAME_ERROR kodi_addon_game_deserialize_v1(const KODI_ADDON_GAME_HDL hdl,
                                                 const uint8_t* data,
                                                 size_t size); // Added with API 1

  enum GAME_ERROR kodi_addon_game_cheat_reset_v1(const KODI_ADDON_GAME_HDL hdl); // Added with API 1

  enum GAME_ERROR kodi_addon_game_get_memory_v1(const KODI_ADDON_GAME_HDL hdl,
                                                enum GAME_MEMORY type,
                                                uint8_t** data,
                                                size_t* size); // Added with API 1

  enum GAME_ERROR kodi_addon_game_set_cheat_v1(const KODI_ADDON_GAME_HDL hdl,
                                               unsigned int index,
                                               bool enabled,
                                               const char* code); // Added with API 1


private:
  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/

  // Callbacks from addon to Kodi
  static void kodi_addon_game_close_v1(void* thisClassHdl, KODI_OWN_HDL hdl); // Added with API 1

  static KODI_GAME_STREAM_HANDLE kodi_addon_game_open_stream_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      const struct game_stream_properties* properties); // Added with API 1

  static bool kodi_addon_game_get_stream_buffer_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      KODI_GAME_STREAM_HANDLE game_hdl,
      unsigned int width,
      unsigned int height,
      struct game_stream_buffer* buffer); // Added with API 1

  static void kodi_addon_game_add_stream_data_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      KODI_GAME_STREAM_HANDLE game_hdl,
      const struct game_stream_packet* packet); // Added with API 1

  static void kodi_addon_game_release_stream_buffer_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      KODI_GAME_STREAM_HANDLE game_hdl,
      struct game_stream_buffer* buffer); // Added with API 1

  static void kodi_addon_game_close_stream_v1(void* thisClassHdl,
                                              KODI_OWN_HDL hdl,
                                              KODI_GAME_STREAM_HANDLE game_hdl); // Added with API 1

  static game_proc_address_t kodi_addon_hw_get_proc_address_v1(
      void* thisClassHdl, KODI_OWN_HDL hdl, const char* symbol); // Added with API 1

  static bool kodi_addon_game_input_event_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      const struct game_input_event* event); // Added with API 1


  directFuncToAddon_addoninstance_game_h* m_ifcToAddon{nullptr};
};

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
