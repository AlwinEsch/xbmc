/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "inputstream.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon-instance/inputstream.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "cores/VideoPlayer/DVDInputStreams/InputStreamAddon.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_inputstream_h::InitDirect(
    directFuncToKodi_addoninstance_inputstream_h* ifcToKodi,
    directFuncToAddon_addoninstance_inputstream_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_addon_inputstream_allocate_demux_packet_v1 =
      kodi_addon_inputstream_allocate_demux_packet_v1;
  ifcToKodi->kodi_addon_inputstream_allocate_encrypted_demux_packet_v1 =
      kodi_addon_inputstream_allocate_encrypted_demux_packet_v1;
  ifcToKodi->kodi_addon_inputstream_free_demux_packet_v1 =
      kodi_addon_inputstream_free_demux_packet_v1;
}

bool CHdl_kodi_addoninstance_inputstream_h::HandleMessage(int funcGroup,
                                                          int func,
                                                          const msgpack::unpacked& in,
                                                          msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_inputstream_h)
    return false;

  switch (func)
  {
    /* NOTE: Ignored as direct api only is set! */
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addoninstance_inputstream_h::{}: addon called with unknown function id "
                "'{}' on group 'addoninstance_inputstream_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

KODI_ADDON_INPUTSTREAM_HDL CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_create_v1(
    KODI_OWN_HDL kodi_hdl)
{
  // Original API call: typedef KODI_ADDON_INPUTSTREAM_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_CREATE_V1)(KODI_OWN_HDL kodi_hdl);

  return m_ifcToAddon->kodi_addon_inputstream_create_v1(m_ifcToAddon->thisClassHdl, kodi_hdl);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_destroy_v1(
    KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DESTROY_V1)(KODI_ADDON_INPUTSTREAM_HDL hdl);

  m_ifcToAddon->kodi_addon_inputstream_destroy_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_open_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_PROPERTY* props)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_OPEN_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_PROPERTY* props);

  return m_ifcToAddon->kodi_addon_inputstream_open_v1(m_ifcToAddon->thisClassHdl, hdl, props);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_close_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_CLOSE_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  m_ifcToAddon->kodi_addon_inputstream_close_v1(m_ifcToAddon->thisClassHdl, hdl);
}

const char* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_path_list_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef const char*(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_PATH_LIST_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_get_path_list_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_capabilities_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_CAPABILITIES* capabilities)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_CAPABILITIES_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_CAPABILITIES* capabilities);

  m_ifcToAddon->kodi_addon_inputstream_get_capabilities_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                           capabilities);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_stream_ids_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_IDS* ids)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_STREAM_IDS_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_IDS* ids);

  return m_ifcToAddon->kodi_addon_inputstream_get_stream_ids_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                ids);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    int streamid,
    struct INPUTSTREAM_INFO* info,
    KODI_OWN_HDL* demuxStream,
    PFN_CB_KODI_ADDON_INPUTSTREAM_TRANSFER_STREAM transfer_stream)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_STREAM_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid, struct INPUTSTREAM_INFO* info, KODI_OWN_HDL* demuxStream, PFN_CB_KODI_ADDON_INPUTSTREAM_TRANSFER_STREAM transfer_stream);

  return m_ifcToAddon->kodi_addon_inputstream_get_stream_v1(
      m_ifcToAddon->thisClassHdl, hdl, streamid, info, demuxStream, transfer_stream);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_enable_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid, bool enable)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_ENABLE_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid, bool enable);

  m_ifcToAddon->kodi_addon_inputstream_enable_stream_v1(m_ifcToAddon->thisClassHdl, hdl, streamid,
                                                        enable);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_open_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_OPEN_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid);

  return m_ifcToAddon->kodi_addon_inputstream_open_stream_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             streamid);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_reset_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_RESET_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  m_ifcToAddon->kodi_addon_inputstream_demux_reset_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_abort_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_ABORT_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  m_ifcToAddon->kodi_addon_inputstream_demux_abort_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_flush_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_FLUSH_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  m_ifcToAddon->kodi_addon_inputstream_demux_flush_v1(m_ifcToAddon->thisClassHdl, hdl);
}

struct DEMUX_PACKET* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_read_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef struct DEMUX_PACKET*(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_READ_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_demux_read_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_seek_time_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, double time, bool backwards, double* startpts)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_SEEK_TIME_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, double time, bool backwards, double* startpts);

  return m_ifcToAddon->kodi_addon_inputstream_demux_seek_time_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                 time, backwards, startpts);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_set_speed_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int speed)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_DEMUX_SET_SPEED_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int speed);

  m_ifcToAddon->kodi_addon_inputstream_demux_set_speed_v1(m_ifcToAddon->thisClassHdl, hdl, speed);
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_set_video_resolution_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int width, int height)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_SET_VIDEO_RESOLUTION_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl, int width, int height);

  m_ifcToAddon->kodi_addon_inputstream_set_video_resolution_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                               width, height);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_total_time_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_TOTAL_TIME_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_get_total_time_v1(m_ifcToAddon->thisClassHdl, hdl);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_time_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_TIME_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_get_time_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_times_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_TIMES* times)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_TIMES_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, struct INPUTSTREAM_TIMES* times);

  return m_ifcToAddon->kodi_addon_inputstream_get_times_v1(m_ifcToAddon->thisClassHdl, hdl, times);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_pos_time_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int ms)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_POS_TIME_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int ms);

  return m_ifcToAddon->kodi_addon_inputstream_pos_time_v1(m_ifcToAddon->thisClassHdl, hdl, ms);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_read_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, uint8_t* buffer, unsigned int bufferSize)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_READ_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, uint8_t* buffer, unsigned int bufferSize);

  return m_ifcToAddon->kodi_addon_inputstream_read_stream_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             buffer, bufferSize);
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_seek_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int64_t position, int whence)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_SEEK_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int64_t position, int whence);

  return m_ifcToAddon->kodi_addon_inputstream_seek_stream_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             position, whence);
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_position_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_POSITION_STREAM_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_position_stream_v1(m_ifcToAddon->thisClassHdl, hdl);
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_length_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_LENGTH_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_length_stream_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_is_real_time_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_IS_REAL_TIME_STREAM_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_is_real_time_stream_v1(m_ifcToAddon->thisClassHdl,
                                                                     hdl);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_CHAPTER_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_get_chapter_v1(m_ifcToAddon->thisClassHdl, hdl);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_count_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_CHAPTER_COUNT_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_get_chapter_count_v1(m_ifcToAddon->thisClassHdl, hdl);
}

const char* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_name_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch)
{
  // Original API call: typedef const char*(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_CHAPTER_NAME_V1)( const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch);

  return m_ifcToAddon->kodi_addon_inputstream_get_chapter_name_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                  ch);
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_pos_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_GET_CHAPTER_POS_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch);

  return m_ifcToAddon->kodi_addon_inputstream_get_chapter_pos_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                 ch);
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_seek_chapter_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_SEEK_CHAPTER_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch);

  return m_ifcToAddon->kodi_addon_inputstream_seek_chapter_v1(m_ifcToAddon->thisClassHdl, hdl, ch);
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_block_size_stream_v1(
    const KODI_ADDON_INPUTSTREAM_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_BLOCK_SIZE_STREAM_V1)(const KODI_ADDON_INPUTSTREAM_HDL hdl);

  return m_ifcToAddon->kodi_addon_inputstream_block_size_stream_v1(m_ifcToAddon->thisClassHdl, hdl);
}

// Callbacks from addon to Kodi

struct DEMUX_PACKET* CHdl_kodi_addoninstance_inputstream_h::
    kodi_addon_inputstream_allocate_demux_packet_v1(void* thisClassHdl,
                                                    KODI_OWN_HDL hdl,
                                                    int data_size)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_ALLOCATE_DEMUX_PACKET>---*/
  // AUTOGENERATED - Used by class "CInputStreamAddon" with "DEMUX_PACKET* cb_allocate_demux_packet(int iDataSize = 0)" on "cores/VideoPlayer/DVDInputStreams/InputStreamAddon.h".

  CInputStreamAddon* cb = static_cast<CInputStreamAddon*>(hdl);
  return cb->cb_allocate_demux_packet(data_size);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_ALLOCATE_DEMUX_PACKET_END>---*/
}

struct DEMUX_PACKET* CHdl_kodi_addoninstance_inputstream_h::
    kodi_addon_inputstream_allocate_encrypted_demux_packet_v1(
        void* thisClassHdl,
        KODI_OWN_HDL hdl,
        unsigned int data_size,
        unsigned int encrypted_subsample_count)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_ALLOCATE_ENCRYPTED_DEMUX_PACKET>---*/
  // AUTOGENERATED - Used by class "CInputStreamAddon" with "DEMUX_PACKET* cb_allocate_encrypted_demux_packet(unsigned int dataSize,unsigned int encryptedSubsampleCount)" on "cores/VideoPlayer/DVDInputStreams/InputStreamAddon.h".

  CInputStreamAddon* cb = static_cast<CInputStreamAddon*>(hdl);
  return cb->cb_allocate_encrypted_demux_packet(data_size, encrypted_subsample_count);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_ALLOCATE_ENCRYPTED_DEMUX_PACKET_END>---*/
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_free_demux_packet_v1(
    void* thisClassHdl, KODI_OWN_HDL hdl, struct DEMUX_PACKET* packet)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_FREE_DEMUX_PACKET>---*/
  // AUTOGENERATED - Used by class "CInputStreamAddon" with "void cb_free_demux_packet(DEMUX_PACKET* pPacket)" on "cores/VideoPlayer/DVDInputStreams/InputStreamAddon.h".

  CInputStreamAddon* cb = static_cast<CInputStreamAddon*>(hdl);
  cb->cb_free_demux_packet(packet);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_INPUTSTREAM_FREE_DEMUX_PACKET_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
