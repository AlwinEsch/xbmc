/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "vfs.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon-instance/vfs.h"

// Kodi
#include "addons/VFSEntry.h"
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_vfs_h::InitDirect(directFuncToKodi_addoninstance_vfs_h* ifcToKodi,
                                               directFuncToAddon_addoninstance_vfs_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1 =
      kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1;
  ifcToKodi->kodi_addon_vfs_get_dir_cb__set_error_dialog_v1 =
      kodi_addon_vfs_get_dir_cb__set_error_dialog_v1;
  ifcToKodi->kodi_addon_vfs_get_dir_cb__require_authentication_v1 =
      kodi_addon_vfs_get_dir_cb__require_authentication_v1;
}

bool CHdl_kodi_addoninstance_vfs_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_vfs_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_vfs_get_dir_cb__get_keyboard_input(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, char** input, bool hidden_input) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, bool> msgParent__IN_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1 t = in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      KODI_CTX_CB_HDL ctx_cb_hdl = reinterpret_cast<KODI_CTX_CB_HDL>(std::get<1>(t));
      const std::string& heading = std::get<2>(t);
      char* input = nullptr;
      bool hidden_input = std::get<3>(t);
      bool auto_gen_ret = kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
          this, hdl, ctx_cb_hdl, heading.c_str(), &input, hidden_input);
      msgpack::pack(out, msgParent_OUT_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
                             auto_gen_ret, input ? input : ""));
      if (input)
        free(input);
      return true;
    }
    case funcParent_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__set_error_dialog(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, const char* line1, const char* line2, const char* line3) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, std::string, std::string, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1 t = in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      KODI_CTX_CB_HDL ctx_cb_hdl = reinterpret_cast<KODI_CTX_CB_HDL>(std::get<1>(t));
      const std::string& heading = std::get<2>(t);
      const std::string& line1 = std::get<3>(t);
      const std::string& line2 = std::get<4>(t);
      const std::string& line3 = std::get<5>(t);
      kodi_addon_vfs_get_dir_cb__set_error_dialog_v1(this, hdl, ctx_cb_hdl, heading.c_str(),
                                                     line1.c_str(), line2.c_str(), line3.c_str());
      return true;
    }
    case funcParent_kodi_addon_vfs_get_dir_cb__require_authentication_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__require_authentication(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* url) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_vfs_get_dir_cb__require_authentication_v1 t =
          in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      KODI_CTX_CB_HDL ctx_cb_hdl = reinterpret_cast<KODI_CTX_CB_HDL>(std::get<1>(t));
      const std::string& url = std::get<2>(t);
      kodi_addon_vfs_get_dir_cb__require_authentication_v1(this, hdl, ctx_cb_hdl, url.c_str());
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addoninstance_vfs_h::{}: addon called with unknown function id '{}' on "
                "group 'addoninstance_vfs_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

KODI_ADDON_VFS_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_create_v1(KODI_OWN_HDL kodi_hdl)
{
  // Original API call: typedef KODI_ADDON_VFS_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_create_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_create_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_create_v1(PtrValue(kodi_hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h, funcChild_kodi_addon_vfs_create_v1,
                                in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_create_v1 t = ident.get().as<decltype(t)>();
    return reinterpret_cast<KODI_ADDON_VFS_HDL>(std::get<0>(t));
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_create_v1(m_ifcToAddon->thisClassHdl, kodi_hdl);
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_destroy_v1(KODI_ADDON_VFS_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DESTROY_V1)(KODI_ADDON_VFS_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_destroy_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_destroy_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_destroy_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_vfs_h, funcChild_kodi_addon_vfs_destroy_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_vfs_destroy_v1(m_ifcToAddon->thisClassHdl, hdl);
}

KODI_VFS_FILE_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_open_v1(
    KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url)
{
  // Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_file_open_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_open_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_open_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_open_v1 t = ident.get().as<decltype(t)>();
    return reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<0>(t));
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_open_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

KODI_VFS_FILE_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_open_for_write_v1(
    KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, bool overwrite)
{
  // Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, bool overwrite);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, bool> msgChild__IN_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_vfs_file_open_for_write_v1(PtrValue(hdl), url, overwrite));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_open_for_write_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_open_for_write_v1 t = ident.get().as<decltype(t)>();
    return reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<0>(t));
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_open_for_write_v1(m_ifcToAddon->thisClassHdl, hdl, url,
                                                             overwrite);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_close_v1(KODI_ADDON_VFS_HDL hdl,
                                                                 KODI_VFS_FILE_HDL context)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_CLOSE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_close_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_close_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_close_v1(PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_close_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_close_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_close_v1(m_ifcToAddon->thisClassHdl, hdl, context);
}

ssize_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_read_v1(KODI_ADDON_VFS_HDL hdl,
                                                                   KODI_VFS_FILE_HDL context,
                                                                   uint8_t* buffer,
                                                                   size_t buf_size)
{
  // Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_READ_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, uint8_t* buffer, size_t buf_size);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, size_t> msgChild__IN_kodi_addon_vfs_file_read_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ssize_t, std::vector<uint8_t>> msgChild_OUT_kodi_addon_vfs_file_read_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_vfs_file_read_v1(PtrValue(hdl), PtrValue(context), buf_size));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_read_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_read_v1 t = ident.get().as<decltype(t)>();
    std::memcpy(buffer, std::get<1>(t).data(), sizeof(uint8_t) * buf_size);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_read_v1(m_ifcToAddon->thisClassHdl, hdl, context, buffer,
                                                   buf_size);
}

ssize_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_write_v1(KODI_ADDON_VFS_HDL hdl,
                                                                    KODI_VFS_FILE_HDL context,
                                                                    const uint8_t* buffer,
                                                                    size_t buf_size)
{
  // Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_WRITE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, const uint8_t* buffer, size_t buf_size);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::vector<uint8_t>, size_t> msgChild__IN_kodi_addon_vfs_file_write_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ssize_t> msgChild_OUT_kodi_addon_vfs_file_write_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_write_v1(
                          PtrValue(hdl), PtrValue(context),
                          std::vector<uint8_t>(buffer, buffer + buf_size), buf_size));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_write_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_write_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_write_v1(m_ifcToAddon->thisClassHdl, hdl, context,
                                                    buffer, buf_size);
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_seek_v1(KODI_ADDON_VFS_HDL hdl,
                                                                   KODI_VFS_FILE_HDL context,
                                                                   int64_t position,
                                                                   int whence)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_SEEK_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t position, int whence);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int64_t, int> msgChild__IN_kodi_addon_vfs_file_seek_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_seek_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_seek_v1(PtrValue(hdl), PtrValue(context),
                                                               position, whence));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_seek_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_seek_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_seek_v1(m_ifcToAddon->thisClassHdl, hdl, context,
                                                   position, whence);
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_truncate_v1(KODI_ADDON_VFS_HDL hdl,
                                                                   KODI_VFS_FILE_HDL context,
                                                                   int64_t size)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_TRUNCATE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t size);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int64_t> msgChild__IN_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_vfs_file_truncate_v1(PtrValue(hdl), PtrValue(context), size));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_truncate_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_truncate_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_truncate_v1(m_ifcToAddon->thisClassHdl, hdl, context,
                                                       size);
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_length_v1(KODI_ADDON_VFS_HDL hdl,
                                                                         KODI_VFS_FILE_HDL context)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_LENGTH_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_vfs_file_get_length_v1(PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_get_length_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_get_length_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_get_length_v1(m_ifcToAddon->thisClassHdl, hdl, context);
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_position_v1(
    KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context)
{
  // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_POSITION_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_vfs_file_get_position_v1(PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_get_position_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_get_position_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_get_position_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                           context);
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_chunk_size_v1(KODI_ADDON_VFS_HDL hdl,
                                                                         KODI_VFS_FILE_HDL context)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_vfs_file_get_chunk_size_v1(PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_get_chunk_size_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_get_chunk_size_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_get_chunk_size_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             context);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_get_seek_possible_v1(
    KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_io_control_get_seek_possible_v1(
                          PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_io_control_get_seek_possible_v1, in,
                                out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_io_control_get_seek_possible_v1 t =
        ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_io_control_get_seek_possible_v1(
      m_ifcToAddon->thisClassHdl, hdl, context);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_get_cache_status_v1(
    KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, struct VFS_CACHE_STATUS* status)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, struct VFS_CACHE_STATUS* status);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, IFC_VFS_CACHE_STATUS> msgChild_OUT_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_io_control_get_cache_status_v1(
                          PtrValue(hdl), PtrValue(context)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_io_control_get_cache_status_v1, in,
                                out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_io_control_get_cache_status_v1 t =
        ident.get().as<decltype(t)>();
    std::get<1>(t).SetCStructure(status);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_io_control_get_cache_status_v1(
      m_ifcToAddon->thisClassHdl, hdl, context, status);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_set_cache_rate_v1(
    KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, unsigned int rate)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, unsigned int rate);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, unsigned int> msgChild__IN_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_io_control_set_cache_rate_v1(
                          PtrValue(hdl), PtrValue(context), rate));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_io_control_set_cache_rate_v1, in,
                                out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_io_control_set_cache_rate_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_io_control_set_cache_rate_v1(m_ifcToAddon->thisClassHdl,
                                                                        hdl, context, rate);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_set_retry_v1(
    KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, bool retry)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, bool retry);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_file_io_control_set_retry_v1(
                          PtrValue(hdl), PtrValue(context), retry));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_file_io_control_set_retry_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_file_io_control_set_retry_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_file_io_control_set_retry_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                   context, retry);
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_stat_v1(KODI_ADDON_VFS_HDL hdl,
                                                          const struct VFS_URL* url,
                                                          struct VFS_STAT_STRUCTURE* buffer)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_STAT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_STAT_STRUCTURE* buffer);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_stat_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int, IFC_VFS_STAT_STRUCTURE> msgChild_OUT_kodi_addon_vfs_stat_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_stat_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h, funcChild_kodi_addon_vfs_stat_v1, in,
                                out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_stat_v1 t = ident.get().as<decltype(t)>();
    std::get<1>(t).SetCStructure(buffer);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_stat_v1(m_ifcToAddon->thisClassHdl, hdl, url, buffer);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_exists_v1(KODI_ADDON_VFS_HDL hdl,
                                                             const struct VFS_URL* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_exists_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_exists_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_exists_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h, funcChild_kodi_addon_vfs_exists_v1,
                                in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_exists_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_exists_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_clear_out_idle_v1(KODI_ADDON_VFS_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1)(KODI_ADDON_VFS_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_clear_out_idle_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                           funcChild_kodi_addon_vfs_clear_out_idle_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_vfs_clear_out_idle_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_disconnect_all_v1(KODI_ADDON_VFS_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DISCONNECT_ALL_V1)(KODI_ADDON_VFS_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_disconnect_all_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                           funcChild_kodi_addon_vfs_disconnect_all_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_vfs_disconnect_all_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_delete_it_v1(KODI_ADDON_VFS_HDL hdl,
                                                                const struct VFS_URL* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DELETE_IT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_delete_it_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_delete_it_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_delete_it_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_delete_it_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_delete_it_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_delete_it_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_rename_v1(KODI_ADDON_VFS_HDL hdl,
                                                             const struct VFS_URL* url,
                                                             const struct VFS_URL* url2)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_RENAME_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, const struct VFS_URL* url2);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_rename_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_rename_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_rename_v1(PtrValue(hdl), url, url2));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h, funcChild_kodi_addon_vfs_rename_v1,
                                in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_rename_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_rename_v1(m_ifcToAddon->thisClassHdl, hdl, url, url2);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_exists_v1(KODI_ADDON_VFS_HDL hdl,
                                                                       const struct VFS_URL* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_directory_exists_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_directory_exists_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_directory_exists_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_directory_exists_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_remove_v1(KODI_ADDON_VFS_HDL hdl,
                                                                       const struct VFS_URL* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_directory_remove_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_directory_remove_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_directory_remove_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_directory_remove_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_create_v1(KODI_ADDON_VFS_HDL hdl,
                                                                       const struct VFS_URL* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CREATE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_create_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_create_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_directory_create_v1(PtrValue(hdl), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_directory_create_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_directory_create_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_directory_create_v1(m_ifcToAddon->thisClassHdl, hdl, url);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_get_v1(KODI_ADDON_VFS_HDL hdl,
                                                                    const struct VFS_URL* url,
                                                                    struct VFS_DIR_ENTRY** entries,
                                                                    size_t* num_entries,
                                                                    KODI_CTX_CB_HDL ctx_cb_hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_GET_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, KODI_CTX_CB_HDL ctx_cb_hdl);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, size_t, PtrValue> msgChild__IN_kodi_addon_vfs_directory_get_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t> msgChild_OUT_kodi_addon_vfs_directory_get_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_directory_get_v1(PtrValue(hdl), url, *num_entries,
                                                                   PtrValue(ctx_cb_hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_directory_get_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_directory_get_v1 t = ident.get().as<decltype(t)>();
    std::vector<IFC_VFS_DIR_ENTRY>& ifc_entries = std::get<1>(t);
    *num_entries = std::get<2>(t);
    *entries = static_cast<VFS_DIR_ENTRY*>(malloc(sizeof(VFS_DIR_ENTRY) * ifc_entries.size()));
    for (size_t i = 0; i < ifc_entries.size(); ++i)
      ifc_entries[i].SetCStructure(&(*entries)[i]);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_directory_get_v1(m_ifcToAddon->thisClassHdl, hdl, url,
                                                       entries, num_entries, ctx_cb_hdl);
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_contains_files_v1(
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    struct VFS_DIR_ENTRY** entries,
    size_t* num_entries,
    char** rootpath)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, char** rootpath);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, size_t> msgChild__IN_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t, std::string> msgChild_OUT_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_vfs_directory_contains_files_v1(PtrValue(hdl), url,
                                                                              *num_entries));
    if (!m_process->SendMessage(funcGroup_addoninstance_vfs_h,
                                funcChild_kodi_addon_vfs_directory_contains_files_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_vfs_directory_contains_files_v1 t = ident.get().as<decltype(t)>();
    std::vector<IFC_VFS_DIR_ENTRY>& ifc_entries = std::get<1>(t);
    *num_entries = std::get<2>(t);
    *rootpath = strdup(std::get<3>(t).c_str());
    *entries = static_cast<VFS_DIR_ENTRY*>(malloc(sizeof(VFS_DIR_ENTRY) * ifc_entries.size()));
    for (size_t i = 0; i < ifc_entries.size(); ++i)
      ifc_entries[i].SetCStructure(&(*entries)[i]);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_vfs_directory_contains_files_v1(
      m_ifcToAddon->thisClassHdl, hdl, url, entries, num_entries, rootpath);
}

// Callbacks from addon to Kodi

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
    void* thisClassHdl,
    KODI_OWN_HDL hdl,
    KODI_CTX_CB_HDL ctx_cb_hdl,
    const char* heading,
    char** input,
    bool hidden_input)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT>---*/
  // AUTOGENERATED - Used by class "ADDON::CVFSEntry" with "bool DoGetKeyboardInput(KODI_CTX_CB_HDL context, const char* heading,char** input, bool hidden_input)" on "addons/VFSEntry.h".

  ADDON::CVFSEntry* cb = static_cast<ADDON::CVFSEntry*>(hdl);
  return cb->DoGetKeyboardInput(ctx_cb_hdl, heading, input, hidden_input);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT_END>---*/
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_get_dir_cb__set_error_dialog_v1(
    void* thisClassHdl,
    KODI_OWN_HDL hdl,
    KODI_CTX_CB_HDL ctx_cb_hdl,
    const char* heading,
    const char* line1,
    const char* line2,
    const char* line3)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG>---*/
  // AUTOGENERATED - Used by class "ADDON::CVFSEntry" with "void DoSetErrorDialog(KODI_CTX_CB_HDL ctx, const char* heading,const char* line1, const char* line2,const char* line3)" on "addons/VFSEntry.h".

  ADDON::CVFSEntry* cb = static_cast<ADDON::CVFSEntry*>(hdl);
  cb->DoSetErrorDialog(ctx_cb_hdl, heading, line1, line2, line3);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG_END>---*/
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_get_dir_cb__require_authentication_v1(
    void* thisClassHdl, KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* url)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION>---*/
  // AUTOGENERATED - Used by class "ADDON::CVFSEntry" with "void DoRequireAuthentication(KODI_CTX_CB_HDL ctx, const char* url)" on "addons/VFSEntry.h".

  ADDON::CVFSEntry* cb = static_cast<ADDON::CVFSEntry*>(hdl);
  cb->DoRequireAuthentication(ctx_cb_hdl, url);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_free_v1(struct VFS_DIR_ENTRY* entries,
                                                                     size_t num_entries)
{
  for (size_t i = 0; i < num_entries; ++i)
  {
    if (entries[i].properties)
    {
      for (size_t j = 0; j < entries[i].num_props; ++j)
      {
        free(entries[i].properties[j].name);
        free(entries[i].properties[j].val);
      }
      free(entries[i].properties);
    }
    free(entries[i].label);
    free(entries[i].title);
    free(entries[i].path);
  }
  free(entries);
}
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
