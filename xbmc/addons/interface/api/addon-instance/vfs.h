/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "addons/interface/IMsgHdl.h"

// API include
#include "addons/kodi-dev-kit/include/kodi/c-api/addon-instance/vfs.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct directFuncToAddon_addoninstance_vfs_h;
struct directFuncToKodi_addoninstance_vfs_h;

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

class CHdl_kodi_addoninstance_vfs_h : public IMsgHdl
{
public:
  CHdl_kodi_addoninstance_vfs_h(CInterface& interface) : IMsgHdl(interface) {}

  void InitDirect(directFuncToKodi_addoninstance_vfs_h* ifcToKodi,
                  directFuncToAddon_addoninstance_vfs_h* ifcToAddon);

  // To handle callbacks from addon by shared sandbox API (static functions below in private becomes used)
  bool HandleMessage(int funcGroup,
                     int func,
                     const msgpack::unpacked& in,
                     msgpack::sbuffer& out) override;

  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
  void kodi_addon_vfs_directory_free_v1(struct VFS_DIR_ENTRY* entries, size_t num_entries);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

  // Function calls from Kodi to addon
  KODI_ADDON_VFS_HDL kodi_addon_vfs_create_v1(KODI_OWN_HDL kodi_hdl); // Added with API 1

  void kodi_addon_vfs_destroy_v1(KODI_ADDON_VFS_HDL hdl); // Added with API 1

  KODI_VFS_FILE_HDL kodi_addon_vfs_file_open_v1(KODI_ADDON_VFS_HDL hdl,
                                                const struct VFS_URL* url); // Added with API 1

  KODI_VFS_FILE_HDL kodi_addon_vfs_file_open_for_write_v1(KODI_ADDON_VFS_HDL hdl,
                                                          const struct VFS_URL* url,
                                                          bool overwrite); // Added with API 1

  bool kodi_addon_vfs_file_close_v1(KODI_ADDON_VFS_HDL hdl,
                                    KODI_VFS_FILE_HDL context); // Added with API 1

  ssize_t kodi_addon_vfs_file_read_v1(KODI_ADDON_VFS_HDL hdl,
                                      KODI_VFS_FILE_HDL context,
                                      uint8_t* buffer,
                                      size_t buf_size); // Added with API 1

  ssize_t kodi_addon_vfs_file_write_v1(KODI_ADDON_VFS_HDL hdl,
                                       KODI_VFS_FILE_HDL context,
                                       const uint8_t* buffer,
                                       size_t buf_size); // Added with API 1

  int64_t kodi_addon_vfs_file_seek_v1(KODI_ADDON_VFS_HDL hdl,
                                      KODI_VFS_FILE_HDL context,
                                      int64_t position,
                                      int whence); // Added with API 1

  int kodi_addon_vfs_file_truncate_v1(KODI_ADDON_VFS_HDL hdl,
                                      KODI_VFS_FILE_HDL context,
                                      int64_t size); // Added with API 1

  int64_t kodi_addon_vfs_file_get_length_v1(KODI_ADDON_VFS_HDL hdl,
                                            KODI_VFS_FILE_HDL context); // Added with API 1

  int64_t kodi_addon_vfs_file_get_position_v1(KODI_ADDON_VFS_HDL hdl,
                                              KODI_VFS_FILE_HDL context); // Added with API 1

  int kodi_addon_vfs_file_get_chunk_size_v1(KODI_ADDON_VFS_HDL hdl,
                                            KODI_VFS_FILE_HDL context); // Added with API 1

  bool kodi_addon_vfs_file_io_control_get_seek_possible_v1(
      KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context); // Added with API 1

  bool kodi_addon_vfs_file_io_control_get_cache_status_v1(
      KODI_ADDON_VFS_HDL hdl,
      KODI_VFS_FILE_HDL context,
      struct VFS_CACHE_STATUS* status); // Added with API 1

  bool kodi_addon_vfs_file_io_control_set_cache_rate_v1(KODI_ADDON_VFS_HDL hdl,
                                                        KODI_VFS_FILE_HDL context,
                                                        unsigned int rate); // Added with API 1

  bool kodi_addon_vfs_file_io_control_set_retry_v1(KODI_ADDON_VFS_HDL hdl,
                                                   KODI_VFS_FILE_HDL context,
                                                   bool retry); // Added with API 1

  int kodi_addon_vfs_stat_v1(KODI_ADDON_VFS_HDL hdl,
                             const struct VFS_URL* url,
                             struct VFS_STAT_STRUCTURE* buffer); // Added with API 1

  bool kodi_addon_vfs_exists_v1(KODI_ADDON_VFS_HDL hdl,
                                const struct VFS_URL* url); // Added with API 1

  void kodi_addon_vfs_clear_out_idle_v1(KODI_ADDON_VFS_HDL hdl); // Added with API 1

  void kodi_addon_vfs_disconnect_all_v1(KODI_ADDON_VFS_HDL hdl); // Added with API 1

  bool kodi_addon_vfs_delete_it_v1(KODI_ADDON_VFS_HDL hdl,
                                   const struct VFS_URL* url); // Added with API 1

  bool kodi_addon_vfs_rename_v1(KODI_ADDON_VFS_HDL hdl,
                                const struct VFS_URL* url,
                                const struct VFS_URL* url2); // Added with API 1

  bool kodi_addon_vfs_directory_exists_v1(KODI_ADDON_VFS_HDL hdl,
                                          const struct VFS_URL* url); // Added with API 1

  bool kodi_addon_vfs_directory_remove_v1(KODI_ADDON_VFS_HDL hdl,
                                          const struct VFS_URL* url); // Added with API 1

  bool kodi_addon_vfs_directory_create_v1(KODI_ADDON_VFS_HDL hdl,
                                          const struct VFS_URL* url); // Added with API 1

  bool kodi_addon_vfs_directory_get_v1(KODI_ADDON_VFS_HDL hdl,
                                       const struct VFS_URL* url,
                                       struct VFS_DIR_ENTRY** entries,
                                       size_t* num_entries,
                                       KODI_CTX_CB_HDL ctx_cb_hdl); // Added with API 1

  bool kodi_addon_vfs_directory_contains_files_v1(KODI_ADDON_VFS_HDL hdl,
                                                  const struct VFS_URL* url,
                                                  struct VFS_DIR_ENTRY** entries,
                                                  size_t* num_entries,
                                                  char** rootpath); // Added with API 1


private:
  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/

  // Callbacks from addon to Kodi
  static bool kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      KODI_CTX_CB_HDL ctx_cb_hdl,
      const char* heading,
      char** input,
      bool hidden_input); // Added with API 1

  static void kodi_addon_vfs_get_dir_cb__set_error_dialog_v1(void* thisClassHdl,
                                                             KODI_OWN_HDL hdl,
                                                             KODI_CTX_CB_HDL ctx_cb_hdl,
                                                             const char* heading,
                                                             const char* line1,
                                                             const char* line2,
                                                             const char* line3); // Added with API 1

  static void kodi_addon_vfs_get_dir_cb__require_authentication_v1(
      void* thisClassHdl,
      KODI_OWN_HDL hdl,
      KODI_CTX_CB_HDL ctx_cb_hdl,
      const char* url); // Added with API 1


  directFuncToAddon_addoninstance_vfs_h* m_ifcToAddon{nullptr};
};

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
