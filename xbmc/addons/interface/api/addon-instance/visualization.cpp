/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "visualization.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon-instance/visualization.h"

// Kodi
#include "addons/Visualization.h"
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_visualization_h::InitDirect(
    directFuncToKodi_addoninstance_visualization_h* ifcToKodi,
    directFuncToAddon_addoninstance_visualization_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_addon_visualization_get_properties_v1 =
      kodi_addon_visualization_get_properties_v1;
  ifcToKodi->kodi_addon_visualization_transfer_preset_v1 =
      kodi_addon_visualization_transfer_preset_v1;
  ifcToKodi->kodi_addon_visualization_clear_presets_v1 = kodi_addon_visualization_clear_presets_v1;
}

bool CHdl_kodi_addoninstance_visualization_h::HandleMessage(int funcGroup,
                                                            int func,
                                                            const msgpack::unpacked& in,
                                                            msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_visualization_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_addon_visualization_get_properties_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_get_properties(KODI_OWN_HDL hdl, struct VIS_PROPS* props) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_get_properties_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<IFC_VIS_PROPS> msgParent_OUT_kodi_addon_visualization_get_properties_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_visualization_get_properties_v1 t = in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      struct VIS_PROPS props;
      kodi_addon_visualization_get_properties_v1(this, hdl, &props);
      msgpack::pack(out, msgParent_OUT_kodi_addon_visualization_get_properties_v1(&props));
      IFC_VIS_PROPS::CleanCStructure(&props);
      return true;
    }
    case funcParent_kodi_addon_visualization_transfer_preset_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_transfer_preset(KODI_OWN_HDL hdl, const char* preset) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_visualization_transfer_preset_v1 t = in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      const std::string& preset = std::get<1>(t);
      kodi_addon_visualization_transfer_preset_v1(this, hdl, preset.c_str());
      return true;
    }
    case funcParent_kodi_addon_visualization_clear_presets_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_clear_presets(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_visualization_clear_presets_v1 t = in.get().as<decltype(t)>();
      KODI_OWN_HDL hdl = reinterpret_cast<KODI_OWN_HDL>(std::get<0>(t));
      kodi_addon_visualization_clear_presets_v1(this, hdl);
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addoninstance_visualization_h::{}: addon called with unknown function "
                "id '{}' on group 'addoninstance_visualization_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

KODI_ADDON_VISUALIZATION_HDL CHdl_kodi_addoninstance_visualization_h::
    kodi_addon_visualization_create_v1(KODI_OWN_HDL kodi_hdl)
{
  // Original API call: typedef KODI_ADDON_VISUALIZATION_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_create_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_visualization_create_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_create_v1(PtrValue(kodi_hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_create_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_create_v1 t = ident.get().as<decltype(t)>();
    return reinterpret_cast<KODI_ADDON_VISUALIZATION_HDL>(std::get<0>(t));
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_create_v1(m_ifcToAddon->thisClassHdl, kodi_hdl);
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_destroy_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_DESTROY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_destroy_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_destroy_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_destroy_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                           funcChild_kodi_addon_visualization_destroy_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_visualization_destroy_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_start_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl,
    int channels,
    int samples_per_sec,
    int bits_per_sample,
    const char* song_name)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_START_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int channels, int samples_per_sec, int bits_per_sample, const char* song_name);
  // Tuple in:          typedef std::tuple<PtrValue, int, int, int, std::string> msgChild__IN_kodi_addon_visualization_start_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_start_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_start_v1(
                          PtrValue(hdl), channels, samples_per_sec, bits_per_sample, song_name));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_start_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_start_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_start_v1(
      m_ifcToAddon->thisClassHdl, hdl, channels, samples_per_sec, bits_per_sample, song_name);
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_stop_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_STOP_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_stop_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_stop_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_stop_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                           funcChild_kodi_addon_visualization_stop_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_visualization_stop_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_info_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl, struct VIS_INFO* info)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_INFO_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, struct VIS_INFO* info);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_info_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<IFC_VIS_INFO> msgChild_OUT_kodi_addon_visualization_get_info_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_get_info_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_get_info_v1, in, out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_get_info_v1 t = ident.get().as<decltype(t)>();
    std::get<0>(t).SetCStructure(info);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_visualization_get_info_v1(m_ifcToAddon->thisClassHdl, hdl, info);
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_audio_data_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl,
    const float* audio_data,
    size_t audio_data_length,
    const float* freq_data,
    size_t freq_data_length)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const float* audio_data, size_t audio_data_length, const float* freq_data, size_t freq_data_length);
  // Tuple in:          typedef std::tuple<PtrValue, std::vector<float>, size_t, std::vector<float>, size_t> msgChild__IN_kodi_addon_visualization_audio_data_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_audio_data_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_visualization_audio_data_v1(
                PtrValue(hdl), std::vector<float>(audio_data, audio_data + audio_data_length),
                audio_data_length, std::vector<float>(freq_data, freq_data + freq_data_length),
                freq_data_length));
    m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                           funcChild_kodi_addon_visualization_audio_data_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_visualization_audio_data_v1(
      m_ifcToAddon->thisClassHdl, hdl, audio_data, audio_data_length, freq_data, freq_data_length);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_is_dirty_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_is_dirty_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_is_dirty_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_is_dirty_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_is_dirty_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_render_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RENDER_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_render_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_render_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_render_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                           funcChild_kodi_addon_visualization_render_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_visualization_render_v1(m_ifcToAddon->thisClassHdl, hdl);
}

unsigned int CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_presets_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef unsigned int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_presets_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<unsigned int> msgChild_OUT_kodi_addon_visualization_get_presets_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_get_presets_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_get_presets_v1, in, out))
      return 0;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_get_presets_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_get_presets_v1(m_ifcToAddon->thisClassHdl, hdl);
}

int CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_active_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_get_active_preset_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_get_active_preset_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_get_active_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_get_active_preset_v1(m_ifcToAddon->thisClassHdl,
                                                                     hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_prev_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_prev_preset_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_prev_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_prev_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_prev_preset_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_next_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_next_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_next_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_next_preset_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_next_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_next_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_next_preset_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_load_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl, int select)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int select);
  // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_visualization_load_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_load_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_load_preset_v1(PtrValue(hdl), select));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_load_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_load_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_load_preset_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                               select);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_random_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_random_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_random_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_random_preset_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_random_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_random_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_random_preset_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_lock_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_lock_preset_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_lock_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_lock_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_lock_preset_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_rate_preset_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl, bool plus_minus)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, bool plus_minus);
  // Tuple in:          typedef std::tuple<PtrValue, bool> msgChild__IN_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_visualization_rate_preset_v1(PtrValue(hdl), plus_minus));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_rate_preset_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_rate_preset_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_rate_preset_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                               plus_minus);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_is_locked_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_locked_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_locked_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_is_locked_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_is_locked_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_is_locked_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_is_locked_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_update_albumart_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl, const char* albumart)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const char* albumart);
  // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_visualization_update_albumart_v1(PtrValue(hdl), albumart));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_update_albumart_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_update_albumart_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_update_albumart_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                   albumart);
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_update_track_v1(
    KODI_ADDON_VISUALIZATION_HDL hdl, const struct VIS_TRACK* track)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const struct VIS_TRACK* track);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_VIS_TRACK> msgChild__IN_kodi_addon_visualization_update_track_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_track_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_visualization_update_track_v1(PtrValue(hdl), track));
    if (!m_process->SendMessage(funcGroup_addoninstance_visualization_h,
                                funcChild_kodi_addon_visualization_update_track_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_visualization_update_track_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_visualization_update_track_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                track);
}

// Callbacks from addon to Kodi

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_properties_v1(
    void* thisClassHdl, KODI_OWN_HDL hdl, struct VIS_PROPS* props)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_GET_PROPERTIES>---*/
  // AUTOGENERATED - Used by class "ADDON::CVisualization" with "void get_properties(struct VIS_PROPS* props)" on "addons/Visualization.h".

  ADDON::CVisualization* cb = static_cast<ADDON::CVisualization*>(hdl);
  cb->get_properties(props);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_GET_PROPERTIES_END>---*/
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_transfer_preset_v1(
    void* thisClassHdl, KODI_OWN_HDL hdl, const char* preset)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET>---*/
  // AUTOGENERATED - Used by class "ADDON::CVisualization" with "void transfer_preset(const char* preset)" on "addons/Visualization.h".

  ADDON::CVisualization* cb = static_cast<ADDON::CVisualization*>(hdl);
  cb->transfer_preset(preset);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET_END>---*/
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_clear_presets_v1(
    void* thisClassHdl, KODI_OWN_HDL hdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS>---*/
  // AUTOGENERATED - Used by class "ADDON::CVisualization" with "void clear_presets()" on "addons/Visualization.h".

  ADDON::CVisualization* cb = static_cast<ADDON::CVisualization*>(hdl);
  cb->clear_presets();
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
