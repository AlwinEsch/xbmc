/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "addon_base.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon_base.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
#include "GUIUserMessages.h"
#include "addons/AddonManager.h"
#include "addons/gui/GUIDialogAddonSettings.h"
#include "addons/settings/AddonSettings.h"
#include "filesystem/Directory.h"
#include "filesystem/File.h"
#include "filesystem/SpecialProtocol.h"
#include "guilib/GUIComponent.h"
#include "guilib/GUIWindowManager.h"
#include "utils/URIUtils.h"
#include "utils/log.h"
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/

namespace
{

bool UpdateSettingInActiveDialog(const std::shared_ptr<ADDON::IAddon>& addon,
                                 const std::string& id,
                                 const std::string& value)
{
  if (!CServiceBroker::GetGUI()->GetWindowManager().IsWindowActive(WINDOW_DIALOG_ADDON_SETTINGS))
    return false;

  CGUIDialogAddonSettings* dialog =
      CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogAddonSettings>(
          WINDOW_DIALOG_ADDON_SETTINGS);
  if (dialog->GetCurrentAddonID() != addon->ID())
    return false;

  CGUIMessage message(GUI_MSG_SETTING_UPDATED, 0, 0);
  std::vector<std::string> params;
  params.emplace_back(id);
  params.push_back(value);
  message.SetStringParams(params);
  CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(message,
                                                                 WINDOW_DIALOG_ADDON_SETTINGS);

  return true;
}

} /* namespace */

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addon_base_h::InitDirect(directFuncToKodi_addon_base_h* ifcToKodi,
                                        directFuncToAddon_addon_base_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  // Unused "kodi_check_main_shared", done only in addon lib
  // Unused "kodi_init", done only in addon lib
  // Unused "kodi_deinit", done only in addon lib
  // Unused "kodi_process", done only in addon lib
  ifcToKodi->kodi_log_v1 = kodi_log_v1;
  ifcToKodi->kodi_addon_get_lib_path_v1 = kodi_addon_get_lib_path_v1;
  ifcToKodi->kodi_addon_get_share_path_v1 = kodi_addon_get_share_path_v1;
  ifcToKodi->kodi_addon_get_user_path_v1 = kodi_addon_get_user_path_v1;
  ifcToKodi->kodi_addon_get_temp_path_v1 = kodi_addon_get_temp_path_v1;
  ifcToKodi->kodi_addon_get_info_v1 = kodi_addon_get_info_v1;
  ifcToKodi->kodi_addon_open_settings_dialog_v1 = kodi_addon_open_settings_dialog_v1;
  ifcToKodi->kodi_addon_is_setting_using_default_v1 = kodi_addon_is_setting_using_default_v1;
  ifcToKodi->kodi_addon_get_setting_bool_v1 = kodi_addon_get_setting_bool_v1;
  ifcToKodi->kodi_addon_get_setting_int_v1 = kodi_addon_get_setting_int_v1;
  ifcToKodi->kodi_addon_get_setting_float_v1 = kodi_addon_get_setting_float_v1;
  ifcToKodi->kodi_addon_get_setting_string_v1 = kodi_addon_get_setting_string_v1;
  ifcToKodi->kodi_addon_set_setting_bool_v1 = kodi_addon_set_setting_bool_v1;
  ifcToKodi->kodi_addon_set_setting_int_v1 = kodi_addon_set_setting_int_v1;
  ifcToKodi->kodi_addon_set_setting_float_v1 = kodi_addon_set_setting_float_v1;
  ifcToKodi->kodi_addon_set_setting_string_v1 = kodi_addon_set_setting_string_v1;
}

bool CHdl_kodi_addon_base_h::HandleMessage(int funcGroup,
                                           int func,
                                           const msgpack::unpacked& in,
                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addon_base_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_log_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_log(enum ADDON_LOG loglevel, const char* format, ...) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<ADDON_LOG, std::string> msgParent__IN_kodi_log_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_log_v1; /* Autogenerated */
      msgParent__IN_kodi_log_v1 t = in.get().as<decltype(t)>();
      enum ADDON_LOG loglevel = std::get<0>(t);
      const std::string& format = std::get<1>(t);

      kodi_log_v1(this, loglevel, format.c_str());
      return true;
    }
    case funcParent_kodi_addon_get_lib_path_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_addon_get_lib_path() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_addon_get_lib_path_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_get_lib_path_v1; /* Autogenerated */
      char* auto_gen_ret = kodi_addon_get_lib_path_v1(this);
      msgpack::pack(out,
                    msgParent_OUT_kodi_addon_get_lib_path_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_addon_get_share_path_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_addon_get_share_path() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_addon_get_share_path_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_get_share_path_v1; /* Autogenerated */
      char* auto_gen_ret = kodi_addon_get_share_path_v1(this);
      msgpack::pack(out,
                    msgParent_OUT_kodi_addon_get_share_path_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_addon_get_user_path_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_addon_get_user_path() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_addon_get_user_path_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_get_user_path_v1; /* Autogenerated */
      char* auto_gen_ret = kodi_addon_get_user_path_v1(this);
      msgpack::pack(out,
                    msgParent_OUT_kodi_addon_get_user_path_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_addon_get_temp_path_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_addon_get_temp_path() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_addon_get_temp_path_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_get_temp_path_v1; /* Autogenerated */
      char* auto_gen_ret = kodi_addon_get_temp_path_v1(this);
      msgpack::pack(out,
                    msgParent_OUT_kodi_addon_get_temp_path_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_addon_get_info_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_addon_get_info(const char* id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string> msgParent__IN_kodi_addon_get_info_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_get_info_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_get_info_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      char* auto_gen_ret = kodi_addon_get_info_v1(this, id.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_addon_get_info_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_addon_open_settings_dialog_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_open_settings_dialog() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_addon_open_settings_dialog_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_open_settings_dialog_v1; /* Autogenerated */
      bool auto_gen_ret = kodi_addon_open_settings_dialog_v1(this);
      msgpack::pack(out, msgParent_OUT_kodi_addon_open_settings_dialog_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_is_setting_using_default_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_is_setting_using_default(const char* id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string> msgParent__IN_kodi_addon_is_setting_using_default_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_is_setting_using_default_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_is_setting_using_default_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      bool auto_gen_ret = kodi_addon_is_setting_using_default_v1(this, id.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_addon_is_setting_using_default_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_get_setting_bool_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_get_setting_bool(const char* id, bool* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool> msgParent__IN_kodi_addon_get_setting_bool_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, bool> msgParent_OUT_kodi_addon_get_setting_bool_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_get_setting_bool_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      bool value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_get_setting_bool_v1(this, id.c_str(), &value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_get_setting_bool_v1(auto_gen_ret, value));
      return true;
    }
    case funcParent_kodi_addon_get_setting_int_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_get_setting_int(const char* id, int* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, int> msgParent__IN_kodi_addon_get_setting_int_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, int> msgParent_OUT_kodi_addon_get_setting_int_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_get_setting_int_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      int value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_get_setting_int_v1(this, id.c_str(), &value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_get_setting_int_v1(auto_gen_ret, value));
      return true;
    }
    case funcParent_kodi_addon_get_setting_float_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_get_setting_float(const char* id, float* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, float> msgParent__IN_kodi_addon_get_setting_float_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, float> msgParent_OUT_kodi_addon_get_setting_float_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_get_setting_float_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      float value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_get_setting_float_v1(this, id.c_str(), &value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_get_setting_float_v1(auto_gen_ret, value));
      return true;
    }
    case funcParent_kodi_addon_get_setting_string_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_get_setting_string(const char* id, char** value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string> msgParent__IN_kodi_addon_get_setting_string_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_addon_get_setting_string_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_get_setting_string_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      char* value = nullptr;
      bool auto_gen_ret = kodi_addon_get_setting_string_v1(this, id.c_str(), &value);
      msgpack::pack(
          out, msgParent_OUT_kodi_addon_get_setting_string_v1(auto_gen_ret, value ? value : ""));
      if (value)
        free(value);
      return true;
    }
    case funcParent_kodi_addon_set_setting_bool_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_set_setting_bool(const char* id, bool value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool> msgParent__IN_kodi_addon_set_setting_bool_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_set_setting_bool_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_set_setting_bool_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      bool value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_set_setting_bool_v1(this, id.c_str(), value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_set_setting_bool_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_set_setting_int_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_set_setting_int(const char* id, int value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, int> msgParent__IN_kodi_addon_set_setting_int_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_set_setting_int_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_set_setting_int_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      int value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_set_setting_int_v1(this, id.c_str(), value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_set_setting_int_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_set_setting_float_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_set_setting_float(const char* id, float value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, float> msgParent__IN_kodi_addon_set_setting_float_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_set_setting_float_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_set_setting_float_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      float value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_set_setting_float_v1(this, id.c_str(), value);
      msgpack::pack(out, msgParent_OUT_kodi_addon_set_setting_float_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_set_setting_string_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_set_setting_string(const char* id, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string> msgParent__IN_kodi_addon_set_setting_string_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_set_setting_string_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_set_setting_string_v1 t = in.get().as<decltype(t)>();
      const std::string& id = std::get<0>(t);
      const std::string& value = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_set_setting_string_v1(this, id.c_str(), value.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_addon_set_setting_string_v1(auto_gen_ret));
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addon_base_h::{}: addon called with unknown function id '{}' on group "
                "'addon_base_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_CREATE_V1>---*/
ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_create_v1(KODI_ADDON_HDL* hdl)
{
  // This function is set by "OVERRIDE;USE_HAND_MAKE" and must be complete set here and other places by hand!!!
#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_create_v1(0));
    if (!m_process->SendMessage(funcGroup_addon_base_h, funcChild_kodi_addon_create_v1, in, out))
      return ADDON_STATUS_UNKNOWN;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_create_v1 t = ident.get().as<decltype(t)>();
    *hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<1>(t));
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_create_v1(m_ifcToAddon->thisClassHdl, hdl);
}
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_CREATE_V1_END>---*/

void CHdl_kodi_addon_base_h::kodi_addon_destroy_v1(KODI_ADDON_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_DESTROY_V1)(KODI_ADDON_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_destroy_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_destroy_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_destroy_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addon_base_h, funcChild_kodi_addon_destroy_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_destroy_v1(m_ifcToAddon->thisClassHdl, hdl);
}

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_CREATE_INSTANCE_V1>---*/
ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_create_instance_v1(KODI_ADDON_HDL hdl,
                                                                   ADDON_INSTANCE instanceType,
                                                                   const std::string& instanceID,
                                                                   KODI_OWN_HDL instance,
                                                                   KODI_HANDLE* addonInstance,
                                                                   KODI_HANDLE parent)
{
  // This function is set by "OVERRIDE;USE_HAND_MAKE" and must be complete set here and other places by hand!!!
#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_create_instance_v1(uint64_t(hdl), instanceType,
                                                                 instanceID, uint64_t(instance),
                                                                 uint64_t(parent)));
    if (!m_process->SendMessage(funcGroup_addon_base_h, funcChild_kodi_addon_create_instance_v1, in,
                                out))
      return ADDON_STATUS_UNKNOWN;

    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_create_instance_v1 t = ident.get().as<decltype(t)>();
    *addonInstance = KODI_HANDLE(std::get<1>(t));
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_create_instance_v1(m_ifcToAddon->thisClassHdl, hdl, instanceType,
                                                     instanceID.c_str(), instance, addonInstance,
                                                     parent);
}
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_CREATE_INSTANCE_V1_END>---*/

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_DESTROY_INSTANCE_V1>---*/
void CHdl_kodi_addon_base_h::kodi_addon_destroy_instance_v1(const KODI_ADDON_HDL hdl,
                                                            ADDON_INSTANCE instanceType,
                                                            KODI_HANDLE instance)
{
  // This function is set by "OVERRIDE;USE_HAND_MAKE" and must be complete set here and other places by hand!!!

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_destroy_instance_v1(PtrValue(hdl), instanceType,
                                                                  PtrValue(instance)));
    m_process->SendMessage(funcGroup_addon_base_h, funcChild_kodi_addon_destroy_instance_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_destroy_instance_v1(m_ifcToAddon->thisClassHdl, hdl, instanceType,
                                               instance);
}
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD=KODI_ADDON_DESTROY_INSTANCE_V1_END>---*/

enum ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_setting_change_string_v1(
    const KODI_ADDON_HDL hdl, const char* name, const char* value)
{
  // Original API call: typedef enum ADDON_STATUS(ATTR_APIENTRYP PFN_KODI_ADDON_SETTING_CHANGE_STRING_V1)(const KODI_ADDON_HDL hdl, const char* name, const char* value);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string> msgChild__IN_kodi_addon_setting_change_string_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ADDON_STATUS> msgChild_OUT_kodi_addon_setting_change_string_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_setting_change_string_v1(PtrValue(hdl), name, value));
    if (!m_process->SendMessage(funcGroup_addon_base_h,
                                funcChild_kodi_addon_setting_change_string_v1, in, out))
      return ADDON_STATUS_OK;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_setting_change_string_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_setting_change_string_v1(m_ifcToAddon->thisClassHdl, hdl, name,
                                                           value);
}

enum ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_setting_change_boolean_v1(
    const KODI_ADDON_HDL hdl, const char* name, bool value)
{
  // Original API call: typedef enum ADDON_STATUS(ATTR_APIENTRYP PFN_KODI_ADDON_SETTING_CHANGE_BOOLEAN_V1)(const KODI_ADDON_HDL hdl, const char* name, bool value);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, bool> msgChild__IN_kodi_addon_setting_change_boolean_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ADDON_STATUS> msgChild_OUT_kodi_addon_setting_change_boolean_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_setting_change_boolean_v1(PtrValue(hdl), name, value));
    if (!m_process->SendMessage(funcGroup_addon_base_h,
                                funcChild_kodi_addon_setting_change_boolean_v1, in, out))
      return ADDON_STATUS_OK;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_setting_change_boolean_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_setting_change_boolean_v1(m_ifcToAddon->thisClassHdl, hdl, name,
                                                            value);
}

enum ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_setting_change_integer_v1(
    const KODI_ADDON_HDL hdl, const char* name, int value)
{
  // Original API call: typedef enum ADDON_STATUS(ATTR_APIENTRYP PFN_KODI_ADDON_SETTING_CHANGE_INTEGER_V1)(const KODI_ADDON_HDL hdl, const char* name, int value);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, int> msgChild__IN_kodi_addon_setting_change_integer_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ADDON_STATUS> msgChild_OUT_kodi_addon_setting_change_integer_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_setting_change_integer_v1(PtrValue(hdl), name, value));
    if (!m_process->SendMessage(funcGroup_addon_base_h,
                                funcChild_kodi_addon_setting_change_integer_v1, in, out))
      return ADDON_STATUS_OK;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_setting_change_integer_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_setting_change_integer_v1(m_ifcToAddon->thisClassHdl, hdl, name,
                                                            value);
}

enum ADDON_STATUS CHdl_kodi_addon_base_h::kodi_addon_setting_change_float_v1(
    const KODI_ADDON_HDL hdl, const char* name, float value)
{
  // Original API call: typedef enum ADDON_STATUS(ATTR_APIENTRYP PFN_KODI_ADDON_SETTING_CHANGE_FLOAT_V1)(const KODI_ADDON_HDL hdl, const char* name, float value);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, float> msgChild__IN_kodi_addon_setting_change_float_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ADDON_STATUS> msgChild_OUT_kodi_addon_setting_change_float_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_setting_change_float_v1(PtrValue(hdl), name, value));
    if (!m_process->SendMessage(funcGroup_addon_base_h,
                                funcChild_kodi_addon_setting_change_float_v1, in, out))
      return ADDON_STATUS_OK;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_setting_change_float_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_setting_change_float_v1(m_ifcToAddon->thisClassHdl, hdl, name,
                                                          value);
}

// Callbacks from addon to Kodi

void CHdl_kodi_addon_base_h::kodi_log_v1(void* thisClassHdl,
                                         enum ADDON_LOG loglevel,
                                         const char* format,
                                         ...)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_LOG>---*/

  int kodiLogLevel = LOGNONE;
  switch (loglevel)
  {
    case ADDON_LOG_DEBUG:
      kodiLogLevel = LOGDEBUG;
      break;
    case ADDON_LOG_INFO:
      kodiLogLevel = LOGINFO;
      break;
    case ADDON_LOG_WARNING:
      kodiLogLevel = LOGWARNING;
      break;
    case ADDON_LOG_ERROR:
      kodiLogLevel = LOGERROR;
      break;
    case ADDON_LOG_FATAL:
      kodiLogLevel = LOGFATAL;
      break;
    default:
      kodiLogLevel = LOGDEBUG;
      break;
  }

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  CLog::Log(kodiLogLevel, "AddOnLog: {}: {}", addon->ID(), format);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_LOG_END>---*/
}

char* CHdl_kodi_addon_base_h::kodi_addon_get_lib_path_v1(void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_LIB_PATH>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();
  return strdup(CSpecialProtocol::TranslatePath(addon->Path()).c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_LIB_PATH_END>---*/
}

char* CHdl_kodi_addon_base_h::kodi_addon_get_share_path_v1(void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SHARE_PATH>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();
  return strdup(CSpecialProtocol::TranslatePath(addon->Path()).c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SHARE_PATH_END>---*/
}

char* CHdl_kodi_addon_base_h::kodi_addon_get_user_path_v1(void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_USER_PATH>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();
  return strdup(CSpecialProtocol::TranslatePath(addon->Profile()).c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_USER_PATH_END>---*/
}

char* CHdl_kodi_addon_base_h::kodi_addon_get_temp_path_v1(void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_TEMP_PATH>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  std::string tempPath =
      URIUtils::AddFileToFolder(CServiceBroker::GetAddonMgr().GetTempAddonBasePath(), addon->ID());
  tempPath += "-temp";
  XFILE::CDirectory::Create(tempPath);

  return strdup(CSpecialProtocol::TranslatePath(tempPath).c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_TEMP_PATH_END>---*/
}

char* CHdl_kodi_addon_base_h::kodi_addon_get_info_v1(void* thisClassHdl, const char* id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_INFO>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  std::string str;
  if (StringUtils::CompareNoCase(id, "author") == 0)
    str = addon->Author();
  else if (StringUtils::CompareNoCase(id, "changelog") == 0)
    str = addon->ChangeLog();
  else if (StringUtils::CompareNoCase(id, "description") == 0)
    str = addon->Description();
  else if (StringUtils::CompareNoCase(id, "disclaimer") == 0)
    str = addon->Disclaimer();
  else if (StringUtils::CompareNoCase(id, "fanart") == 0)
    str = addon->FanArt();
  else if (StringUtils::CompareNoCase(id, "icon") == 0)
    str = addon->Icon();
  else if (StringUtils::CompareNoCase(id, "id") == 0)
    str = addon->ID();
  else if (StringUtils::CompareNoCase(id, "name") == 0)
    str = addon->Name();
  else if (StringUtils::CompareNoCase(id, "path") == 0)
    str = addon->Path();
  else if (StringUtils::CompareNoCase(id, "profile") == 0)
    str = addon->Profile();
  else if (StringUtils::CompareNoCase(id, "summary") == 0)
    str = addon->Summary();
  else if (StringUtils::CompareNoCase(id, "type") == 0)
    str = ADDON::CAddonInfo::TranslateType(addon->Type());
  else if (StringUtils::CompareNoCase(id, "version") == 0)
    str = addon->Version().asString();
  else
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} -  add-on '{}' requests invalid id '{}'", __func__,
              addon->ID(), id);
    return nullptr;
  }

  return strdup(str.c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_INFO_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_open_settings_dialog_v1(void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_OPEN_SETTINGS_DIALOG>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();
  return CGUIDialogAddonSettings::ShowForAddon(addon);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_OPEN_SETTINGS_DIALOG_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_is_setting_using_default_v1(void* thisClassHdl,
                                                                    const char* id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_IS_SETTING_USING_DEFAULT>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();
  if (!addon->HasSettings())
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - couldn't get settings for add-on '{}'", __func__,
              addon->ID());
    return false;
  }

  auto setting = addon->GetSettings()->GetSetting(id);
  if (setting == nullptr)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - can't find setting '{}' in '{}'", __func__, id,
              addon->ID());
    return false;
  }

  return setting->IsDefault();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_IS_SETTING_USING_DEFAULT_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_get_setting_bool_v1(void* thisClassHdl,
                                                            const char* id,
                                                            bool* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_BOOL>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (!addon->HasSettings())
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - couldn't get settings for add-on '{}'", __func__,
              addon->ID());
    return false;
  }

  auto setting = addon->GetSettings()->GetSetting(id);
  if (setting == nullptr)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - can't find setting '{}' in '{}'", __func__, id,
              addon->ID());
    return false;
  }

  if (setting->GetType() != SettingType::Boolean)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - setting '{}' is not a boolean in '{}'", __func__,
              id, addon->ID());
    return false;
  }

  *value = std::static_pointer_cast<CSettingBool>(setting)->GetValue();
  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_BOOL_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_get_setting_int_v1(void* thisClassHdl,
                                                           const char* id,
                                                           int* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_INT>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (!addon->HasSettings())
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - couldn't get settings for add-on '{}'", __func__,
              addon->ID());
    return false;
  }

  auto setting = addon->GetSettings()->GetSetting(id);
  if (setting == nullptr)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - can't find setting '{}' in '{}'", __func__, id,
              addon->ID());
    return false;
  }

  if (setting->GetType() != SettingType::Integer && setting->GetType() != SettingType::Number)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - setting '{}' is not a integer in '{}'", __func__,
              id, addon->ID());
    return false;
  }

  if (setting->GetType() == SettingType::Integer)
    *value = std::static_pointer_cast<CSettingInt>(setting)->GetValue();
  else
    *value = static_cast<int>(std::static_pointer_cast<CSettingNumber>(setting)->GetValue());
  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_INT_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_get_setting_float_v1(void* thisClassHdl,
                                                             const char* id,
                                                             float* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_FLOAT>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (!addon->HasSettings())
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - couldn't get settings for add-on '{}'", __func__,
              addon->ID());
    return false;
  }

  auto setting = addon->GetSettings()->GetSetting(id);
  if (setting == nullptr)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - can't find setting '{}' in '{}'", __func__, id,
              addon->ID());
    return false;
  }

  if (setting->GetType() != SettingType::Number)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - setting '{}' is not a number in '{}'", __func__,
              id, addon->ID());
    return false;
  }

  *value = static_cast<float>(std::static_pointer_cast<CSettingNumber>(setting)->GetValue());
  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_FLOAT_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_get_setting_string_v1(void* thisClassHdl,
                                                              const char* id,
                                                              char** value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_STRING>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (!addon->HasSettings())
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - couldn't get settings for add-on '{}'", __func__,
              addon->ID());
    return false;
  }

  auto setting = addon->GetSettings()->GetSetting(id);
  if (setting == nullptr)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - can't find setting '{}' in '{}'", __func__, id,
              addon->ID());
    return false;
  }

  if (setting->GetType() != SettingType::String)
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - setting '{}' is not a string in '{}'", __func__,
              id, addon->ID());
    return false;
  }

  *value = strdup(std::static_pointer_cast<CSettingString>(setting)->GetValue().c_str());
  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_GET_SETTING_STRING_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_set_setting_bool_v1(void* thisClassHdl,
                                                            const char* id,
                                                            bool value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_BOOL>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (UpdateSettingInActiveDialog(addon, id, StringUtils::Format("%d", value)))
    return true;

  if (!addon->UpdateSettingBool(id, value))
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - invalid setting type", __func__);
    return false;
  }

  addon->SaveSettings();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_BOOL_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_set_setting_int_v1(void* thisClassHdl,
                                                           const char* id,
                                                           int value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_INT>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (UpdateSettingInActiveDialog(addon, id, StringUtils::Format("%i", value)))
    return true;

  if (!addon->UpdateSettingInt(id, value))
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - invalid setting type", __func__);
    return false;
  }

  addon->SaveSettings();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_INT_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_set_setting_float_v1(void* thisClassHdl,
                                                             const char* id,
                                                             float value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_FLOAT>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (UpdateSettingInActiveDialog(addon, id, StringUtils::Format("%f", value)))
    return true;

  if (!addon->UpdateSettingNumber(id, value))
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - invalid setting type", __func__);
    return false;
  }

  addon->SaveSettings();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_FLOAT_END>---*/
}

bool CHdl_kodi_addon_base_h::kodi_addon_set_setting_string_v1(void* thisClassHdl,
                                                              const char* id,
                                                              const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addon_base_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_STRING>---*/

  const std::shared_ptr<ADDON::IAddon> addon = thisClass->m_interface.m_process->GetAddon();

  if (UpdateSettingInActiveDialog(addon, id, value))
    return true;

  if (!addon->UpdateSettingString(id, value))
  {
    CLog::Log(LOGERROR, "CHdlIn_addon_base_h::{} - invalid setting type", __func__);
    return false;
  }

  addon->SaveSettings();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_SET_SETTING_STRING_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
