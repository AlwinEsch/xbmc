/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "spin.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/controls/spin.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "guilib/GUIComponent.h"
#include "guilib/GUISpinControlEx.h"
#include "guilib/GUIWindowManager.h"

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_controls_spin_h::InitDirect(directFuncToKodi_gui_controls_spin_h* ifcToKodi,
                                               directFuncToAddon_gui_controls_spin_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_controls_spin_set_visible_v1 = kodi_gui_controls_spin_set_visible_v1;
  ifcToKodi->kodi_gui_controls_spin_set_enabled_v1 = kodi_gui_controls_spin_set_enabled_v1;
  ifcToKodi->kodi_gui_controls_spin_set_text_v1 = kodi_gui_controls_spin_set_text_v1;
  ifcToKodi->kodi_gui_controls_spin_reset_v1 = kodi_gui_controls_spin_reset_v1;
  ifcToKodi->kodi_gui_controls_spin_set_type_v1 = kodi_gui_controls_spin_set_type_v1;
  ifcToKodi->kodi_gui_controls_spin_add_string_label_v1 =
      kodi_gui_controls_spin_add_string_label_v1;
  ifcToKodi->kodi_gui_controls_spin_set_string_value_v1 =
      kodi_gui_controls_spin_set_string_value_v1;
  ifcToKodi->kodi_gui_controls_spin_get_string_value_v1 =
      kodi_gui_controls_spin_get_string_value_v1;
  ifcToKodi->kodi_gui_controls_spin_add_int_label_v1 = kodi_gui_controls_spin_add_int_label_v1;
  ifcToKodi->kodi_gui_controls_spin_set_int_range_v1 = kodi_gui_controls_spin_set_int_range_v1;
  ifcToKodi->kodi_gui_controls_spin_set_int_value_v1 = kodi_gui_controls_spin_set_int_value_v1;
  ifcToKodi->kodi_gui_controls_spin_get_int_value_v1 = kodi_gui_controls_spin_get_int_value_v1;
  ifcToKodi->kodi_gui_controls_spin_set_float_range_v1 = kodi_gui_controls_spin_set_float_range_v1;
  ifcToKodi->kodi_gui_controls_spin_set_float_value_v1 = kodi_gui_controls_spin_set_float_value_v1;
  ifcToKodi->kodi_gui_controls_spin_get_float_value_v1 = kodi_gui_controls_spin_get_float_value_v1;
  ifcToKodi->kodi_gui_controls_spin_set_float_interval_v1 =
      kodi_gui_controls_spin_set_float_interval_v1;
}

bool CHdl_kodi_gui_controls_spin_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_controls_spin_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_controls_spin_set_visible_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_visible(KODI_GUI_CONTROL_HANDLE handle, bool visible) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_gui_controls_spin_set_visible_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_visible_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_visible_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      bool visible = std::get<1>(t);
      kodi_gui_controls_spin_set_visible_v1(this, handle, visible);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_enabled_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_enabled(KODI_GUI_CONTROL_HANDLE handle, bool enabled) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_gui_controls_spin_set_enabled_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_enabled_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_enabled_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      bool enabled = std::get<1>(t);
      kodi_gui_controls_spin_set_enabled_v1(this, handle, enabled);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_text_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_text(KODI_GUI_CONTROL_HANDLE handle, const char* text) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_controls_spin_set_text_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_text_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_text_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      const std::string& text = std::get<1>(t);
      kodi_gui_controls_spin_set_text_v1(this, handle, text.c_str());
      return true;
    }
    case funcParent_kodi_gui_controls_spin_reset_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_reset(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_spin_reset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_reset_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_reset_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      kodi_gui_controls_spin_reset_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_type_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_type(KODI_GUI_CONTROL_HANDLE handle, int type) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_controls_spin_set_type_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_type_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_type_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      int type = std::get<1>(t);
      kodi_gui_controls_spin_set_type_v1(this, handle, type);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_add_string_label_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_add_string_label(KODI_GUI_CONTROL_HANDLE handle, const char* label, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string> msgParent__IN_kodi_gui_controls_spin_add_string_label_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_add_string_label_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_add_string_label_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      const std::string& label = std::get<1>(t);
      const std::string& value = std::get<2>(t);
      kodi_gui_controls_spin_add_string_label_v1(this, handle, label.c_str(), value.c_str());
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_string_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_string_value(KODI_GUI_CONTROL_HANDLE handle, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_controls_spin_set_string_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_string_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_string_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      const std::string& value = std::get<1>(t);
      kodi_gui_controls_spin_set_string_value_v1(this, handle, value.c_str());
      return true;
    }
    case funcParent_kodi_gui_controls_spin_get_string_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_gui_controls_spin_get_string_value(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_spin_get_string_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_gui_controls_spin_get_string_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_get_string_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      char* auto_gen_ret = kodi_gui_controls_spin_get_string_value_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_controls_spin_get_string_value_v1(
                             auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_add_int_label_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_add_int_label(KODI_GUI_CONTROL_HANDLE handle, const char* label, int value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, int> msgParent__IN_kodi_gui_controls_spin_add_int_label_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_add_int_label_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_add_int_label_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      const std::string& label = std::get<1>(t);
      int value = std::get<2>(t);
      kodi_gui_controls_spin_add_int_label_v1(this, handle, label.c_str(), value);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_int_range_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_int_range(KODI_GUI_CONTROL_HANDLE handle, int start, int end) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int, int> msgParent__IN_kodi_gui_controls_spin_set_int_range_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_int_range_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_int_range_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      int start = std::get<1>(t);
      int end = std::get<2>(t);
      kodi_gui_controls_spin_set_int_range_v1(this, handle, start, end);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_int_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_int_value(KODI_GUI_CONTROL_HANDLE handle, int value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_controls_spin_set_int_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_int_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_int_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      int value = std::get<1>(t);
      kodi_gui_controls_spin_set_int_value_v1(this, handle, value);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_get_int_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_controls_spin_get_int_value(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_spin_get_int_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_controls_spin_get_int_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_get_int_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      int auto_gen_ret = kodi_gui_controls_spin_get_int_value_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_controls_spin_get_int_value_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_float_range_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_float_range(KODI_GUI_CONTROL_HANDLE handle, float start, float end) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, float, float> msgParent__IN_kodi_gui_controls_spin_set_float_range_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_float_range_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_float_range_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      float start = std::get<1>(t);
      float end = std::get<2>(t);
      kodi_gui_controls_spin_set_float_range_v1(this, handle, start, end);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_float_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_float_value(KODI_GUI_CONTROL_HANDLE handle, float value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, float> msgParent__IN_kodi_gui_controls_spin_set_float_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_float_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_float_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      float value = std::get<1>(t);
      kodi_gui_controls_spin_set_float_value_v1(this, handle, value);
      return true;
    }
    case funcParent_kodi_gui_controls_spin_get_float_value_v1:
    {
      // Original API call: ATTR_DLL_EXPORT float kodi_gui_controls_spin_get_float_value(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_spin_get_float_value_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<float> msgParent_OUT_kodi_gui_controls_spin_get_float_value_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_get_float_value_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      float auto_gen_ret = kodi_gui_controls_spin_get_float_value_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_controls_spin_get_float_value_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_controls_spin_set_float_interval_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_spin_set_float_interval(KODI_GUI_CONTROL_HANDLE handle, float interval) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, float> msgParent__IN_kodi_gui_controls_spin_set_float_interval_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_spin_set_float_interval_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_spin_set_float_interval_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      float interval = std::get<1>(t);
      kodi_gui_controls_spin_set_float_interval_v1(this, handle, interval);
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_controls_spin_h::{}: addon called with unknown function id '{}' on "
                "group 'gui_controls_spin_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_visible_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, bool visible)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_VISIBLE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetVisible(visible);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_VISIBLE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_enabled_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, bool enabled)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_ENABLED>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetEnabled(enabled);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_ENABLED_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_text_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, const char* text)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_TEXT>---*/

  CGUISpinControlEx* control = static_cast<CGUISpinControlEx*>(handle);
  CGUIMessage msg(GUI_MSG_LABEL_SET, control->GetParentID(), control->GetID());
  msg.SetLabel(text);
  CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(msg, control->GetParentID());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_TEXT_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_reset_v1(void* thisClassHdl,
                                                                    KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_RESET>---*/

  CGUISpinControlEx* control = static_cast<CGUISpinControlEx*>(handle);
  CGUIMessage msg(GUI_MSG_LABEL_RESET, control->GetParentID(), control->GetID());
  CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(msg, control->GetParentID());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_RESET_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_type_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, int type)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_TYPE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetType(type);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_TYPE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_add_string_label_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, const char* label, const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_ADD_STRING_LABEL>---*/

  static_cast<CGUISpinControlEx*>(handle)->AddLabel(std::string(label), std::string(value));

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_ADD_STRING_LABEL_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_string_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_STRING_VALUE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetStringValue(std::string(value));

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_STRING_VALUE_END>---*/
}

char* CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_get_string_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_STRING_VALUE>---*/

  return strdup(static_cast<CGUISpinControlEx*>(handle)->GetStringValue().c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_STRING_VALUE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_add_int_label_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, const char* label, int value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_ADD_INT_LABEL>---*/

  static_cast<CGUISpinControlEx*>(handle)->AddLabel(std::string(label), value);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_ADD_INT_LABEL_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_int_range_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, int start, int end)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_INT_RANGE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetRange(start, end);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_INT_RANGE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_int_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, int value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_INT_VALUE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetValue(value);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_INT_VALUE_END>---*/
}

int CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_get_int_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_INT_VALUE>---*/

  return static_cast<CGUISpinControlEx*>(handle)->GetValue();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_INT_VALUE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_float_range_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, float start, float end)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_RANGE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetFloatRange(start, end);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_RANGE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_float_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, float value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_VALUE>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetFloatValue(value);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_VALUE_END>---*/
}

float CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_get_float_value_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return 0.0f;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_FLOAT_VALUE>---*/

  return static_cast<CGUISpinControlEx*>(handle)->GetFloatValue();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_GET_FLOAT_VALUE_END>---*/
}

void CHdl_kodi_gui_controls_spin_h::kodi_gui_controls_spin_set_float_interval_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, float interval)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_spin_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_INTERVAL>---*/

  static_cast<CGUISpinControlEx*>(handle)->SetFloatInterval(interval);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_INTERVAL_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
