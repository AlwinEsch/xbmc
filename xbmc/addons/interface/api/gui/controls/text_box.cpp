/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "text_box.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/controls/text_box.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "guilib/GUIComponent.h"
#include "guilib/GUITextBox.h"
#include "guilib/GUIWindowManager.h"

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_controls_text_box_h::InitDirect(
    directFuncToKodi_gui_controls_text_box_h* ifcToKodi,
    directFuncToAddon_gui_controls_text_box_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_controls_text_box_set_visible_v1 = kodi_gui_controls_text_box_set_visible_v1;
  ifcToKodi->kodi_gui_controls_text_box_reset_v1 = kodi_gui_controls_text_box_reset_v1;
  ifcToKodi->kodi_gui_controls_text_box_set_text_v1 = kodi_gui_controls_text_box_set_text_v1;
  ifcToKodi->kodi_gui_controls_text_box_get_text_v1 = kodi_gui_controls_text_box_get_text_v1;
  ifcToKodi->kodi_gui_controls_text_box_scroll_v1 = kodi_gui_controls_text_box_scroll_v1;
  ifcToKodi->kodi_gui_controls_text_box_set_auto_scrolling_v1 =
      kodi_gui_controls_text_box_set_auto_scrolling_v1;
}

bool CHdl_kodi_gui_controls_text_box_h::HandleMessage(int funcGroup,
                                                      int func,
                                                      const msgpack::unpacked& in,
                                                      msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_controls_text_box_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_controls_text_box_set_visible_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_text_box_set_visible(KODI_GUI_CONTROL_HANDLE handle, bool visible) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_gui_controls_text_box_set_visible_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_text_box_set_visible_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_set_visible_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      bool visible = std::get<1>(t);
      kodi_gui_controls_text_box_set_visible_v1(this, handle, visible);
      return true;
    }
    case funcParent_kodi_gui_controls_text_box_reset_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_text_box_reset(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_text_box_reset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_text_box_reset_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_reset_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      kodi_gui_controls_text_box_reset_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_controls_text_box_set_text_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_text_box_set_text(KODI_GUI_CONTROL_HANDLE handle, const char* text) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_controls_text_box_set_text_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_text_box_set_text_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_set_text_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      const std::string& text = std::get<1>(t);
      kodi_gui_controls_text_box_set_text_v1(this, handle, text.c_str());
      return true;
    }
    case funcParent_kodi_gui_controls_text_box_get_text_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_gui_controls_text_box_get_text(KODI_GUI_CONTROL_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_controls_text_box_get_text_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_gui_controls_text_box_get_text_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_get_text_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      char* auto_gen_ret = kodi_gui_controls_text_box_get_text_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_controls_text_box_get_text_v1(
                             auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_gui_controls_text_box_scroll_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_text_box_scroll(KODI_GUI_CONTROL_HANDLE handle, unsigned int position) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, unsigned int> msgParent__IN_kodi_gui_controls_text_box_scroll_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_text_box_scroll_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_scroll_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      unsigned int position = std::get<1>(t);
      kodi_gui_controls_text_box_scroll_v1(this, handle, position);
      return true;
    }
    case funcParent_kodi_gui_controls_text_box_set_auto_scrolling_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_controls_text_box_set_auto_scrolling( KODI_GUI_CONTROL_HANDLE handle, int delay, int time, int repeat) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int, int, int> msgParent__IN_kodi_gui_controls_text_box_set_auto_scrolling_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_controls_text_box_set_auto_scrolling_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_controls_text_box_set_auto_scrolling_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_CONTROL_HANDLE handle = reinterpret_cast<KODI_GUI_CONTROL_HANDLE>(std::get<0>(t));
      int delay = std::get<1>(t);
      int time = std::get<2>(t);
      int repeat = std::get<3>(t);
      kodi_gui_controls_text_box_set_auto_scrolling_v1(this, handle, delay, time, repeat);
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_controls_text_box_h::{}: addon called with unknown function id '{}' "
                "on group 'gui_controls_text_box_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

void CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_set_visible_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, bool visible)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_VISIBLE>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  control->SetVisible(visible);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_VISIBLE_END>---*/
}

void CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_reset_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_RESET>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CGUIMessage msg(GUI_MSG_LABEL_RESET, control->GetParentID(), control->GetID());
  CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(msg, control->GetParentID());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_RESET_END>---*/
}

void CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_set_text_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, const char* text)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_TEXT>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CGUIMessage msg(GUI_MSG_LABEL_SET, control->GetParentID(), control->GetID());
  msg.SetLabel(text);
  CServiceBroker::GetGUI()->GetWindowManager().SendThreadMessage(msg, control->GetParentID());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_TEXT_END>---*/
}

char* CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_get_text_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_GET_TEXT>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return nullptr;
  }

  return strdup(control->GetDescription().c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_GET_TEXT_END>---*/
}

void CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_scroll_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, unsigned int position)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SCROLL>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  control->Scroll(position);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SCROLL_END>---*/
}

void CHdl_kodi_gui_controls_text_box_h::kodi_gui_controls_text_box_set_auto_scrolling_v1(
    void* thisClassHdl, KODI_GUI_CONTROL_HANDLE handle, int delay, int time, int repeat)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_controls_text_box_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_AUTO_SCROLLING>---*/

  CGUITextBox* control = static_cast<CGUITextBox*>(handle);
  if (!control)
  {
    CLog::Log(
        LOGERROR,
        "CHdl_kodi_gui_controls_text_box_h::{} - invalid handler data (handle='{}') on addon '{}'",
        __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  control->SetAutoScrolling(delay, time, repeat);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_CONTROLS_TEXT_BOX_SET_AUTO_SCROLLING_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
