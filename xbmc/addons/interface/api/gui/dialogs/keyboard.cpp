/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "keyboard.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/dialogs/keyboard.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "guilib/GUIKeyboardFactory.h"
#include "utils/Variant.h"

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_dialogs_keyboard_h::InitDirect(
    directFuncToKodi_gui_dialogs_keyboard_h* ifcToKodi,
    directFuncToAddon_gui_dialogs_keyboard_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1 =
      kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_get_input_v1 =
      kodi_gui_dialogs_keyboard_show_and_get_input_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1 =
      kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_get_new_password_v1 =
      kodi_gui_dialogs_keyboard_show_and_get_new_password_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1 =
      kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1 =
      kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_verify_password_v1 =
      kodi_gui_dialogs_keyboard_show_and_verify_password_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_show_and_get_filter_v1 =
      kodi_gui_dialogs_keyboard_show_and_get_filter_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1 =
      kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1;
  ifcToKodi->kodi_gui_dialogs_keyboard_is_keyboard_activated_v1 =
      kodi_gui_dialogs_keyboard_is_keyboard_activated_v1;
}

bool CHdl_kodi_gui_dialogs_keyboard_h::HandleMessage(int funcGroup,
                                                     int func,
                                                     const msgpack::unpacked& in,
                                                     msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_dialogs_keyboard_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_get_input_with_head( const char* text_in, char** text_out, const char* heading, bool allow_empty_result, bool hidden_input, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, bool, bool, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1 t =
          in.get().as<decltype(t)>();
      const std::string& text_in = std::get<0>(t);
      char* text_out = nullptr;
      const std::string& heading = std::get<1>(t);
      bool allow_empty_result = std::get<2>(t);
      bool hidden_input = std::get<3>(t);
      unsigned int auto_close_ms = std::get<4>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1(
          this, text_in.c_str(), &text_out, heading.c_str(), allow_empty_result, hidden_input,
          auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1(
                             auto_gen_ret, text_out ? text_out : ""));
      if (text_out)
        free(text_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_get_input_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_get_input(const char* text_in, char** text_out, bool allow_empty_result, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_input_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_input_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_input_v1 t = in.get().as<decltype(t)>();
      const std::string& text_in = std::get<0>(t);
      char* text_out = nullptr;
      bool allow_empty_result = std::get<1>(t);
      unsigned int auto_close_ms = std::get<2>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_get_input_v1(
          this, text_in.c_str(), &text_out, allow_empty_result, auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_input_v1(
                             auto_gen_ret, text_out ? text_out : ""));
      if (text_out)
        free(text_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head( const char* password_in, char** password_out, const char* heading, bool allow_empty_result, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, bool, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1 t =
          in.get().as<decltype(t)>();
      const std::string& password_in = std::get<0>(t);
      char* password_out = nullptr;
      const std::string& heading = std::get<1>(t);
      bool allow_empty_result = std::get<2>(t);
      unsigned int auto_close_ms = std::get<3>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1(
          this, password_in.c_str(), &password_out, heading.c_str(), allow_empty_result,
          auto_close_ms);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1(
                        auto_gen_ret, password_out ? password_out : ""));
      if (password_out)
        free(password_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_get_new_password_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_get_new_password( const char* password_in, char** password_out, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_new_password_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_new_password_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_new_password_v1 t =
          in.get().as<decltype(t)>();
      const std::string& password_in = std::get<0>(t);
      char* password_out = nullptr;
      unsigned int auto_close_ms = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_get_new_password_v1(
          this, password_in.c_str(), &password_out, auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_new_password_v1(
                             auto_gen_ret, password_out ? password_out : ""));
      if (password_out)
        free(password_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head( char** password_out, const char* heading, bool allow_empty_result, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1 t =
          in.get().as<decltype(t)>();
      char* password_out = nullptr;
      const std::string& heading = std::get<0>(t);
      bool allow_empty_result = std::get<1>(t);
      unsigned int auto_close_ms = std::get<2>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1(
          this, &password_out, heading.c_str(), allow_empty_result, auto_close_ms);
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1(
                   auto_gen_ret, password_out ? password_out : ""));
      if (password_out)
        free(password_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_verify_new_password( char** password_out, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1 t =
          in.get().as<decltype(t)>();
      char* password_out = nullptr;
      unsigned int auto_close_ms = std::get<0>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1(
          this, &password_out, auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1(
                             auto_gen_ret, password_out ? password_out : ""));
      if (password_out)
        free(password_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_verify_password_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_dialogs_keyboard_show_and_verify_password(const char* password_in, char** password_out, const char* heading, int retries, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, int, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_password_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_password_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_verify_password_v1 t =
          in.get().as<decltype(t)>();
      const std::string& password_in = std::get<0>(t);
      char* password_out = nullptr;
      const std::string& heading = std::get<1>(t);
      int retries = std::get<2>(t);
      unsigned int auto_close_ms = std::get<3>(t);
      int auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_verify_password_v1(
          this, password_in.c_str(), &password_out, heading.c_str(), retries, auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_verify_password_v1(
                             auto_gen_ret, password_out ? password_out : ""));
      if (password_out)
        free(password_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_show_and_get_filter_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_show_and_get_filter(const char* text_in, char** text_out, bool searching, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool, unsigned int> msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_filter_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_filter_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_show_and_get_filter_v1 t = in.get().as<decltype(t)>();
      const std::string& text_in = std::get<0>(t);
      char* text_out = nullptr;
      bool searching = std::get<1>(t);
      unsigned int auto_close_ms = std::get<2>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_show_and_get_filter_v1(
          this, text_in.c_str(), &text_out, searching, auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_show_and_get_filter_v1(
                             auto_gen_ret, text_out ? text_out : ""));
      if (text_out)
        free(text_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_send_text_to_active_keyboard(const char* text, bool close_keyboard) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, bool> msgParent__IN_kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1 t =
          in.get().as<decltype(t)>();
      const std::string& text = std::get<0>(t);
      bool close_keyboard = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1(
          this, text.c_str(), close_keyboard);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1(
                             auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_dialogs_keyboard_is_keyboard_activated_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_keyboard_is_keyboard_activated() __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_gui_dialogs_keyboard_is_keyboard_activated_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_dialogs_keyboard_is_keyboard_activated_v1; /* Autogenerated */
      bool auto_gen_ret = kodi_gui_dialogs_keyboard_is_keyboard_activated_v1(this);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_dialogs_keyboard_is_keyboard_activated_v1(auto_gen_ret));
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_dialogs_keyboard_h::{}: addon called with unknown function id '{}' "
                "on group 'gui_dialogs_keyboard_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_get_input_with_head_v1(
    void* thisClassHdl,
    const char* text_in,
    char** text_out,
    const char* heading,
    bool allow_empty_result,
    bool hidden_input,
    unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_WITH_HEAD>---*/

  std::string str = text_in;
  bool bRet = CGUIKeyboardFactory::ShowAndGetInput(str, CVariant{heading}, allow_empty_result,
                                                   hidden_input, auto_close_ms);
  if (bRet)
    *text_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_WITH_HEAD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_get_input_v1(
    void* thisClassHdl,
    const char* text_in,
    char** text_out,
    bool allow_empty_result,
    unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT>---*/

  std::string str = text_in;
  bool bRet = CGUIKeyboardFactory::ShowAndGetInput(str, allow_empty_result, auto_close_ms);
  if (bRet)
    *text_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::
    kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head_v1(void* thisClassHdl,
                                                                     const char* password_in,
                                                                     char** password_out,
                                                                     const char* heading,
                                                                     bool allow_empty_result,
                                                                     unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_WITH_HEAD>---*/

  std::string str = password_in;
  bool bRet =
      CGUIKeyboardFactory::ShowAndGetNewPassword(str, heading, allow_empty_result, auto_close_ms);
  if (bRet)
    *password_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_WITH_HEAD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_get_new_password_v1(
    void* thisClassHdl, const char* password_in, char** password_out, unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD>---*/

  std::string str = password_in;
  bool bRet = CGUIKeyboardFactory::ShowAndGetNewPassword(str, auto_close_ms);
  if (bRet)
    *password_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::
    kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head_v1(void* thisClassHdl,
                                                                        char** password_out,
                                                                        const char* heading,
                                                                        bool allow_empty_result,
                                                                        unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_WITH_HEAD>---*/

  std::string str;
  bool bRet = CGUIKeyboardFactory::ShowAndVerifyNewPassword(str, heading, allow_empty_result,
                                                            auto_close_ms);
  if (bRet)
    *password_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_WITH_HEAD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_verify_new_password_v1(
    void* thisClassHdl, char** password_out, unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD>---*/

  std::string str;
  bool bRet = CGUIKeyboardFactory::ShowAndVerifyNewPassword(str, auto_close_ms);
  if (bRet)
    *password_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_END>---*/
}

int CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_verify_password_v1(
    void* thisClassHdl,
    const char* password_in,
    char** password_out,
    const char* heading,
    int retries,
    unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_PASSWORD>---*/

  std::string str = password_in;
  int iRet = CGUIKeyboardFactory::ShowAndVerifyPassword(str, heading, retries, auto_close_ms);
  if (iRet)
    *password_out = strdup(str.c_str());
  return iRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_PASSWORD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_show_and_get_filter_v1(
    void* thisClassHdl,
    const char* text_in,
    char** text_out,
    bool searching,
    unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_FILTER>---*/

  std::string str = text_in;
  bool bRet = CGUIKeyboardFactory::ShowAndGetFilter(str, searching, auto_close_ms);
  if (bRet)
    *text_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_FILTER_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_send_text_to_active_keyboard_v1(
    void* thisClassHdl, const char* text, bool close_keyboard)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SEND_TEXT_TO_ACTIVE_KEYBOARD>---*/

  return CGUIKeyboardFactory::SendTextToActiveKeyboard(text, close_keyboard);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_SEND_TEXT_TO_ACTIVE_KEYBOARD_END>---*/
}

bool CHdl_kodi_gui_dialogs_keyboard_h::kodi_gui_dialogs_keyboard_is_keyboard_activated_v1(
    void* thisClassHdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_keyboard_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_IS_KEYBOARD_ACTIVATED>---*/

  return CGUIKeyboardFactory::isKeyboardActivated();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_KEYBOARD_IS_KEYBOARD_ACTIVATED_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
