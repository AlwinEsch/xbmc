/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "numeric.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/dialogs/numeric.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "XBDateTime.h"
#include "dialogs/GUIDialogNumeric.h"

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_dialogs_numeric_h::InitDirect(
    directFuncToKodi_gui_dialogs_numeric_h* ifcToKodi,
    directFuncToAddon_gui_dialogs_numeric_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_verify_new_password_v1 =
      kodi_gui_dialogs_numeric_show_and_verify_new_password_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_verify_password_v1 =
      kodi_gui_dialogs_numeric_show_and_verify_password_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_verify_input_v1 =
      kodi_gui_dialogs_numeric_show_and_verify_input_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_get_time_v1 =
      kodi_gui_dialogs_numeric_show_and_get_time_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_get_date_v1 =
      kodi_gui_dialogs_numeric_show_and_get_date_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_get_ip_address_v1 =
      kodi_gui_dialogs_numeric_show_and_get_ip_address_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_get_number_v1 =
      kodi_gui_dialogs_numeric_show_and_get_number_v1;
  ifcToKodi->kodi_gui_dialogs_numeric_show_and_get_seconds_v1 =
      kodi_gui_dialogs_numeric_show_and_get_seconds_v1;
}

bool CHdl_kodi_gui_dialogs_numeric_h::HandleMessage(int funcGroup,
                                                    int func,
                                                    const msgpack::unpacked& in,
                                                    msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_dialogs_numeric_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_dialogs_numeric_show_and_verify_new_password_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_verify_new_password(char** password) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_new_password_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_new_password_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_new_password_v1 t =
          in.get().as<decltype(t)>();
      char* password = nullptr;
      bool auto_gen_ret = kodi_gui_dialogs_numeric_show_and_verify_new_password_v1(this, &password);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_new_password_v1(
                             auto_gen_ret, password ? password : ""));
      if (password)
        free(password);
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_verify_password_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_dialogs_numeric_show_and_verify_password(const char* password, const char* heading, int retries) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, int> msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_password_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_password_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_password_v1 t =
          in.get().as<decltype(t)>();
      const std::string& password = std::get<0>(t);
      const std::string& heading = std::get<1>(t);
      int retries = std::get<2>(t);
      int auto_gen_ret = kodi_gui_dialogs_numeric_show_and_verify_password_v1(
          this, password.c_str(), heading.c_str(), retries);
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_password_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_verify_input_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_verify_input(const char* verify_in, char** verify_out, const char* heading, bool verify_input) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, bool> msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_input_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_input_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_verify_input_v1 t =
          in.get().as<decltype(t)>();
      const std::string& verify_in = std::get<0>(t);
      char* verify_out = nullptr;
      const std::string& heading = std::get<1>(t);
      bool verify_input = std::get<2>(t);
      bool auto_gen_ret = kodi_gui_dialogs_numeric_show_and_verify_input_v1(
          this, verify_in.c_str(), &verify_out, heading.c_str(), verify_input);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_verify_input_v1(
                             auto_gen_ret, verify_out ? verify_out : ""));
      if (verify_out)
        free(verify_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_get_time_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_get_time(struct tm* time, const char* heading) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<IFC_tm, std::string> msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_time_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, IFC_tm> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_time_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_time_v1 t = in.get().as<decltype(t)>();
      tm time;
      std::get<0>(t).SetCStructure(&time);
      const std::string& heading = std::get<1>(t);
      bool auto_gen_ret =
          kodi_gui_dialogs_numeric_show_and_get_time_v1(this, &time, heading.c_str());
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_time_v1(auto_gen_ret, &time));
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_get_date_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_get_date(struct tm* date, const char* heading) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<IFC_tm, std::string> msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_date_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, IFC_tm> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_date_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_date_v1 t = in.get().as<decltype(t)>();
      tm date;
      std::get<0>(t).SetCStructure(&date);
      const std::string& heading = std::get<1>(t);
      bool auto_gen_ret =
          kodi_gui_dialogs_numeric_show_and_get_date_v1(this, &date, heading.c_str());
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_date_v1(auto_gen_ret, &date));
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_get_ip_address_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_get_ip_address(const char* ip_address_in, char** ip_address_out, const char* heading) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string> msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_ip_address_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_ip_address_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_ip_address_v1 t =
          in.get().as<decltype(t)>();
      const std::string& ip_address_in = std::get<0>(t);
      char* ip_address_out = nullptr;
      const std::string& heading = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_dialogs_numeric_show_and_get_ip_address_v1(
          this, ip_address_in.c_str(), &ip_address_out, heading.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_ip_address_v1(
                             auto_gen_ret, ip_address_out ? ip_address_out : ""));
      if (ip_address_out)
        free(ip_address_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_get_number_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_get_number(const char* number_in, char** number_out, const char* heading, unsigned int auto_close_ms) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string, unsigned int> msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_number_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_number_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_number_v1 t = in.get().as<decltype(t)>();
      const std::string& number_in = std::get<0>(t);
      char* number_out = nullptr;
      const std::string& heading = std::get<1>(t);
      unsigned int auto_close_ms = std::get<2>(t);
      bool auto_gen_ret = kodi_gui_dialogs_numeric_show_and_get_number_v1(
          this, number_in.c_str(), &number_out, heading.c_str(), auto_close_ms);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_number_v1(
                             auto_gen_ret, number_out ? number_out : ""));
      if (number_out)
        free(number_out);
      return true;
    }
    case funcParent_kodi_gui_dialogs_numeric_show_and_get_seconds_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_numeric_show_and_get_seconds(const char* time_in, char** time_out, const char* heading) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::string> msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_seconds_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_seconds_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_numeric_show_and_get_seconds_v1 t = in.get().as<decltype(t)>();
      const std::string& time_in = std::get<0>(t);
      char* time_out = nullptr;
      const std::string& heading = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_dialogs_numeric_show_and_get_seconds_v1(
          this, time_in.c_str(), &time_out, heading.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_numeric_show_and_get_seconds_v1(
                             auto_gen_ret, time_out ? time_out : ""));
      if (time_out)
        free(time_out);
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_dialogs_numeric_h::{}: addon called with unknown function id '{}' "
                "on group 'gui_dialogs_numeric_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_verify_new_password_v1(
    void* thisClassHdl, char** password)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_NEW_PASSWORD>---*/

  std::string str;
  bool bRet = CGUIDialogNumeric::ShowAndVerifyNewPassword(str);
  if (bRet)
    *password = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_NEW_PASSWORD_END>---*/
}

int CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_verify_password_v1(
    void* thisClassHdl, const char* password, const char* heading, int retries)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_PASSWORD>---*/

  std::string pw(password);
  return CGUIDialogNumeric::ShowAndVerifyPassword(pw, heading, retries);

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_PASSWORD_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_verify_input_v1(
    void* thisClassHdl,
    const char* verify_in,
    char** verify_out,
    const char* heading,
    bool verify_input)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_INPUT>---*/

  std::string str = verify_in;
  if (CGUIDialogNumeric::ShowAndVerifyInput(str, heading, verify_input) ==
      InputVerificationResult::SUCCESS)
  {
    *verify_out = strdup(str.c_str());
    return true;
  }
  return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_INPUT_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_get_time_v1(
    void* thisClassHdl, struct tm* time, const char* heading)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_TIME>---*/

  KODI::TIME::SystemTime systemTime;
  CDateTime dateTime(*time);
  dateTime.GetAsSystemTime(systemTime);
  if (CGUIDialogNumeric::ShowAndGetTime(systemTime, heading))
  {
    dateTime = systemTime;
    dateTime.GetAsTm(*time);
    return true;
  }
  return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_TIME_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_get_date_v1(
    void* thisClassHdl, struct tm* date, const char* heading)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_DATE>---*/

  KODI::TIME::SystemTime systemTime;
  CDateTime dateTime(*date);
  dateTime.GetAsSystemTime(systemTime);
  if (CGUIDialogNumeric::ShowAndGetDate(systemTime, heading))
  {
    dateTime = systemTime;
    dateTime.GetAsTm(*date);
    return true;
  }
  return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_DATE_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_get_ip_address_v1(
    void* thisClassHdl, const char* ip_address_in, char** ip_address_out, const char* heading)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_IP_ADDRESS>---*/

  std::string strIP = ip_address_in;
  bool bRet = CGUIDialogNumeric::ShowAndGetIPAddress(strIP, heading);
  if (bRet)
    *ip_address_out = strdup(strIP.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_IP_ADDRESS_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_get_number_v1(
    void* thisClassHdl,
    const char* number_in,
    char** number_out,
    const char* heading,
    unsigned int auto_close_ms)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_NUMBER>---*/

  std::string str = number_in;
  bool bRet = CGUIDialogNumeric::ShowAndGetNumber(str, heading, auto_close_ms);
  if (bRet)
    *number_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_NUMBER_END>---*/
}

bool CHdl_kodi_gui_dialogs_numeric_h::kodi_gui_dialogs_numeric_show_and_get_seconds_v1(
    void* thisClassHdl, const char* time_in, char** time_out, const char* heading)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_numeric_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_SECONDS>---*/

  std::string str = time_in;
  bool bRet = CGUIDialogNumeric::ShowAndGetSeconds(str, heading);
  if (bRet)
    *time_out = strdup(str.c_str());
  return bRet;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_SECONDS_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
