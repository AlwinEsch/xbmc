/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "select.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/dialogs/select.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "dialogs/GUIDialogSelect.h"
#include "guilib/GUIComponent.h"
#include "guilib/GUIWindowManager.h"
#include "utils/Variant.h"

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_dialogs_select_h::InitDirect(directFuncToKodi_gui_dialogs_select_h* ifcToKodi,
                                                directFuncToAddon_gui_dialogs_select_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_dialogs_select_open_v1 = kodi_gui_dialogs_select_open_v1;
  ifcToKodi->kodi_gui_dialogs_select_open_multi_select_v1 =
      kodi_gui_dialogs_select_open_multi_select_v1;
}

bool CHdl_kodi_gui_dialogs_select_h::HandleMessage(int funcGroup,
                                                   int func,
                                                   const msgpack::unpacked& in,
                                                   msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_dialogs_select_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_dialogs_select_open_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_dialogs_select_open(const char* heading, const char* entries[], size_t size, int selected, unsigned int autoclose) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::vector<std::string>, size_t, int, unsigned int> msgParent__IN_kodi_gui_dialogs_select_open_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_dialogs_select_open_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_select_open_v1 t = in.get().as<decltype(t)>();
      const std::string& heading = std::get<0>(t);
      const std::vector<std::string>& cpp_entries = std::get<1>(t);
      size_t size = std::get<2>(t);
      int selected = std::get<3>(t);
      unsigned int autoclose = std::get<4>(t);

      std::vector<const char*> entries;
      entries.reserve(size);
      for (size_t i = 0; i < size; ++i)
      {
        entries.emplace_back(cpp_entries[i].c_str());
      }
      assert(cpp_entries.size() == size);

      int auto_gen_ret = kodi_gui_dialogs_select_open_v1(this, heading.c_str(), entries.data(),
                                                         size, selected, autoclose);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_select_open_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_dialogs_select_open_multi_select_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_select_open_multi_select(const char* heading, const char* entryIDs[], const char* entryNames[], uint8_t entriesSelected[], size_t size, unsigned int autoclose) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<std::string, std::vector<std::string>, std::vector<std::string>, std::vector<uint8_t>, size_t, unsigned int> msgParent__IN_kodi_gui_dialogs_select_open_multi_select_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::vector<uint8_t>> msgParent_OUT_kodi_gui_dialogs_select_open_multi_select_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_dialogs_select_open_multi_select_v1 t = in.get().as<decltype(t)>();
      const std::string& heading = std::get<0>(t);
      const std::vector<std::string>& cpp_entryIDs = std::get<1>(t);
      const std::vector<std::string>& cpp_entryNames = std::get<2>(t);
      std::vector<uint8_t>& entriesSelected = std::get<3>(t);
      size_t size = std::get<4>(t);
      unsigned int autoclose = std::get<5>(t);

      std::vector<const char*> entryIDs;
      entryIDs.reserve(size);
      for (size_t i = 0; i < size; ++i)
      {
        entryIDs.emplace_back(cpp_entryIDs[i].c_str());
      }
      assert(cpp_entryIDs.size() == size);


      std::vector<const char*> entryNames;
      entryNames.reserve(size);
      for (size_t i = 0; i < size; ++i)
      {
        entryNames.emplace_back(cpp_entryNames[i].c_str());
      }
      assert(cpp_entryNames.size() == size);

      bool auto_gen_ret = kodi_gui_dialogs_select_open_multi_select_v1(
          this, heading.c_str(), entryIDs.data(), entryNames.data(), entriesSelected.data(), size,
          autoclose);
      msgpack::pack(out, msgParent_OUT_kodi_gui_dialogs_select_open_multi_select_v1(
                             auto_gen_ret, entriesSelected));
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_dialogs_select_h::{}: addon called with unknown function id '{}' on "
                "group 'gui_dialogs_select_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

int CHdl_kodi_gui_dialogs_select_h::kodi_gui_dialogs_select_open_v1(void* thisClassHdl,
                                                                    const char* heading,
                                                                    const char* entries[],
                                                                    size_t size,
                                                                    int selected,
                                                                    unsigned int autoclose)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_select_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_SELECT_OPEN>---*/

  CGUIDialogSelect* dialog =
      CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogSelect>(
          WINDOW_DIALOG_SELECT);

  dialog->Reset();
  dialog->SetHeading(CVariant{heading});

  for (unsigned int i = 0; i < size; ++i)
    dialog->Add(entries[i]);

  if (selected > 0)
    dialog->SetSelected(selected);
  if (autoclose > 0)
    dialog->SetAutoClose(autoclose);

  dialog->Open();
  return dialog->GetSelectedItem();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_SELECT_OPEN_END>---*/
}

bool CHdl_kodi_gui_dialogs_select_h::kodi_gui_dialogs_select_open_multi_select_v1(
    void* thisClassHdl,
    const char* heading,
    const char* entryIDs[],
    const char* entryNames[],
    uint8_t entriesSelected[],
    size_t size,
    unsigned int autoclose)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_dialogs_select_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_SELECT_OPEN_MULTI_SELECT>---*/

  CGUIDialogSelect* dialog =
      CServiceBroker::GetGUI()->GetWindowManager().GetWindow<CGUIDialogSelect>(
          WINDOW_DIALOG_SELECT);
  dialog->Reset();
  dialog->SetMultiSelection(true);
  dialog->SetHeading(CVariant{heading});

  std::vector<int> selectedIndexes;

  for (unsigned int i = 0; i < size; ++i)
  {
    dialog->Add(entryNames[i]);
    if (entriesSelected[i])
      selectedIndexes.push_back(i);
  }

  dialog->SetSelected(selectedIndexes);
  if (autoclose > 0)
    dialog->SetAutoClose(autoclose);

  dialog->Open();
  if (dialog->IsConfirmed())
  {
    for (unsigned int i = 0; i < size; ++i)
      entriesSelected[i] = 0;

    selectedIndexes = dialog->GetSelectedItems();

    for (unsigned int i = 0; i < selectedIndexes.size(); ++i)
    {
      if (selectedIndexes[i])
        entriesSelected[selectedIndexes[i]] = 1;
    }
  }

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_SELECT_OPEN_MULTI_SELECT_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
