/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "window.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/gui/window.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "Application.h"
#include "FileItem.h"
#include "ServiceBroker.h"
#include "addons/Skin.h"
#include "addons/interface/tools/GUITranslator.h"
#include "general.h"
// #include "controls/Rendering.h"
#include "filesystem/File.h"
#include "guilib/GUIComponent.h"
#include "guilib/GUIRenderingControl.h"
#include "guilib/GUIWindowManager.h"
#include "guilib/TextureManager.h"
#include "input/Key.h"
#include "messaging/ApplicationMessenger.h"
#include "threads/Event.h"
#include "utils/StringUtils.h"
#include "utils/URIUtils.h"
#include "utils/Variant.h"

using namespace ADDON;
using namespace KODI::MESSAGING;

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/

CGUIAddonWindow::CGUIAddonWindow(int id,
                                 const std::string& strXML,
                                 std::shared_ptr<ADDON::IAddon> addon,
                                 bool isMedia)
  : CGUIMediaWindow(id, strXML.c_str()),
    m_windowId(id),
    m_oldWindowId(0),
    m_addon(addon),
    m_isMedia(isMedia)
{
  m_loadType = LOAD_ON_GUI_INIT;
}

CGUIControl* CGUIAddonWindow::GetAddonControl(int controlId,
                                              CGUIControl::GUICONTROLTYPES type,
                                              const std::string& typeName)
{
  // Load window resources, if not already done, to have related xml content
  // present and to let control find it
  if (!m_windowLoaded)
  {
    if (!Initialize())
    {
      CLog::Log(LOGERROR,
                "CGUIAddonGUI_Window::{}: {} - Window initialize failed by control id '{}' request "
                "for '{}'",
                __func__, m_addon->Name(), controlId, typeName);
      return nullptr;
    }
  }

  CGUIControl* pGUIControl = GetControl(controlId);
  if (!pGUIControl)
  {
    CLog::Log(LOGERROR,
              "CGUIAddonGUI_Window::{}: {} - Requested GUI control Id '{}' for '{}' not present!",
              __func__, m_addon->Name(), controlId, typeName);
    return nullptr;
  }
  else if (pGUIControl->GetControlType() != type)
  {
    CLog::Log(LOGERROR,
              "CGUIAddonGUI_Window::{}: {} - Requested GUI control Id '{}' not the type '{}'!",
              __func__, m_addon->Name(), controlId, typeName);
    return nullptr;
  }

  return pGUIControl;
}

bool CGUIAddonWindow::OnAction(const CAction& action)
{
  // Let addon decide whether it wants to handle action first
  if (CBOnAction &&
      CBOnAction(m_clientHandle, CAddonGUITranslator::TranslateActionIdToAddon(action.GetID())))
    return true;

  return CGUIWindow::OnAction(action);
}
bool CGUIAddonWindow::OnMessage(CGUIMessage& message)
{
  switch (message.GetMessage())
  {
    case GUI_MSG_WINDOW_DEINIT:
    {
      return CGUIMediaWindow::OnMessage(message);
    }
    break;

    case GUI_MSG_WINDOW_INIT:
    {
      CGUIMediaWindow::OnMessage(message);

      if (CBOnInit)
        CBOnInit(m_clientHandle);
      return true;
    }
    break;

    case GUI_MSG_FOCUSED:
    {
      if (m_viewControl.HasControl(message.GetControlId()) &&
          m_viewControl.GetCurrentControl() != message.GetControlId())
      {
        m_viewControl.SetFocused();
        return true;
      }
      // check if our focused control is one of our category buttons
      int iControl = message.GetControlId();
      if (CBOnFocus)
        CBOnFocus(m_clientHandle, iControl);
    }
    break;

    case GUI_MSG_NOTIFY_ALL:
    {
      // most messages from GUI_MSG_NOTIFY_ALL break container content, whitelist working ones.
      if (message.GetParam1() == GUI_MSG_PAGE_CHANGE ||
          message.GetParam1() == GUI_MSG_WINDOW_RESIZE)
        return CGUIMediaWindow::OnMessage(message);
      return true;
    }

    case GUI_MSG_CLICKED:
    {
      int iControl = message.GetSenderId();
      if (iControl && iControl != this->GetID())
      {
        CGUIControl* controlClicked = this->GetControl(iControl);

        // The old python way used to check list AND SELECITEM method or if its a button, checkmark.
        // Its done this way for now to allow other controls without a python version like togglebutton to still raise a onAction event
        if (controlClicked) // Will get problems if we the id is not on the window and we try to do GetControlType on it. So check to make sure it exists
        {
          if ((controlClicked->IsContainer() && (message.GetParam1() == ACTION_SELECT_ITEM ||
                                                 message.GetParam1() == ACTION_MOUSE_LEFT_CLICK)) ||
              !controlClicked->IsContainer())
          {
            if (CBOnClick)
              return CBOnClick(m_clientHandle, iControl);
          }
          else if (controlClicked->IsContainer() &&
                   (message.GetParam1() == ACTION_MOUSE_RIGHT_CLICK ||
                    message.GetParam1() == ACTION_CONTEXT_MENU))
          {
            if (CBOnAction)
            {
              // Check addon want to handle right click for a context menu, if
              // not used from addon becomes "GetContextButtons(...)" called.
              if (CBOnAction(m_clientHandle, ADDON_ACTION_CONTEXT_MENU))
                return true;
            }
          }
        }
      }
    }
    break;
  }

  return CGUIMediaWindow::OnMessage(message);
}

void CGUIAddonWindow::AllocResources(bool forceLoad /*= false */)
{
  std::string tmpDir = URIUtils::GetDirectory(GetProperty("xmlfile").asString());
  std::string fallbackMediaPath;
  URIUtils::GetParentPath(tmpDir, fallbackMediaPath);
  URIUtils::RemoveSlashAtEnd(fallbackMediaPath);
  m_mediaDir = fallbackMediaPath;

  CServiceBroker::GetGUI()->GetTextureManager().AddTexturePath(m_mediaDir);
  CGUIMediaWindow::AllocResources(forceLoad);
  CServiceBroker::GetGUI()->GetTextureManager().RemoveTexturePath(m_mediaDir);
}

void CGUIAddonWindow::Render()
{
  CServiceBroker::GetGUI()->GetTextureManager().AddTexturePath(m_mediaDir);
  CGUIMediaWindow::Render();
  CServiceBroker::GetGUI()->GetTextureManager().RemoveTexturePath(m_mediaDir);
}

void CGUIAddonWindow::AddItem(CFileItemPtr* fileItem, int itemPosition)
{
  if (itemPosition == -1 || itemPosition > m_vecItems->Size())
  {
    m_vecItems->Add(*fileItem);
  }
  else if (itemPosition < -1 && !(itemPosition - 1 < m_vecItems->Size()))
  {
    m_vecItems->AddFront(*fileItem, 0);
  }
  else
  {
    m_vecItems->AddFront(*fileItem, itemPosition);
  }
  m_viewControl.SetItems(*m_vecItems);
  UpdateButtons();
}

void CGUIAddonWindow::RemoveItem(int itemPosition)
{
  m_vecItems->Remove(itemPosition);
  m_viewControl.SetItems(*m_vecItems);
  UpdateButtons();
}

void CGUIAddonWindow::RemoveItem(CFileItemPtr* fileItem)
{
  m_vecItems->Remove(fileItem->get());
  m_viewControl.SetItems(*m_vecItems);
  UpdateButtons();
}

int CGUIAddonWindow::GetCurrentListPosition()
{
  return m_viewControl.GetSelectedItem();
}

void CGUIAddonWindow::SetCurrentListPosition(int item)
{
  m_viewControl.SetSelectedItem(item);
}

int CGUIAddonWindow::GetListSize()
{
  return m_vecItems->Size();
}

CFileItemPtr* CGUIAddonWindow::GetListItem(int position)
{
  if (position < 0 || position >= m_vecItems->Size())
    return nullptr;
  return new CFileItemPtr(m_vecItems->Get(position));
}

void CGUIAddonWindow::ClearList()
{
  ClearFileItems();

  m_viewControl.SetItems(*m_vecItems);
  UpdateButtons();
}

void CGUIAddonWindow::SetContainerProperty(const std::string& key, const std::string& value)
{
  m_vecItems->SetProperty(key, value);
}

void CGUIAddonWindow::SetContainerContent(const std::string& value)
{
  m_vecItems->SetContent(value);
}

int CGUIAddonWindow::GetCurrentContainerControlId()
{
  return m_viewControl.GetCurrentControl();
}

void CGUIAddonWindow::GetContextButtons(int itemNumber, CContextButtons& buttons)
{
  gui_context_menu_pair c_buttons[ADDON_MAX_CONTEXT_ENTRIES] = {{0}};
  unsigned int size = ADDON_MAX_CONTEXT_ENTRIES;
  if (CBGetContextButtons)
  {
    CBGetContextButtons(m_clientHandle, itemNumber, c_buttons, &size);
    for (unsigned int i = 0; i < size; ++i)
      buttons.push_back(std::pair<unsigned int, std::string>(c_buttons[i].id, c_buttons[i].name));
  }
}

bool CGUIAddonWindow::OnContextButton(int itemNumber, CONTEXT_BUTTON button)
{
  if (CBOnContextButton)
    return CBOnContextButton(m_clientHandle, itemNumber, static_cast<unsigned int>(button));
  return false;
}

void CGUIAddonWindow::WaitForActionEvent(unsigned int timeout)
{
  m_actionEvent.WaitMSec(timeout);
  m_actionEvent.Reset();
}

void CGUIAddonWindow::PulseActionEvent()
{
  m_actionEvent.Set();
}

void CGUIAddonWindow::SetupShares()
{
  UpdateButtons();
}


CGUIAddonWindowDialog::CGUIAddonWindowDialog(int id,
                                             const std::string& strXML,
                                             std::shared_ptr<ADDON::IAddon> addon)
  : CGUIAddonWindow(id, strXML, addon, false), m_bRunning(false)
{
}

void CGUIAddonWindowDialog::Show(bool show /* = true */, bool modal /* = true*/)
{
  if (modal)
  {
    unsigned int count = CServiceBroker::GetWinSystem()->GetGfxContext().exit();
    CApplicationMessenger::GetInstance().SendMsg(TMSG_GUI_ADDON_DIALOG, 0, show ? 1 : 0,
                                                 static_cast<void*>(this));
    CServiceBroker::GetWinSystem()->GetGfxContext().restore(count);
  }
  else
    CApplicationMessenger::GetInstance().PostMsg(TMSG_GUI_ADDON_DIALOG, 0, show ? 1 : 0,
                                                 static_cast<void*>(this));
}

void CGUIAddonWindowDialog::Show_Internal(bool show /* = true */)
{
  if (show)
  {
    m_bRunning = true;
    CServiceBroker::GetGUI()->GetWindowManager().RegisterDialog(this);

    // activate this window...
    CGUIMessage msg(GUI_MSG_WINDOW_INIT, 0, 0, WINDOW_INVALID, GetID());
    OnMessage(msg);

    // this dialog is derived from GUIMediaWindow
    // make sure it is rendered last
    m_renderOrder = RENDER_ORDER_DIALOG;
    while (m_bRunning)
    {
      if (!ProcessRenderLoop(false))
        break;
    }
  }
  else // hide
  {
    m_bRunning = false;

    CGUIMessage msg(GUI_MSG_WINDOW_DEINIT, 0, 0);
    OnMessage(msg);

    CServiceBroker::GetGUI()->GetWindowManager().RemoveDialog(GetID());
  }
}

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_window_h::InitDirect(directFuncToKodi_gui_window_h* ifcToKodi,
                                        directFuncToAddon_gui_window_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_gui_window_create_v1 = kodi_gui_window_create_v1;
  ifcToKodi->kodi_gui_window_destroy_v1 = kodi_gui_window_destroy_v1;
  ifcToKodi->kodi_gui_window_show_v1 = kodi_gui_window_show_v1;
  ifcToKodi->kodi_gui_window_close_v1 = kodi_gui_window_close_v1;
  ifcToKodi->kodi_gui_window_do_modal_v1 = kodi_gui_window_do_modal_v1;
  ifcToKodi->kodi_gui_window_set_focus_id_v1 = kodi_gui_window_set_focus_id_v1;
  ifcToKodi->kodi_gui_window_get_focus_id_v1 = kodi_gui_window_get_focus_id_v1;
  ifcToKodi->kodi_gui_window_set_control_label_v1 = kodi_gui_window_set_control_label_v1;
  ifcToKodi->kodi_gui_window_set_control_visible_v1 = kodi_gui_window_set_control_visible_v1;
  ifcToKodi->kodi_gui_window_set_control_selected_v1 = kodi_gui_window_set_control_selected_v1;
  ifcToKodi->kodi_gui_window_set_property_v1 = kodi_gui_window_set_property_v1;
  ifcToKodi->kodi_gui_window_set_property_int_v1 = kodi_gui_window_set_property_int_v1;
  ifcToKodi->kodi_gui_window_set_property_bool_v1 = kodi_gui_window_set_property_bool_v1;
  ifcToKodi->kodi_gui_window_set_property_double_v1 = kodi_gui_window_set_property_double_v1;
  ifcToKodi->kodi_gui_window_get_property_v1 = kodi_gui_window_get_property_v1;
  ifcToKodi->kodi_gui_window_get_property_int_v1 = kodi_gui_window_get_property_int_v1;
  ifcToKodi->kodi_gui_window_get_property_bool_v1 = kodi_gui_window_get_property_bool_v1;
  ifcToKodi->kodi_gui_window_get_property_double_v1 = kodi_gui_window_get_property_double_v1;
  ifcToKodi->kodi_gui_window_clear_properties_v1 = kodi_gui_window_clear_properties_v1;
  ifcToKodi->kodi_gui_window_clear_property_v1 = kodi_gui_window_clear_property_v1;
  ifcToKodi->kodi_gui_window_clear_item_list_v1 = kodi_gui_window_clear_item_list_v1;
  ifcToKodi->kodi_gui_window_add_list_item_v1 = kodi_gui_window_add_list_item_v1;
  ifcToKodi->kodi_gui_window_remove_list_item_from_position_v1 =
      kodi_gui_window_remove_list_item_from_position_v1;
  ifcToKodi->kodi_gui_window_remove_list_item_v1 = kodi_gui_window_remove_list_item_v1;
  ifcToKodi->kodi_gui_window_get_list_item_v1 = kodi_gui_window_get_list_item_v1;
  ifcToKodi->kodi_gui_window_set_current_list_position_v1 =
      kodi_gui_window_set_current_list_position_v1;
  ifcToKodi->kodi_gui_window_get_current_list_position_v1 =
      kodi_gui_window_get_current_list_position_v1;
  ifcToKodi->kodi_gui_window_get_list_size_v1 = kodi_gui_window_get_list_size_v1;
  ifcToKodi->kodi_gui_window_set_container_property_v1 = kodi_gui_window_set_container_property_v1;
  ifcToKodi->kodi_gui_window_set_container_content_v1 = kodi_gui_window_set_container_content_v1;
  ifcToKodi->kodi_gui_window_get_current_container_id_v1 =
      kodi_gui_window_get_current_container_id_v1;
  ifcToKodi->kodi_gui_window_mark_dirty_region_v1 = kodi_gui_window_mark_dirty_region_v1;
  ifcToKodi->kodi_gui_window_get_control_button_v1 = kodi_gui_window_get_control_button_v1;
  ifcToKodi->kodi_gui_window_get_control_edit_v1 = kodi_gui_window_get_control_edit_v1;
  ifcToKodi->kodi_gui_window_get_control_fade_label_v1 = kodi_gui_window_get_control_fade_label_v1;
  ifcToKodi->kodi_gui_window_get_control_image_v1 = kodi_gui_window_get_control_image_v1;
  ifcToKodi->kodi_gui_window_get_control_label_v1 = kodi_gui_window_get_control_label_v1;
  ifcToKodi->kodi_gui_window_get_control_progress_v1 = kodi_gui_window_get_control_progress_v1;
  ifcToKodi->kodi_gui_window_get_control_radio_button_v1 =
      kodi_gui_window_get_control_radio_button_v1;
  ifcToKodi->kodi_gui_window_get_control_render_addon_v1 =
      kodi_gui_window_get_control_render_addon_v1;
  ifcToKodi->kodi_gui_window_get_control_settings_slider_v1 =
      kodi_gui_window_get_control_settings_slider_v1;
  ifcToKodi->kodi_gui_window_get_control_slider_v1 = kodi_gui_window_get_control_slider_v1;
  ifcToKodi->kodi_gui_window_get_control_spin_v1 = kodi_gui_window_get_control_spin_v1;
  ifcToKodi->kodi_gui_window_get_control_text_box_v1 = kodi_gui_window_get_control_text_box_v1;
}

bool CHdl_kodi_gui_window_h::HandleMessage(int funcGroup,
                                           int func,
                                           const msgpack::unpacked& in,
                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_gui_window_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_gui_window_create_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_WINDOW_HANDLE kodi_gui_window_create(KODI_HANDLE kodiBase, const char* xml_filename, const char* default_skin, bool as_dialog, bool is_media) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string, bool, bool> msgParent__IN_kodi_gui_window_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_create_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_create_v1 t = in.get().as<decltype(t)>();
      KODI_HANDLE kodiBase = reinterpret_cast<KODI_HANDLE>(std::get<0>(t));
      const std::string& xml_filename = std::get<1>(t);
      const std::string& default_skin = std::get<2>(t);
      bool as_dialog = std::get<3>(t);
      bool is_media = std::get<4>(t);
      KODI_GUI_WINDOW_HANDLE auto_gen_ret = kodi_gui_window_create_v1(
          this, kodiBase, xml_filename.c_str(), default_skin.c_str(), as_dialog, is_media);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_destroy_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_destroy(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_destroy_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      kodi_gui_window_destroy_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_window_show_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_window_show(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_show_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_window_show_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_show_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      bool auto_gen_ret = kodi_gui_window_show_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_show_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_close_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_window_close(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_close_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_window_close_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_close_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      bool auto_gen_ret = kodi_gui_window_close_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_close_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_do_modal_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_window_do_modal(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_do_modal_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_window_do_modal_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_do_modal_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      bool auto_gen_ret = kodi_gui_window_do_modal_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_do_modal_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_set_focus_id_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_window_set_focus_id(KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_set_focus_id_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_window_set_focus_id_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_focus_id_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_window_set_focus_id_v1(this, handle, control_id);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_set_focus_id_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_get_focus_id_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_window_get_focus_id(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_get_focus_id_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_window_get_focus_id_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_focus_id_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int auto_gen_ret = kodi_gui_window_get_focus_id_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_focus_id_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_set_control_label_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_control_label(KODI_GUI_WINDOW_HANDLE handle, int control_id, const char* label) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int, std::string> msgParent__IN_kodi_gui_window_set_control_label_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_control_label_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_control_label_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      const std::string& label = std::get<2>(t);
      kodi_gui_window_set_control_label_v1(this, handle, control_id, label.c_str());
      return true;
    }
    case funcParent_kodi_gui_window_set_control_visible_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_control_visible(KODI_GUI_WINDOW_HANDLE handle, int control_id, bool visible) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int, bool> msgParent__IN_kodi_gui_window_set_control_visible_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_control_visible_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_control_visible_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      bool visible = std::get<2>(t);
      kodi_gui_window_set_control_visible_v1(this, handle, control_id, visible);
      return true;
    }
    case funcParent_kodi_gui_window_set_control_selected_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_control_selected(KODI_GUI_WINDOW_HANDLE handle, int control_id, bool selected) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int, bool> msgParent__IN_kodi_gui_window_set_control_selected_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_control_selected_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_control_selected_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      bool selected = std::get<2>(t);
      kodi_gui_window_set_control_selected_v1(this, handle, control_id, selected);
      return true;
    }
    case funcParent_kodi_gui_window_set_property_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_property(KODI_GUI_WINDOW_HANDLE handle, const char* key, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string> msgParent__IN_kodi_gui_window_set_property_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_property_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_property_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      const std::string& value = std::get<2>(t);
      kodi_gui_window_set_property_v1(this, handle, key.c_str(), value.c_str());
      return true;
    }
    case funcParent_kodi_gui_window_set_property_int_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_property_int(KODI_GUI_WINDOW_HANDLE handle, const char* key, int value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, int> msgParent__IN_kodi_gui_window_set_property_int_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_property_int_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_property_int_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      int value = std::get<2>(t);
      kodi_gui_window_set_property_int_v1(this, handle, key.c_str(), value);
      return true;
    }
    case funcParent_kodi_gui_window_set_property_bool_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_property_bool(KODI_GUI_WINDOW_HANDLE handle, const char* key, bool value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, bool> msgParent__IN_kodi_gui_window_set_property_bool_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_property_bool_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_property_bool_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      bool value = std::get<2>(t);
      kodi_gui_window_set_property_bool_v1(this, handle, key.c_str(), value);
      return true;
    }
    case funcParent_kodi_gui_window_set_property_double_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_property_double(KODI_GUI_WINDOW_HANDLE handle, const char* key, double value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, double> msgParent__IN_kodi_gui_window_set_property_double_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_property_double_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_property_double_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      double value = std::get<2>(t);
      kodi_gui_window_set_property_double_v1(this, handle, key.c_str(), value);
      return true;
    }
    case funcParent_kodi_gui_window_get_property_v1:
    {
      // Original API call: ATTR_DLL_EXPORT char* kodi_gui_window_get_property(KODI_GUI_WINDOW_HANDLE handle, const char* key) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_get_property_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_gui_window_get_property_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_property_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      char* auto_gen_ret = kodi_gui_window_get_property_v1(this, handle, key.c_str());
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_window_get_property_v1(auto_gen_ret ? auto_gen_ret : ""));
      if (auto_gen_ret)
        free(auto_gen_ret);
      return true;
    }
    case funcParent_kodi_gui_window_get_property_int_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_window_get_property_int(KODI_GUI_WINDOW_HANDLE handle, const char* key) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_get_property_int_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_window_get_property_int_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_property_int_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      int auto_gen_ret = kodi_gui_window_get_property_int_v1(this, handle, key.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_property_int_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_get_property_bool_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_gui_window_get_property_bool(KODI_GUI_WINDOW_HANDLE handle, const char* key) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_get_property_bool_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_gui_window_get_property_bool_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_property_bool_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      bool auto_gen_ret = kodi_gui_window_get_property_bool_v1(this, handle, key.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_property_bool_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_get_property_double_v1:
    {
      // Original API call: ATTR_DLL_EXPORT double kodi_gui_window_get_property_double(KODI_GUI_WINDOW_HANDLE handle, const char* key) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_get_property_double_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<double> msgParent_OUT_kodi_gui_window_get_property_double_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_property_double_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      double auto_gen_ret = kodi_gui_window_get_property_double_v1(this, handle, key.c_str());
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_property_double_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_clear_properties_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_clear_properties(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_clear_properties_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_clear_properties_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_clear_properties_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      kodi_gui_window_clear_properties_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_window_clear_property_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_clear_property(KODI_GUI_WINDOW_HANDLE handle, const char* key) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_clear_property_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_clear_property_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_clear_property_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      kodi_gui_window_clear_property_v1(this, handle, key.c_str());
      return true;
    }
    case funcParent_kodi_gui_window_clear_item_list_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_clear_item_list(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_clear_item_list_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_clear_item_list_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_clear_item_list_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      kodi_gui_window_clear_item_list_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_window_add_list_item_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_add_list_item(KODI_GUI_WINDOW_HANDLE handle, KODI_GUI_LISTITEM_HANDLE item, int list_position) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int> msgParent__IN_kodi_gui_window_add_list_item_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_add_list_item_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_add_list_item_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      KODI_GUI_LISTITEM_HANDLE item = reinterpret_cast<KODI_GUI_LISTITEM_HANDLE>(std::get<1>(t));
      int list_position = std::get<2>(t);
      kodi_gui_window_add_list_item_v1(this, handle, item, list_position);
      return true;
    }
    case funcParent_kodi_gui_window_remove_list_item_from_position_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_remove_list_item_from_position(KODI_GUI_WINDOW_HANDLE handle, int list_position) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_remove_list_item_from_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_remove_list_item_from_position_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_remove_list_item_from_position_v1 t =
          in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int list_position = std::get<1>(t);
      kodi_gui_window_remove_list_item_from_position_v1(this, handle, list_position);
      return true;
    }
    case funcParent_kodi_gui_window_remove_list_item_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_remove_list_item(KODI_GUI_WINDOW_HANDLE handle, KODI_GUI_LISTITEM_HANDLE item) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgParent__IN_kodi_gui_window_remove_list_item_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_remove_list_item_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_remove_list_item_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      KODI_GUI_LISTITEM_HANDLE item = reinterpret_cast<KODI_GUI_LISTITEM_HANDLE>(std::get<1>(t));
      kodi_gui_window_remove_list_item_v1(this, handle, item);
      return true;
    }
    case funcParent_kodi_gui_window_get_list_item_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_LISTITEM_HANDLE kodi_gui_window_get_list_item(KODI_GUI_WINDOW_HANDLE handle, int list_position) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_list_item_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_list_item_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_list_item_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int list_position = std::get<1>(t);
      KODI_GUI_LISTITEM_HANDLE auto_gen_ret =
          kodi_gui_window_get_list_item_v1(this, handle, list_position);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_list_item_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_set_current_list_position_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_current_list_position(KODI_GUI_WINDOW_HANDLE handle, int list_position) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_set_current_list_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_current_list_position_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_current_list_position_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int list_position = std::get<1>(t);
      kodi_gui_window_set_current_list_position_v1(this, handle, list_position);
      return true;
    }
    case funcParent_kodi_gui_window_get_current_list_position_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_window_get_current_list_position(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_get_current_list_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_window_get_current_list_position_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_current_list_position_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int auto_gen_ret = kodi_gui_window_get_current_list_position_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_current_list_position_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_get_list_size_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_window_get_list_size(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_get_list_size_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_window_get_list_size_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_list_size_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int auto_gen_ret = kodi_gui_window_get_list_size_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_list_size_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_set_container_property_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_container_property(KODI_GUI_WINDOW_HANDLE handle, const char* key, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string> msgParent__IN_kodi_gui_window_set_container_property_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_container_property_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_container_property_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& key = std::get<1>(t);
      const std::string& value = std::get<2>(t);
      kodi_gui_window_set_container_property_v1(this, handle, key.c_str(), value.c_str());
      return true;
    }
    case funcParent_kodi_gui_window_set_container_content_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_set_container_content(KODI_GUI_WINDOW_HANDLE handle, const char* value) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_gui_window_set_container_content_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_set_container_content_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_set_container_content_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      const std::string& value = std::get<1>(t);
      kodi_gui_window_set_container_content_v1(this, handle, value.c_str());
      return true;
    }
    case funcParent_kodi_gui_window_get_current_container_id_v1:
    {
      // Original API call: ATTR_DLL_EXPORT int kodi_gui_window_get_current_container_id(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_get_current_container_id_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_window_get_current_container_id_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_current_container_id_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int auto_gen_ret = kodi_gui_window_get_current_container_id_v1(this, handle);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_current_container_id_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_gui_window_mark_dirty_region_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_gui_window_mark_dirty_region(KODI_GUI_WINDOW_HANDLE handle) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_gui_window_mark_dirty_region_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_gui_window_mark_dirty_region_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_mark_dirty_region_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      kodi_gui_window_mark_dirty_region_v1(this, handle);
      return true;
    }
    case funcParent_kodi_gui_window_get_control_button_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_button( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_button_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_button_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_button_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_button_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_button_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_edit_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_edit( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_edit_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_edit_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_edit_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_edit_v1(this, handle, control_id);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_control_edit_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_fade_label_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_fade_label( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_fade_label_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_fade_label_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_fade_label_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_fade_label_v1(this, handle, control_id);
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_window_get_control_fade_label_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_image_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_image( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_image_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_image_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_image_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_image_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_image_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_label_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_label( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_label_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_label_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_label_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_label_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_label_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_progress_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_progress( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_progress_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_progress_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_progress_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_progress_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_progress_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_radio_button_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_radio_button( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_radio_button_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_radio_button_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_radio_button_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_radio_button_v1(this, handle, control_id);
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_window_get_control_radio_button_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_render_addon_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_render_addon( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_render_addon_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_render_addon_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_render_addon_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_render_addon_v1(this, handle, control_id);
      msgpack::pack(
          out, msgParent_OUT_kodi_gui_window_get_control_render_addon_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_settings_slider_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_settings_slider( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_settings_slider_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_settings_slider_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_settings_slider_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_settings_slider_v1(this, handle, control_id);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_control_settings_slider_v1(
                             PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_slider_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_slider( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_slider_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_slider_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_slider_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_slider_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_slider_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_spin_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_spin( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_spin_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_spin_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_spin_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_spin_v1(this, handle, control_id);
      msgpack::pack(out, msgParent_OUT_kodi_gui_window_get_control_spin_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcParent_kodi_gui_window_get_control_text_box_v1:
    {
      // Original API call: ATTR_DLL_EXPORT KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_text_box( KODI_GUI_WINDOW_HANDLE handle, int control_id) __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgParent__IN_kodi_gui_window_get_control_text_box_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgParent_OUT_kodi_gui_window_get_control_text_box_v1; /* Autogenerated */
      msgParent__IN_kodi_gui_window_get_control_text_box_v1 t = in.get().as<decltype(t)>();
      KODI_GUI_WINDOW_HANDLE handle = reinterpret_cast<KODI_GUI_WINDOW_HANDLE>(std::get<0>(t));
      int control_id = std::get<1>(t);
      KODI_GUI_CONTROL_HANDLE auto_gen_ret =
          kodi_gui_window_get_control_text_box_v1(this, handle, control_id);
      msgpack::pack(out,
                    msgParent_OUT_kodi_gui_window_get_control_text_box_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_gui_window_h::{}: addon called with unknown function id '{}' on group "
                "'gui_window_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon
/* NOTE: unused (no functions here) */

// Callbacks from addon to Kodi

KODI_GUI_WINDOW_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_create_v1(void* thisClassHdl,
                                                                         KODI_HANDLE kodiBase,
                                                                         const char* xml_filename,
                                                                         const char* default_skin,
                                                                         bool as_dialog,
                                                                         bool is_media)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CREATE>---*/

  std::shared_ptr<ADDON::IAddon> addon = thisClass->m_process->GetAddon();
  if (as_dialog && is_media)
  {
    CLog::Log(
        LOGWARNING,
        "CHdl_kodi_gui_window_h::{}: {}/{} - addon tries to create dialog as media window who "
        "not allowed, contact Developer '{}' of this addon",
        __func__, CAddonInfo::TranslateType(addon->Type()), addon->Name(), addon->Author());
  }

  RESOLUTION_INFO res;
  std::string strSkinPath = g_SkinInfo->GetSkinPath(xml_filename, &res);

  if (!XFILE::CFile::Exists(strSkinPath))
  {
    std::string str("none");
    ADDON::AddonInfoPtr addonInfo = std::make_shared<ADDON::CAddonInfo>(str, ADDON::ADDON_SKIN);

    // Check for the matching folder for the skin in the fallback skins folder
    std::string fallbackPath = URIUtils::AddFileToFolder(addon->Path(), "resources", "skins");
    std::string basePath = URIUtils::AddFileToFolder(fallbackPath, g_SkinInfo->ID());

    strSkinPath = g_SkinInfo->GetSkinPath(xml_filename, &res, basePath);

    // Check for the matching folder for the skin in the fallback skins folder (if it exists)
    if (XFILE::CFile::Exists(basePath))
    {
      addonInfo->SetPath(basePath);
      const std::shared_ptr<ADDON::CSkinInfo> skinInfo =
          std::make_shared<ADDON::CSkinInfo>(addonInfo, res);
      skinInfo->Start();
      strSkinPath = skinInfo->GetSkinPath(xml_filename, &res);
    }

    if (!XFILE::CFile::Exists(strSkinPath))
    {
      // Finally fallback to the DefaultSkin as it didn't exist in either the Kodi Skin folder or the fallback skin folder
      addonInfo->SetPath(URIUtils::AddFileToFolder(fallbackPath, default_skin));
      const std::shared_ptr<ADDON::CSkinInfo> skinInfo =
          std::make_shared<ADDON::CSkinInfo>(addonInfo, res);

      skinInfo->Start();
      strSkinPath = skinInfo->GetSkinPath(xml_filename, &res);
      if (!XFILE::CFile::Exists(strSkinPath))
      {
        CLog::Log(
            LOGERROR,
            "CHdl_kodi_gui_window_h::{}: {}/{} - XML File '{}' for Window is missing, contact "
            "Developer '{}' of this addon",
            __func__, CAddonInfo::TranslateType(addon->Type()), addon->Name(), strSkinPath,
            addon->Author());
        return nullptr;
      }
    }
  }

  int id = GetNextAvailableWindowId();
  if (id < 0)
    return nullptr;

  CGUIWindow* window;
  if (!as_dialog)
    window = new CGUIAddonWindow(id, strSkinPath, addon, is_media);
  else
    window = new CGUIAddonWindowDialog(id, strSkinPath, addon);

  CHdl_kodi_gui_general_h::lock();
  CServiceBroker::GetGUI()->GetWindowManager().Add(window);
  CHdl_kodi_gui_general_h::unlock();

  if (!CServiceBroker::GetGUI()->GetWindowManager().GetWindow(id))
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - Requested window id '{}' does not exist for addon '{}'",
              __func__, id, thisClass->m_process->GetAddonID());
    delete window;
    return nullptr;
  }
  window->SetCoordsRes(res);
  return window;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CREATE_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_destroy_v1(void* thisClassHdl,
                                                        KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_DESTROY>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  CGUIWindow* pWindow =
      CServiceBroker::GetGUI()->GetWindowManager().GetWindow(pAddonWindow->GetID());
  if (pWindow)
  {
    // first change to an existing window
    if (CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == pAddonWindow->GetID() &&
        !g_application.m_bStop)
    {
      if (CServiceBroker::GetGUI()->GetWindowManager().GetWindow(pAddonWindow->m_oldWindowId))
        CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(pAddonWindow->m_oldWindowId);
      else // old window does not exist anymore, switch to home
        CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(WINDOW_HOME);
    }
    // Free any window properties
    pAddonWindow->ClearProperties();
    // free the window's resources and unload it (free all guicontrols)
    pAddonWindow->FreeResources(true);

    CServiceBroker::GetGUI()->GetWindowManager().Remove(pAddonWindow->GetID());
  }
  delete pAddonWindow;
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_DESTROY_END>---*/
}

bool CHdl_kodi_gui_window_h::kodi_gui_window_show_v1(void* thisClassHdl,
                                                     KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SHOW>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return false;
  }

  if (pAddonWindow->m_oldWindowId != pAddonWindow->m_windowId &&
      pAddonWindow->m_windowId != CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow())
    pAddonWindow->m_oldWindowId = CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow();

  CHdl_kodi_gui_general_h::lock();
  if (pAddonWindow->IsDialog())
    dynamic_cast<CGUIAddonWindowDialog*>(pAddonWindow)->Show(true, false);
  else
    CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(pAddonWindow->GetID());
  CHdl_kodi_gui_general_h::unlock();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SHOW_END>---*/
}

bool CHdl_kodi_gui_window_h::kodi_gui_window_close_v1(void* thisClassHdl,
                                                      KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLOSE>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return false;
  }

  pAddonWindow->PulseActionEvent();

  CHdl_kodi_gui_general_h::lock();

  // if it's a dialog, we have to close it a bit different
  if (pAddonWindow->IsDialog())
    dynamic_cast<CGUIAddonWindowDialog*>(pAddonWindow)->Show(false);
  else
    CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(pAddonWindow->m_oldWindowId);
  pAddonWindow->m_oldWindowId = 0;

  CHdl_kodi_gui_general_h::unlock();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLOSE_END>---*/
}

bool CHdl_kodi_gui_window_h::kodi_gui_window_do_modal_v1(void* thisClassHdl,
                                                         KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_DO_MODAL>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return false;
  }

  if (pAddonWindow->GetID() == CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow())
    return true;

  if (pAddonWindow->m_oldWindowId != pAddonWindow->m_windowId &&
      pAddonWindow->m_windowId != CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow())
    pAddonWindow->m_oldWindowId = CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow();

  CHdl_kodi_gui_general_h::lock();
  if (pAddonWindow->IsDialog())
    dynamic_cast<CGUIAddonWindowDialog*>(pAddonWindow)->Show(true, true);
  else
    CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(pAddonWindow->GetID());
  CHdl_kodi_gui_general_h::unlock();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_DO_MODAL_END>---*/
}

bool CHdl_kodi_gui_window_h::kodi_gui_window_set_focus_id_v1(void* thisClassHdl,
                                                             KODI_GUI_WINDOW_HANDLE handle,
                                                             int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_FOCUS_ID>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return false;
  }

  CHdl_kodi_gui_general_h::lock();
  CGUIMessage msg(GUI_MSG_SETFOCUS, pAddonWindow->m_windowId, control_id);
  pAddonWindow->OnMessage(msg);
  CHdl_kodi_gui_general_h::unlock();

  return true;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_FOCUS_ID_END>---*/
}

int CHdl_kodi_gui_window_h::kodi_gui_window_get_focus_id_v1(void* thisClassHdl,
                                                            KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_FOCUS_ID>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return -1;
  }

  CHdl_kodi_gui_general_h::lock();
  int control_id = pAddonWindow->GetFocusedControlID();
  CHdl_kodi_gui_general_h::unlock();

  if (control_id == -1)
    CLog::Log(LOGERROR, "CHdl_kodi_gui_window_h - {}: {} - No control in this window has focus",
              __func__, thisClass->m_process->GetAddonID());

  return control_id;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_FOCUS_ID_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_control_label_v1(void* thisClassHdl,
                                                                  KODI_GUI_WINDOW_HANDLE handle,
                                                                  int control_id,
                                                                  const char* label)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_LABEL>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  CGUIMessage msg(GUI_MSG_LABEL_SET, pAddonWindow->m_windowId, control_id);
  msg.SetLabel(label);
  pAddonWindow->OnMessage(msg);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_LABEL_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_control_visible_v1(void* thisClassHdl,
                                                                    KODI_GUI_WINDOW_HANDLE handle,
                                                                    int control_id,
                                                                    bool visible)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_VISIBLE>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  CGUIMessage msg(visible ? GUI_MSG_VISIBLE : GUI_MSG_HIDDEN, pAddonWindow->m_windowId, control_id);
  pAddonWindow->OnMessage(msg);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_VISIBLE_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_control_selected_v1(void* thisClassHdl,
                                                                     KODI_GUI_WINDOW_HANDLE handle,
                                                                     int control_id,
                                                                     bool selected)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_SELECTED>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  CGUIMessage msg(selected ? GUI_MSG_SET_SELECTED : GUI_MSG_SET_DESELECTED,
                  pAddonWindow->m_windowId, control_id);
  pAddonWindow->OnMessage(msg);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTROL_SELECTED_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_property_v1(void* thisClassHdl,
                                                             KODI_GUI_WINDOW_HANDLE handle,
                                                             const char* key,
                                                             const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetProperty(lowerKey, value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_property_int_v1(void* thisClassHdl,
                                                                 KODI_GUI_WINDOW_HANDLE handle,
                                                                 const char* key,
                                                                 int value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_INT>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetProperty(lowerKey, value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_INT_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_property_bool_v1(void* thisClassHdl,
                                                                  KODI_GUI_WINDOW_HANDLE handle,
                                                                  const char* key,
                                                                  bool value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_BOOL>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetProperty(lowerKey, value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_BOOL_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_property_double_v1(void* thisClassHdl,
                                                                    KODI_GUI_WINDOW_HANDLE handle,
                                                                    const char* key,
                                                                    double value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_DOUBLE>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetProperty(lowerKey, value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_PROPERTY_DOUBLE_END>---*/
}

char* CHdl_kodi_gui_window_h::kodi_gui_window_get_property_v1(void* thisClassHdl,
                                                              KODI_GUI_WINDOW_HANDLE handle,
                                                              const char* key)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return nullptr;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  std::string value = pAddonWindow->GetProperty(lowerKey).asString();
  CHdl_kodi_gui_general_h::unlock();

  return strdup(value.c_str());

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_END>---*/
}

int CHdl_kodi_gui_window_h::kodi_gui_window_get_property_int_v1(void* thisClassHdl,
                                                                KODI_GUI_WINDOW_HANDLE handle,
                                                                const char* key)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_INT>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return -1;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  int value = static_cast<int>(pAddonWindow->GetProperty(lowerKey).asInteger());
  CHdl_kodi_gui_general_h::unlock();

  return value;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_INT_END>---*/
}

bool CHdl_kodi_gui_window_h::kodi_gui_window_get_property_bool_v1(void* thisClassHdl,
                                                                  KODI_GUI_WINDOW_HANDLE handle,
                                                                  const char* key)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_BOOL>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return false;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  bool value = pAddonWindow->GetProperty(lowerKey).asBoolean();
  CHdl_kodi_gui_general_h::unlock();

  return value;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_BOOL_END>---*/
}

double CHdl_kodi_gui_window_h::kodi_gui_window_get_property_double_v1(void* thisClassHdl,
                                                                      KODI_GUI_WINDOW_HANDLE handle,
                                                                      const char* key)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return 0.0;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_DOUBLE>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return 0.0;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  double value = pAddonWindow->GetProperty(lowerKey).asDouble();
  CHdl_kodi_gui_general_h::unlock();

  return value;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_PROPERTY_DOUBLE_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_clear_properties_v1(void* thisClassHdl,
                                                                 KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_PROPERTIES>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->ClearProperties();
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_PROPERTIES_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_clear_property_v1(void* thisClassHdl,
                                                               KODI_GUI_WINDOW_HANDLE handle,
                                                               const char* key)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_PROPERTY>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  std::string lowerKey = key;
  StringUtils::ToLower(lowerKey);

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetProperty(lowerKey, "");
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_PROPERTY_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_clear_item_list_v1(void* thisClassHdl,
                                                                KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_ITEM_LIST>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->ClearList();
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_CLEAR_ITEM_LIST_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_add_list_item_v1(void* thisClassHdl,
                                                              KODI_GUI_WINDOW_HANDLE handle,
                                                              KODI_GUI_LISTITEM_HANDLE item,
                                                              int list_position)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_ADD_LIST_ITEM>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CFileItemPtr* pItem(static_cast<CFileItemPtr*>(item));
  if (pItem->get() == nullptr)
  {
    CLog::Log(LOGERROR, "CHdl_kodi_gui_window_h::{} - empty list item called on addon '{}'",
              __func__, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->AddItem(pItem, list_position);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_ADD_LIST_ITEM_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_remove_list_item_from_position_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int list_position)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_FROM_POSITION>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->RemoveItem(list_position);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_FROM_POSITION_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_remove_list_item_v1(void* thisClassHdl,
                                                                 KODI_GUI_WINDOW_HANDLE handle,
                                                                 KODI_GUI_LISTITEM_HANDLE item)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_REMOVE_LIST_ITEM>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CFileItemPtr* pItem(static_cast<CFileItemPtr*>(item));
  if (pItem->get() == nullptr)
  {
    CLog::Log(LOGERROR, "CHdl_kodi_gui_window_h::{} - empty list item called on addon '{}'",
              __func__, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->RemoveItem(pItem);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_END>---*/
}

KODI_GUI_LISTITEM_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_list_item_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int list_position)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_LIST_ITEM>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return nullptr;
  }

  CHdl_kodi_gui_general_h::lock();
  CFileItemPtr* pItem(pAddonWindow->GetListItem(list_position));
  if (pItem == nullptr || pItem->get() == nullptr)
  {
    CLog::Log(LOGERROR, "CHdl_kodi_gui_window_h - {}: {} - Index out of range", __func__,
              thisClass->m_process->GetAddonID());

    if (pItem)
    {
      delete pItem;
      pItem = nullptr;
    }
  }
  CHdl_kodi_gui_general_h::unlock();

  return pItem;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_LIST_ITEM_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_current_list_position_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int list_position)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CURRENT_LIST_POSITION>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetCurrentListPosition(list_position);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CURRENT_LIST_POSITION_END>---*/
}

int CHdl_kodi_gui_window_h::kodi_gui_window_get_current_list_position_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CURRENT_LIST_POSITION>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return -1;
  }

  CHdl_kodi_gui_general_h::lock();
  int listPos = pAddonWindow->GetCurrentListPosition();
  CHdl_kodi_gui_general_h::unlock();

  return listPos;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CURRENT_LIST_POSITION_END>---*/
}

int CHdl_kodi_gui_window_h::kodi_gui_window_get_list_size_v1(void* thisClassHdl,
                                                             KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_LIST_SIZE>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return -1;
  }

  CHdl_kodi_gui_general_h::lock();
  int listSize = pAddonWindow->GetListSize();
  CHdl_kodi_gui_general_h::unlock();

  return listSize;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_LIST_SIZE_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_container_property_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, const char* key, const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTAINER_PROPERTY>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetContainerProperty(key, value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTAINER_PROPERTY_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_set_container_content_v1(void* thisClassHdl,
                                                                      KODI_GUI_WINDOW_HANDLE handle,
                                                                      const char* value)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTAINER_CONTENT>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->SetContainerContent(value);
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_SET_CONTAINER_CONTENT_END>---*/
}

int CHdl_kodi_gui_window_h::kodi_gui_window_get_current_container_id_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CURRENT_CONTAINER_ID>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return -1;
  }

  CHdl_kodi_gui_general_h::lock();
  int id = pAddonWindow->GetCurrentContainerControlId();
  CHdl_kodi_gui_general_h::unlock();

  return id;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CURRENT_CONTAINER_ID_END>---*/
}

void CHdl_kodi_gui_window_h::kodi_gui_window_mark_dirty_region_v1(void* thisClassHdl,
                                                                  KODI_GUI_WINDOW_HANDLE handle)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_MARK_DIRTY_REGION>---*/

  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return;
  }

  CHdl_kodi_gui_general_h::lock();
  pAddonWindow->MarkDirtyRegion();
  CHdl_kodi_gui_general_h::unlock();

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_MARK_DIRTY_REGION_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_button_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_BUTTON>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_BUTTON,
                    "button");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_BUTTON_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_edit_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_EDIT>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_EDIT, "edit");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_EDIT_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_fade_label_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_FADE_LABEL>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_FADELABEL,
                    "fade label");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_FADE_LABEL_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_image_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_IMAGE>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_IMAGE,
                    "image");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_IMAGE_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_label_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_LABEL>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_LABEL,
                    "label");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_LABEL_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_progress_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_PROGRESS>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_PROGRESS,
                    "progress");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_PROGRESS_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_radio_button_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_RADIO_BUTTON>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_RADIO,
                    "radio button");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_RADIO_BUTTON_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_render_addon_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_RENDER_ADDON>---*/
  // Code below must be set manually by hand to make work to Kodi

  return nullptr;
#warning Function "CHdl_kodi_gui_window_h::kodi_gui_window_get_control_render_addon" must be set by hand. Alternatively add /*---AUTO_GEN_PARSE<CB:kodi_gui_window_get_control_render_addon>---*/ on back of target function in header to find on scan.

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_RENDER_ADDON_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_settings_slider_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SETTINGS_SLIDER>---*/
  // Code below must be set manually by hand to make work to Kodi

  return GetControl(thisClass, handle, control_id, __func__,
                    CGUIControl::GUICONTROL_SETTINGS_SLIDER, "settings slider");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SETTINGS_SLIDER_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_slider_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SLIDER>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_SLIDER,
                    "slider");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SLIDER_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_spin_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SPIN>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_SPINEX,
                    "spin");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_SPIN_END>---*/
}

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::kodi_gui_window_get_control_text_box_v1(
    void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_gui_window_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_TEXT_BOX>---*/

  return GetControl(thisClass, handle, control_id, __func__, CGUIControl::GUICONTROL_TEXTBOX,
                    "textbox");

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_WINDOW_GET_CONTROL_TEXT_BOX_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/

KODI_GUI_CONTROL_HANDLE CHdl_kodi_gui_window_h::GetControl(CHdl_kodi_gui_window_h* thisClass,
                                                           KODI_GUI_WINDOW_HANDLE handle,
                                                           int control_id,
                                                           const char* function,
                                                           CGUIControl::GUICONTROLTYPES type,
                                                           const std::string& typeName)
{
  CGUIAddonWindow* pAddonWindow = static_cast<CGUIAddonWindow*>(handle);
  if (!pAddonWindow)
  {
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - invalid handler data (handle='{}') on "
              "addon '{}'",
              __func__, handle, thisClass->m_process->GetAddonID());
    return nullptr;
  }

  return pAddonWindow->GetAddonControl(control_id, type, typeName);
}

int CHdl_kodi_gui_window_h::GetNextAvailableWindowId()
{
  CHdl_kodi_gui_general_h::lock();

  // if window WINDOW_ADDON_END is in use it means addon can't create more windows
  if (CServiceBroker::GetGUI()->GetWindowManager().GetWindow(WINDOW_ADDON_END))
  {
    CHdl_kodi_gui_general_h::unlock();
    CLog::Log(LOGERROR,
              "CHdl_kodi_gui_window_h::{} - Maximum number of windows for binary addons reached",
              __func__);
    return -1;
  }

  // window id's WINDOW_ADDON_START - WINDOW_ADDON_END are reserved for addons
  // get first window id that is not in use
  int id = WINDOW_ADDON_START;
  while (id < WINDOW_ADDON_END &&
         CServiceBroker::GetGUI()->GetWindowManager().GetWindow(id) != nullptr)
    id++;

  CHdl_kodi_gui_general_h::unlock();
  return id;
}

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
