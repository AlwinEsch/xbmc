/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "addons/interface/IMsgHdl.h"

// API include
#include "addons/kodi-dev-kit/include/kodi/c-api/gui/window.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/

#include "windows/GUIMediaWindow.h"

namespace ADDON
{
class IAddon;
}

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct directFuncToAddon_gui_window_h;
struct directFuncToKodi_gui_window_h;

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/

class CGUIAddonWindow : public CGUIMediaWindow
{
  friend class CHdl_kodi_gui_window_h;

public:
  CGUIAddonWindow(int id,
                  const std::string& strXML,
                  std::shared_ptr<ADDON::IAddon> addon,
                  bool isMedia);
  ~CGUIAddonWindow() override = default;

  bool OnMessage(CGUIMessage& message) override;
  bool OnAction(const CAction& action) override;
  void AllocResources(bool forceLoad = false) override;
  void Render() override;
  bool IsMediaWindow() const override { return m_isMedia; }

  /* Addon to Kodi call functions */
  void PulseActionEvent();
  void AddItem(CFileItemPtr* fileItem, int itemPosition);
  void RemoveItem(int itemPosition);
  void RemoveItem(CFileItemPtr* fileItem);
  void ClearList();
  CFileItemPtr* GetListItem(int position);
  int GetListSize();
  int GetCurrentListPosition();
  void SetCurrentListPosition(int item);
  void SetContainerProperty(const std::string& key, const std::string& value);
  void SetContainerContent(const std::string& value);
  int GetCurrentContainerControlId();
  CGUIControl* GetAddonControl(int controlId,
                               CGUIControl::GUICONTROLTYPES type,
                               const std::string& typeName);

  const int m_windowId;
  int m_oldWindowId;

protected:
  void GetContextButtons(int itemNumber, CContextButtons& buttons) override;
  bool OnContextButton(int itemNumber, CONTEXT_BUTTON button) override;
  void SetupShares() override;

  /* kodi to addon callback function addresses */
  KODI_GUI_CLIENT_HANDLE m_clientHandle{nullptr};
  bool (*CBOnInit)(KODI_GUI_CLIENT_HANDLE cbhdl){nullptr};
  bool (*CBOnFocus)(KODI_GUI_CLIENT_HANDLE cbhdl, int controlId){nullptr};
  bool (*CBOnClick)(KODI_GUI_CLIENT_HANDLE cbhdl, int controlId){nullptr};
  bool (*CBOnAction)(KODI_GUI_CLIENT_HANDLE cbhdl, ADDON_ACTION actionId){nullptr};
  void (*CBGetContextButtons)(KODI_GUI_CLIENT_HANDLE cbhdl,
                              int itemNumber,
                              gui_context_menu_pair* buttons,
                              unsigned int* size){nullptr};
  bool (*CBOnContextButton)(KODI_GUI_CLIENT_HANDLE cbhdl, int itemNumber, unsigned int button){
      nullptr};

private:
  void WaitForActionEvent(unsigned int timeout);

  CEvent m_actionEvent{true};
  std::shared_ptr<ADDON::IAddon> m_addon;
  std::string m_mediaDir;
  bool m_isMedia;
};

class CGUIAddonWindowDialog : public CGUIAddonWindow
{
public:
  CGUIAddonWindowDialog(int id, const std::string& strXML, std::shared_ptr<ADDON::IAddon> addon);

  bool IsDialogRunning() const override { return m_bRunning; }
  bool IsDialog() const override { return true; };
  bool IsModalDialog() const override { return true; };

  void Show(bool show = true, bool modal = true);
  void Show_Internal(bool show = true);

private:
  bool m_bRunning;
};

/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

class CHdl_kodi_gui_window_h : public IMsgHdl
{
public:
  CHdl_kodi_gui_window_h(CInterface& interface) : IMsgHdl(interface) {}

  void InitDirect(directFuncToKodi_gui_window_h* ifcToKodi,
                  directFuncToAddon_gui_window_h* ifcToAddon);

  // To handle callbacks from addon by shared sandbox API (static functions below in private becomes used)
  bool HandleMessage(int funcGroup,
                     int func,
                     const msgpack::unpacked& in,
                     msgpack::sbuffer& out) override;

  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

  // Function calls from Kodi to addon

private:
  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
  static KODI_GUI_CONTROL_HANDLE GetControl(CHdl_kodi_gui_window_h* thisClass,
                                            KODI_GUI_WINDOW_HANDLE handle,
                                            int control_id,
                                            const char* function,
                                            CGUIControl::GUICONTROLTYPES type,
                                            const std::string& typeName);
  static int GetNextAvailableWindowId();
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/

  // Callbacks from addon to Kodi
  static KODI_GUI_WINDOW_HANDLE kodi_gui_window_create_v1(void* thisClassHdl,
                                                          KODI_HANDLE kodiBase,
                                                          const char* xml_filename,
                                                          const char* default_skin,
                                                          bool as_dialog,
                                                          bool is_media); // Added with API 1

  static void kodi_gui_window_destroy_v1(void* thisClassHdl,
                                         KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static bool kodi_gui_window_show_v1(void* thisClassHdl,
                                      KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static bool kodi_gui_window_close_v1(void* thisClassHdl,
                                       KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static bool kodi_gui_window_do_modal_v1(void* thisClassHdl,
                                          KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static bool kodi_gui_window_set_focus_id_v1(void* thisClassHdl,
                                              KODI_GUI_WINDOW_HANDLE handle,
                                              int control_id); // Added with API 1

  static int kodi_gui_window_get_focus_id_v1(void* thisClassHdl,
                                             KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static void kodi_gui_window_set_control_label_v1(void* thisClassHdl,
                                                   KODI_GUI_WINDOW_HANDLE handle,
                                                   int control_id,
                                                   const char* label); // Added with API 1

  static void kodi_gui_window_set_control_visible_v1(void* thisClassHdl,
                                                     KODI_GUI_WINDOW_HANDLE handle,
                                                     int control_id,
                                                     bool visible); // Added with API 1

  static void kodi_gui_window_set_control_selected_v1(void* thisClassHdl,
                                                      KODI_GUI_WINDOW_HANDLE handle,
                                                      int control_id,
                                                      bool selected); // Added with API 1

  static void kodi_gui_window_set_property_v1(void* thisClassHdl,
                                              KODI_GUI_WINDOW_HANDLE handle,
                                              const char* key,
                                              const char* value); // Added with API 1

  static void kodi_gui_window_set_property_int_v1(void* thisClassHdl,
                                                  KODI_GUI_WINDOW_HANDLE handle,
                                                  const char* key,
                                                  int value); // Added with API 1

  static void kodi_gui_window_set_property_bool_v1(void* thisClassHdl,
                                                   KODI_GUI_WINDOW_HANDLE handle,
                                                   const char* key,
                                                   bool value); // Added with API 1

  static void kodi_gui_window_set_property_double_v1(void* thisClassHdl,
                                                     KODI_GUI_WINDOW_HANDLE handle,
                                                     const char* key,
                                                     double value); // Added with API 1

  static char* kodi_gui_window_get_property_v1(void* thisClassHdl,
                                               KODI_GUI_WINDOW_HANDLE handle,
                                               const char* key); // Added with API 1

  static int kodi_gui_window_get_property_int_v1(void* thisClassHdl,
                                                 KODI_GUI_WINDOW_HANDLE handle,
                                                 const char* key); // Added with API 1

  static bool kodi_gui_window_get_property_bool_v1(void* thisClassHdl,
                                                   KODI_GUI_WINDOW_HANDLE handle,
                                                   const char* key); // Added with API 1

  static double kodi_gui_window_get_property_double_v1(void* thisClassHdl,
                                                       KODI_GUI_WINDOW_HANDLE handle,
                                                       const char* key); // Added with API 1

  static void kodi_gui_window_clear_properties_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static void kodi_gui_window_clear_property_v1(void* thisClassHdl,
                                                KODI_GUI_WINDOW_HANDLE handle,
                                                const char* key); // Added with API 1

  static void kodi_gui_window_clear_item_list_v1(void* thisClassHdl,
                                                 KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static void kodi_gui_window_add_list_item_v1(void* thisClassHdl,
                                               KODI_GUI_WINDOW_HANDLE handle,
                                               KODI_GUI_LISTITEM_HANDLE item,
                                               int list_position); // Added with API 1

  static void kodi_gui_window_remove_list_item_from_position_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int list_position); // Added with API 1

  static void kodi_gui_window_remove_list_item_v1(
      void* thisClassHdl,
      KODI_GUI_WINDOW_HANDLE handle,
      KODI_GUI_LISTITEM_HANDLE item); // Added with API 1

  static KODI_GUI_LISTITEM_HANDLE kodi_gui_window_get_list_item_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int list_position); // Added with API 1

  static void kodi_gui_window_set_current_list_position_v1(void* thisClassHdl,
                                                           KODI_GUI_WINDOW_HANDLE handle,
                                                           int list_position); // Added with API 1

  static int kodi_gui_window_get_current_list_position_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static int kodi_gui_window_get_list_size_v1(void* thisClassHdl,
                                              KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static void kodi_gui_window_set_container_property_v1(void* thisClassHdl,
                                                        KODI_GUI_WINDOW_HANDLE handle,
                                                        const char* key,
                                                        const char* value); // Added with API 1

  static void kodi_gui_window_set_container_content_v1(void* thisClassHdl,
                                                       KODI_GUI_WINDOW_HANDLE handle,
                                                       const char* value); // Added with API 1

  static int kodi_gui_window_get_current_container_id_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static void kodi_gui_window_mark_dirty_region_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_button_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_edit_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_fade_label_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_image_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_label_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_progress_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_radio_button_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_render_addon_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_settings_slider_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_slider_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_spin_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1

  static KODI_GUI_CONTROL_HANDLE kodi_gui_window_get_control_text_box_v1(
      void* thisClassHdl, KODI_GUI_WINDOW_HANDLE handle, int control_id); // Added with API 1


  directFuncToAddon_gui_window_h* m_ifcToAddon{nullptr};
};

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
