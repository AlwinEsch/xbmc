/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

/* API_HASH<ab72906a511627470968aed6b84c36403df5f435818fdd3ae0e180954ea97b8f> */

#ifndef C_API_DL_API_1_H
#define C_API_DL_API_1_H

#include "../addon-instance/audioencoder.h"
#include "../addon-instance/game.h"
#include "../addon-instance/imagedecoder.h"
#include "../addon-instance/inputstream.h"
#include "../addon-instance/peripheral.h"
#include "../addon-instance/pvr.h"
#include "../addon-instance/screensaver.h"
#include "../addon-instance/vfs.h"
#include "../addon-instance/videocodec.h"
#include "../addon-instance/visualization.h"
#include "../addon_base.h"
#include "../audio_engine.h"
#include "../filesystem.h"
#include "../general.h"
#include "../gui/controls/button.h"
#include "../gui/controls/edit.h"
#include "../gui/controls/fade_label.h"
#include "../gui/controls/image.h"
#include "../gui/controls/label.h"
#include "../gui/controls/progress.h"
#include "../gui/controls/radio_button.h"
#include "../gui/controls/rendering.h"
#include "../gui/controls/settings_slider.h"
#include "../gui/controls/slider.h"
#include "../gui/controls/spin.h"
#include "../gui/controls/text_box.h"
#include "../gui/dialogs/extended_progress.h"
#include "../gui/dialogs/progress.h"
#include "../gui/general.h"
#include "../gui/list_item.h"
#include "../gui/window.h"

#ifndef ATTR_DL_APIENTRYP
#define ATTR_DL_APIENTRYP ATTR_APIENTRYP
#endif

#ifndef ATTR_DL_DLL_EXPORT
#define ATTR_DL_DLL_EXPORT ATTR_DLL_EXPORT
#endif

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

  struct kodi_api_1;

  ATTR_DL_DLL_EXPORT bool load_kodi_api_1(struct kodi_api_1* api);

  struct KODI_ADDON_FUNC;
  struct AUDIO_ENGINE_FMT;
  struct VFS_DIR_ENTRY;
  struct VFS_STAT_STRUCTURE;
  struct VFS_CACHE_STATUS;
  struct AddonKeyboardKeyTable;
  struct game_stream_properties;
  struct game_stream_buffer;
  struct game_stream_packet;
  struct game_input_event;
  struct DEMUX_PACKET;
  struct PVR_MENUHOOK;
  struct EPG_TAG;
  struct PVR_CHANNEL;
  struct PVR_CHANNEL_GROUP;
  struct PVR_CHANNEL_GROUP_MEMBER;
  struct PVR_RECORDING;
  struct PVR_TIMER;
  struct SCREENSAVER_PROPS;
  struct VIDEOCODEC_PICTURE;
  struct VIS_PROPS;
  struct tm;

  // addon_base.h
  typedef KODI_IFC_HDL(ATTR_DL_APIENTRYP PFN_KODI_INIT_V1)(
      unsigned int, int, char*[], struct KODI_ADDON_FUNC*, bool, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_SETTING_BOOL_V1)(const char*, bool*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_SETTING_FLOAT_V1)(const char*, float*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_SETTING_INT_V1)(const char*, int*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_SETTING_STRING_V1)(const char*, char**);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_IS_SETTING_USING_DEFAULT_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_OPEN_SETTINGS_DIALOG_V1)();
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_SET_SETTING_BOOL_V1)(const char*, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_SET_SETTING_FLOAT_V1)(const char*, float);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_SET_SETTING_INT_V1)(const char*, int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_SET_SETTING_STRING_V1)(const char*, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_PROCESS_V1)(KODI_IFC_HDL);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_INFO_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_LIB_PATH_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_SHARE_PATH_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_TEMP_PATH_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GET_USER_PATH_V1)();
  typedef const char*(ATTR_DL_APIENTRYP PFN_KODI_CHECK_MAIN_SHARED_V1)(int, char*[]);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_DEINIT_V1)(KODI_IFC_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_LOG_V1)(enum ADDON_LOG, const char*, ...);

  // audio_engine.h
  typedef KODI_AE_HDL(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_MAKE_V1)(
      const struct AUDIO_ENGINE_FMT*, unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_GET_CURRENT_SINK_FORMAT_V1)(
      struct AUDIO_ENGINE_FMT*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_IS_PLANAR_FORMAT_V1)(
      enum AudioEngineDataFormat);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_IS_BUFFERING_V1)(KODI_AE_HDL);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_IS_DRAINED_V1)(KODI_AE_HDL);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_IS_DRAINING_V1)(KODI_AE_HDL);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_CACHE_TIME_V1)(KODI_AE_HDL);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_CACHE_TOTAL_V1)(KODI_AE_HDL);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_DELAY_V1)(KODI_AE_HDL);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_RESAMPLE_RATIO_V1)(KODI_AE_HDL);
  typedef enum AudioEngineDataFormat(
      ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_DATA_FORMAT_V1)(KODI_AE_HDL);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_AMPLIFICATION_V1)(KODI_AE_HDL);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_VOLUME_V1)(KODI_AE_HDL);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_ADD_DATA_V1)(KODI_AE_HDL,
                                                                                  uint8_t* const*,
                                                                                  size_t,
                                                                                  size_t,
                                                                                  unsigned int,
                                                                                  unsigned int,
                                                                                  unsigned int,
                                                                                  double,
                                                                                  bool,
                                                                                  double);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_CHANNEL_COUNT_V1)(
      KODI_AE_HDL);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_FRAME_SIZE_V1)(
      KODI_AE_HDL);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_SAMPLE_RATE_V1)(
      KODI_AE_HDL);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_GET_SPACE_V1)(KODI_AE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_DRAIN_V1)(KODI_AE_HDL, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_FLUSH_V1)(KODI_AE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_FREE_V1)(KODI_AE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_PAUSE_V1)(KODI_AE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_RESUME_V1)(KODI_AE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_SET_AMPLIFICATION_V1)(KODI_AE_HDL,
                                                                                   float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_SET_RESAMPLE_RATIO_V1)(KODI_AE_HDL,
                                                                                    double);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_AUDIOENGINE_STREAM_SET_VOLUME_V1)(KODI_AE_HDL, float);

  // filesystem.h
  typedef KODI_FILE_HDL(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_CURL_CREATE_V1)(const char*);
  typedef KODI_FILE_HDL(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_OPEN_FOR_WRITE_V1)(const char*, bool);
  typedef KODI_FILE_HDL(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_OPEN_V1)(const char*, unsigned int);
  typedef KODI_HTTP_HEADER_HDL(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_OPEN_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_CAN_OPEN_DIRECTORY_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_COPY_FILE_V1)(const char*, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_CREATE_DIRECTORY_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_DELETE_FILE_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_DIRECTORY_EXISTS_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_AT_END_V1)(KODI_FILE_HDL);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_CURL_ADD_OPTION_V1)(KODI_FILE_HDL,
                                                                       enum CURLOptiontype,
                                                                       const char*,
                                                                       const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_CURL_OPEN_V1)(KODI_FILE_HDL, unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_EXISTS_V1)(const char*, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_IO_CTL_GET_CACHE_STATUS_V1)(
      KODI_FILE_HDL, struct VFS_CACHE_STATUS*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_IO_CTL_GET_SEEK_POSSIBLE_V1)(KODI_FILE_HDL);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_IO_CTL_SET_CACHE_RATE_V1)(KODI_FILE_HDL,
                                                                             unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_IO_CTL_SET_RETRY_V1)(KODI_FILE_HDL, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_READ_LINE_V1)(KODI_FILE_HDL, char*, size_t);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_CONTENT_TYPE_V1)(const char*,
                                                                   char**,
                                                                   const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_COOKIES_V1)(const char*, char**);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_DIRECTORY_V1)(const char*,
                                                                const char*,
                                                                struct VFS_DIR_ENTRY**,
                                                                size_t*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_DISK_SPACE_V1)(const char*,
                                                                 uint64_t*,
                                                                 uint64_t*,
                                                                 uint64_t*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_MIME_TYPE_V1)(const char*, char**, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_IS_INTERNET_STREAM_V1)(const char*, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_IS_LOCAL_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_IS_ON_LAN_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_IS_REMOTE_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_IS_URL_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_REMOVE_DIRECTORY_RECURSIVE_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_REMOVE_DIRECTORY_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_RENAME_FILE_V1)(const char*, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_VFS_STAT_FILE_V1)(const char*,
                                                            struct VFS_STAT_STRUCTURE*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_PROPERTY_VALUE_V1)(KODI_FILE_HDL,
                                                                           enum FilePropertyTypes,
                                                                           const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_CACHE_THUMB_NAME_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_GET_FILE_MD5_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_CHARSET_V1)(KODI_HTTP_HEADER_HDL);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_HEADER_V1)(KODI_HTTP_HEADER_HDL);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_MIME_TYPE_V1)(KODI_HTTP_HEADER_HDL);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_PROTO_LINE_V1)(KODI_HTTP_HEADER_HDL);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_VALUE_V1)(KODI_HTTP_HEADER_HDL,
                                                                         const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_MAKE_LEGAL_FILENAME_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_MAKE_LEGAL_PATH_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_VFS_TRANSLATE_SPECIAL_PROTOCOL_V1)(const char*);
  typedef char**(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_PROPERTY_VALUES_V1)(KODI_FILE_HDL,
                                                                             enum FilePropertyTypes,
                                                                             const char*,
                                                                             size_t*);
  typedef char**(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_GET_VALUES_V1)(KODI_HTTP_HEADER_HDL,
                                                                           const char*,
                                                                           size_t*);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_DOWNLOAD_SPEED_V1)(KODI_FILE_HDL);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_CHUNK_SIZE_V1)(KODI_FILE_HDL);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_TRUNCATE_V1)(KODI_FILE_HDL, int64_t);
  typedef int64_t(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_LENGTH_V1)(KODI_FILE_HDL);
  typedef int64_t(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_GET_POSITION_V1)(KODI_FILE_HDL);
  typedef int64_t(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_SEEK_V1)(KODI_FILE_HDL, int64_t, int);
  typedef ssize_t(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_READ_V1)(KODI_FILE_HDL, uint8_t*, size_t);
  typedef ssize_t(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_WRITE_V1)(KODI_FILE_HDL,
                                                                const uint8_t*,
                                                                size_t);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_CLOSE_V1)(KODI_FILE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_VFS_FILE_FLUSH_V1)(KODI_FILE_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_VFS_FREE_DIRECTORY_V1)(struct VFS_DIR_ENTRY*, size_t);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_VFS_HTTP_HEADER_CLOSE_V1)(KODI_HTTP_HEADER_HDL);

  // general.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_CHANGE_KEYBOARD_LAYOUT_V1)(char**);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GET_KEYBOARD_LAYOUT_V1)(int,
                                                                  char**,
                                                                  struct AddonKeyboardKeyTable*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_IS_ADDON_AVILABLE_V1)(const char*, char**, bool*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GET_CURRENT_SKIN_ID_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GET_DIGEST_V1)(enum DigestType, const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GET_LANGUAGE_V1)(enum LangFormats, bool);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GET_LOCALIZED_STRING_V1)(long);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GET_REGION_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_UNKNOWN_TO_UTF8_V1)(const char*, bool*, bool);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GET_GLOBAL_IDLE_TIME_V1)();
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GET_FREE_MEM_V1)(long*, long*, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_PLAY_SFX_V1)(const char*, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_QUEUE_NOTIFICATION_V1)(
      enum QueueMsg, const char*, const char*, const char*, unsigned int, bool, unsigned int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_STOP_SFX_V1)();
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_VERSION_V1)(char**, int*, int*, char**, char**, char**);

  // monitor.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_MONITOR_ABORT_REQUESTED_V1)();
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_MONITOR_WAIT_FOR_ABORT_V1)(double);

  // network.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_IS_HOST_ON_LAN_V1)(const char*, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_IS_LOCAL_HOST_V1)(const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_WAKE_ON_LAN_V1)(const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_DNS_LOOKUP_V1)(const char*, bool*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_GET_HOSTNAME_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_GET_IP_ADDRESS_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_GET_USER_AGENT_V1)();
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_NETWORK_URL_ENCODE_V1)(const char*);

  // addon-instance/audioencoder.h
  typedef ssize_t(ATTR_DL_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_SEEK_V1)(KODI_OWN_HDL, size_t, int);
  typedef ssize_t(ATTR_DL_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_WRITE_V1)(KODI_OWN_HDL,
                                                                          const uint8_t*,
                                                                          size_t);

  // addon-instance/game.h
  typedef KODI_GAME_STREAM_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_OPEN_STREAM_V1)(
      KODI_OWN_HDL, const struct game_stream_properties*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_GET_STREAM_BUFFER_V1)(
      KODI_OWN_HDL,
      KODI_GAME_STREAM_HANDLE,
      unsigned int,
      unsigned int,
      struct game_stream_buffer*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_INPUT_EVENT_V1)(
      KODI_OWN_HDL, const struct game_input_event*);
  typedef game_proc_address_t(ATTR_DL_APIENTRYP PFN_KODI_ADDON_HW_GET_PROC_ADDRESS_V1)(KODI_OWN_HDL,
                                                                                       const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_ADD_STREAM_DATA_V1)(
      KODI_OWN_HDL, KODI_GAME_STREAM_HANDLE, const struct game_stream_packet*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_CLOSE_STREAM_V1)(KODI_OWN_HDL,
                                                                      KODI_GAME_STREAM_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_CLOSE_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_GAME_RELEASE_STREAM_BUFFER_V1)(
      KODI_OWN_HDL, KODI_GAME_STREAM_HANDLE, struct game_stream_buffer*);

  // addon-instance/imagedecoder.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_MIMETYPE_V1)(KODI_OWN_HDL);

  // addon-instance/inputstream.h
  typedef struct DEMUX_PACKET*(
      ATTR_DL_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_ALLOCATE_DEMUX_PACKET_V1)(KODI_OWN_HDL, int);
  typedef struct DEMUX_PACKET*(
      ATTR_DL_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_ALLOCATE_ENCRYPTED_DEMUX_PACKET_V1)(
      KODI_OWN_HDL, unsigned int, unsigned int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_INPUTSTREAM_FREE_DEMUX_PACKET_V1)(
      KODI_OWN_HDL, struct DEMUX_PACKET*);

  // addon-instance/peripheral.h
  typedef enum JOYSTICK_FEATURE_TYPE(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PERIPHERAL_FEATURE_TYPE_V1)(
      KODI_OWN_HDL, const char*, const char*);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PERIPHERAL_FEATURE_COUNT_V1)(
      KODI_OWN_HDL, const char*, enum JOYSTICK_FEATURE_TYPE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PERIPHERAL_REFRESH_BUTTON_MAPS_V1)(KODI_OWN_HDL,
                                                                                   const char*,
                                                                                   const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PERIPHERAL_TRIGGER_SCAN_V1)(KODI_OWN_HDL);

  // addon-instance/pvr.h
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_MAX_FUTURE_DAYS_V1)(KODI_OWN_HDL);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_MAX_PAST_DAYS_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_ADD_MENU_HOOK_V1)(KODI_OWN_HDL,
                                                                      const struct PVR_MENUHOOK*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_CONNECTION_STATE_CHANGE_V1)(
      KODI_OWN_HDL, const char*, enum PVR_CONNECTION_STATE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_EPG_EVENT_STATE_CHANGE_V1)(
      KODI_OWN_HDL, struct EPG_TAG*, enum EPG_EVENT_STATE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_RECORDING_NOTIFICATION_V1)(KODI_OWN_HDL,
                                                                               const char*,
                                                                               const char*,
                                                                               bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_ENTRY_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_MEMBER_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL_GROUP_MEMBER*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL_GROUP*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_EPG_ENTRY_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct EPG_TAG*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_RECORDING_ENTRY_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_RECORDING*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRANSFER_TIMER_ENTRY_V1)(
      KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_TIMER*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRIGGER_CHANNEL_GROUPS_UPDATE_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRIGGER_CHANNEL_UPDATE_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRIGGER_EPG_UPDATE_V1)(KODI_OWN_HDL,
                                                                           unsigned int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRIGGER_RECORDING_UPDATE_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_PVR_TRIGGER_TIMER_UPDATE_V1)(KODI_OWN_HDL);

  // addon-instance/screensaver.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_GET_PROPERTIES_V1)(
      KODI_OWN_HDL, struct SCREENSAVER_PROPS*);

  // addon-instance/vfs.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT_V1)(
      KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*, char**, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION_V1)(
      KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG_V1)(
      KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*, const char*, const char*, const char*);

  // addon-instance/videocodec.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VIDEOCODEC_GET_FRAME_BUFFER_V1)(
      KODI_OWN_HDL, struct VIDEOCODEC_PICTURE*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VIDEOCODEC_RELEASE_FRAME_BUFFER_V1)(
      KODI_OWN_HDL, struct VIDEOCODEC_PICTURE*);

  // addon-instance/visualization.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS_V1)(KODI_OWN_HDL);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_PROPERTIES_V1)(KODI_OWN_HDL,
                                                                                 struct VIS_PROPS*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET_V1)(KODI_OWN_HDL,
                                                                                  const char*);

  // gui/general.h
  typedef ADDON_HARDWARE_CONTEXT2(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_HW_CONTEXT_V1)();
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_VIDEO_RESOLUTION_V1)();
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_CURRENT_WINDOW_DIALOG_ID_V1)();
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_CURRENT_WINDOW_ID_V1)();
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_SCREEN_HEIGHT_V1)();
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_GET_SCREEN_WIDTH_V1)();
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LOCK_V1)();
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_UNLOCK_V1)();

  // gui/list_item.h
  typedef KODI_GUI_LISTITEM_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_CREATE_V1)(const char*,
                                                                                      const char*,
                                                                                      const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_IS_SELECTED_V1)(KODI_GUI_LISTITEM_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_GET_ART_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                    const char*);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_GET_LABEL2_V1)(KODI_GUI_LISTITEM_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_GET_LABEL_V1)(KODI_GUI_LISTITEM_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_GET_PATH_V1)(KODI_GUI_LISTITEM_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_GET_PROPERTY_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                         const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_DESTROY_V1)(KODI_GUI_LISTITEM_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SELECT_V1)(KODI_GUI_LISTITEM_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SET_ART_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                   const char*,
                                                                   const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SET_LABEL2_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                      const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SET_LABEL_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                     const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SET_PATH_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                    const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_LISTITEM_SET_PROPERTY_V1)(KODI_GUI_LISTITEM_HANDLE,
                                                                        const char*,
                                                                        const char*);

  // gui/window.h
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_BUTTON_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_EDIT_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_FADE_LABEL_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_IMAGE_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_LABEL_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_PROGRESS_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(
      ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_RADIO_BUTTON_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                         int);
  typedef KODI_GUI_CONTROL_HANDLE(
      ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_RENDER_ADDON_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                         int);
  typedef KODI_GUI_CONTROL_HANDLE(
      ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_SETTINGS_SLIDER_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                            int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_SLIDER_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_SPIN_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_CONTROL_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CONTROL_TEXT_BOX_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_LISTITEM_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_LIST_ITEM_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef KODI_GUI_WINDOW_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_CREATE_V1)(
      KODI_HANDLE, const char*, const char*, bool, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_CLOSE_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_DO_MODAL_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_PROPERTY_BOOL_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                           const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_FOCUS_ID_V1)(KODI_GUI_WINDOW_HANDLE, int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SHOW_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_PROPERTY_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                       const char*);
  typedef double(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_PROPERTY_DOUBLE_V1)(
      KODI_GUI_WINDOW_HANDLE, const char*);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CURRENT_CONTAINER_ID_V1)(
      KODI_GUI_WINDOW_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_CURRENT_LIST_POSITION_V1)(
      KODI_GUI_WINDOW_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_FOCUS_ID_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_LIST_SIZE_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_GET_PROPERTY_INT_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                         const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_ADD_LIST_ITEM_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                       KODI_GUI_LISTITEM_HANDLE,
                                                                       int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_CLEAR_ITEM_LIST_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_CLEAR_PROPERTIES_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_CLEAR_PROPERTY_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                        const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_DESTROY_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_MARK_DIRTY_REGION_V1)(KODI_GUI_WINDOW_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_FROM_POSITION_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                          KODI_GUI_LISTITEM_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CONTAINER_CONTENT_V1)(
      KODI_GUI_WINDOW_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CONTAINER_PROPERTY_V1)(
      KODI_GUI_WINDOW_HANDLE, const char*, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CONTROL_LABEL_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                           int,
                                                                           const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CONTROL_SELECTED_V1)(
      KODI_GUI_WINDOW_HANDLE, int, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CONTROL_VISIBLE_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                             int,
                                                                             bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_CURRENT_LIST_POSITION_V1)(
      KODI_GUI_WINDOW_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_PROPERTY_BOOL_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                           const char*,
                                                                           bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_PROPERTY_DOUBLE_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                             const char*,
                                                                             double);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_PROPERTY_INT_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                          const char*,
                                                                          int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_WINDOW_SET_PROPERTY_V1)(KODI_GUI_WINDOW_HANDLE,
                                                                      const char*,
                                                                      const char*);

  // gui/controls/button.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_GET_LABEL2_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_GET_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_SET_ENABLED_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_SET_LABEL2_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_SET_LABEL_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                            const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_BUTTON_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/edit.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_GET_LABEL_V1)(KODI_GUI_CONTROL_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_GET_TEXT_V1)(KODI_GUI_CONTROL_HANDLE);
  typedef unsigned int(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_GET_CURSOR_POSITION_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_CURSOR_POSITION_V1)(
      KODI_GUI_CONTROL_HANDLE, unsigned int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_ENABLED_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                            bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_INPUT_TYPE_V1)(
      KODI_GUI_CONTROL_HANDLE, int, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_LABEL_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                          const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_TEXT_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                         const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_EDIT_SET_VISIBLE_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                            bool);

  // gui/controls/fade_label.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_FADE_LABEL_GET_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_FADE_LABEL_ADD_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_FADE_LABEL_RESET_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_FADE_LABEL_SET_SCROLLING_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_FADE_LABEL_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/image.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_IMAGE_SET_COLOR_DIFFUSE_V1)(
      KODI_GUI_CONTROL_HANDLE, uint32_t);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_IMAGE_SET_FILENAME_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_IMAGE_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/label.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_LABEL_GET_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_LABEL_SET_LABEL_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                           const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_LABEL_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/progress.h
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_PROGRESS_GET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_PROGRESS_SET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_PROGRESS_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/radio_button.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_IS_SELECTED_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_GET_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_ENABLED_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_SELECTED_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/rendering.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_RADIO_RENDERING_DESTROY_V1)(
      KODI_GUI_CONTROL_HANDLE);

  // gui/controls/settings_slider.h
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_RESET_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_ENABLED_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_INTERVAL_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_INTERVAL_V1)(
      KODI_GUI_CONTROL_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, int, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_TEXT_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/slider.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_GET_DESCRIPTION_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_GET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_GET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_GET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_RESET_V1)(KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_ENABLED_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_INTERVAL_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_INTERVAL_V1)(
      KODI_GUI_CONTROL_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, int, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_PERCENTAGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SLIDER_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/controls/spin.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_GET_STRING_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_GET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_GET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_ADD_INT_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_ADD_STRING_LABEL_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_RESET_V1)(KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_ENABLED_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                            bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_INTERVAL_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, float, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_INT_RANGE_V1)(
      KODI_GUI_CONTROL_HANDLE, int, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_INT_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_STRING_VALUE_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_TEXT_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                         const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_TYPE_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                         int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_SPIN_SET_VISIBLE_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                            bool);

  // gui/controls/text_box.h
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_GET_TEXT_V1)(
      KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_RESET_V1)(KODI_GUI_CONTROL_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_SCROLL_V1)(KODI_GUI_CONTROL_HANDLE,
                                                                           unsigned int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_AUTO_SCROLLING_V1)(
      KODI_GUI_CONTROL_HANDLE, int, int, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_TEXT_V1)(
      KODI_GUI_CONTROL_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_VISIBLE_V1)(
      KODI_GUI_CONTROL_HANDLE, bool);

  // gui/dialogs/context_menu.h
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_CONTEXT_MENU_OPEN_V1)(const char*,
                                                                           const char*[],
                                                                           size_t);

  // gui/dialogs/extended_progress.h
  typedef KODI_GUI_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_NEW_DIALOG_V1)(
      const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_IS_FINISHED_V1)(
      KODI_GUI_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_TEXT_V1)(
      KODI_GUI_HANDLE);
  typedef char*(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_TITLE_V1)(
      KODI_GUI_HANDLE);
  typedef float(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_PERCENTAGE_V1)(
      KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_DELETE_DIALOG_V1)(
      KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_MARK_FINISHED_V1)(
      KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_PERCENTAGE_V1)(
      KODI_GUI_HANDLE, float);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_PROGRESS_V1)(
      KODI_GUI_HANDLE, int, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_TEXT_V1)(
      KODI_GUI_HANDLE, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_TITLE_V1)(
      KODI_GUI_HANDLE, const char*);

  // gui/dialogs/filebrowser.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_DIRECTORY_V1)(
      const char*, const char*, const char*, char**, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_FROM_DIR_V1)(
      const char*, const char*, const char*, const char*, char**, bool, bool, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_LIST_V1)(
      const char*, const char*, const char*, char***, size_t*, bool, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_V1)(
      const char*, const char*, const char*, const char*, char**, bool, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_IMAGE_LIST_V1)(
      const char*, const char*, char***, size_t*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_IMAGE_V1)(
      const char*, const char*, const char*, char**);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_SOURCE_V1)(
      const char*, char**, bool, const char*, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_FILE_BROWSER_CLEAR_FILE_LIST_V1)(char***,
                                                                                       size_t);

  // gui/dialogs/keyboard.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_IS_KEYBOARD_ACTIVATED_V1)();
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SEND_TEXT_TO_ACTIVE_KEYBOARD_V1)(
      const char*, bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_FILTER_V1)(
      const char*, char**, bool, unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_V1)(const char*,
                                                                                      char**,
                                                                                      bool,
                                                                                      unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_WITH_HEAD_V1)(
      const char*, char**, const char*, bool, bool, unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_V1)(
      const char*, char**, unsigned int);
  typedef bool(
      ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_WITH_HEAD_V1)(
      const char*, char**, const char*, bool, unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_V1)(
      char**, unsigned int);
  typedef bool(
      ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_WITH_HEAD_V1)(
      char**, const char*, bool, unsigned int);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_PASSWORD_V1)(
      const char*, char**, const char*, int, unsigned int);

  // gui/dialogs/numeric.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_DATE_V1)(struct tm*,
                                                                                    const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_IP_ADDRESS_V1)(
      const char*, char**, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_NUMBER_V1)(const char*,
                                                                                      char**,
                                                                                      const char*,
                                                                                      unsigned int);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_SECONDS_V1)(const char*,
                                                                                       char**,
                                                                                       const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_TIME_V1)(struct tm*,
                                                                                    const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_INPUT_V1)(const char*,
                                                                                        char**,
                                                                                        const char*,
                                                                                        bool);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_NEW_PASSWORD_V1)(
      char**);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_PASSWORD_V1)(
      const char*, const char*, int);

  // gui/dialogs/ok.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_OK_SHOW_AND_GET_INPUT_LINE_TEXT_V1)(
      const char*, const char*, const char*, const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_OK_SHOW_AND_GET_INPUT_SINGLE_TEXT_V1)(
      const char*, const char*);

  // gui/dialogs/progress.h
  typedef KODI_GUI_HANDLE(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_NEW_DIALOG_V1)();
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_ABORT_V1)(KODI_GUI_HANDLE);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_IS_CANCELED_V1)(KODI_GUI_HANDLE);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_GET_PERCENTAGE_V1)(KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_DELETE_DIALOG_V1)(KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_OPEN_V1)(KODI_GUI_HANDLE);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_CAN_CANCEL_V1)(KODI_GUI_HANDLE,
                                                                                  bool);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_HEADING_V1)(KODI_GUI_HANDLE,
                                                                               const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_LINE_V1)(KODI_GUI_HANDLE,
                                                                            unsigned int,
                                                                            const char*);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PERCENTAGE_V1)(KODI_GUI_HANDLE,
                                                                                  int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PROGRESS_ADVANCE_V1)(
      KODI_GUI_HANDLE, int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PROGRESS_MAX_V1)(KODI_GUI_HANDLE,
                                                                                    int);
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_PROGRESS_SHOW_PROGRESS_BAR_V1)(
      KODI_GUI_HANDLE, bool);

  // gui/dialogs/select.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_SELECT_OPEN_MULTI_SELECT_V1)(
      const char*, const char*[], const char*[], uint8_t[], size_t, unsigned int);
  typedef int(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_SELECT_OPEN_V1)(
      const char*, const char*[], size_t, int, unsigned int);

  // gui/dialogs/text_viewer.h
  typedef void(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_TEXT_VIEWER_SHOW_V1)(const char*,
                                                                           const char*);

  // gui/dialogs/yes_no.h
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_LINE_BUTTON_TEXT_V1)(
      const char*, const char*, const char*, const char*, bool*, const char*, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_LINE_TEXT_V1)(
      const char*, const char*, const char*, const char*, const char*, const char*);
  typedef bool(ATTR_DL_APIENTRYP PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_SINGLE_TEXT_V1)(
      const char*, const char*, bool*, const char*, const char*);

  struct kodi_api_1
  {
    // addon_base.h
    PFN_KODI_ADDON_GET_INFO_V1 kodi_addon_get_info;
    PFN_KODI_ADDON_GET_LIB_PATH_V1 kodi_addon_get_lib_path;
    PFN_KODI_ADDON_GET_SETTING_BOOL_V1 kodi_addon_get_setting_bool;
    PFN_KODI_ADDON_GET_SETTING_FLOAT_V1 kodi_addon_get_setting_float;
    PFN_KODI_ADDON_GET_SETTING_INT_V1 kodi_addon_get_setting_int;
    PFN_KODI_ADDON_GET_SETTING_STRING_V1 kodi_addon_get_setting_string;
    PFN_KODI_ADDON_GET_SHARE_PATH_V1 kodi_addon_get_share_path;
    PFN_KODI_ADDON_GET_TEMP_PATH_V1 kodi_addon_get_temp_path;
    PFN_KODI_ADDON_GET_USER_PATH_V1 kodi_addon_get_user_path;
    PFN_KODI_ADDON_IS_SETTING_USING_DEFAULT_V1 kodi_addon_is_setting_using_default;
    PFN_KODI_ADDON_OPEN_SETTINGS_DIALOG_V1 kodi_addon_open_settings_dialog;
    PFN_KODI_ADDON_SET_SETTING_BOOL_V1 kodi_addon_set_setting_bool;
    PFN_KODI_ADDON_SET_SETTING_FLOAT_V1 kodi_addon_set_setting_float;
    PFN_KODI_ADDON_SET_SETTING_INT_V1 kodi_addon_set_setting_int;
    PFN_KODI_ADDON_SET_SETTING_STRING_V1 kodi_addon_set_setting_string;
    PFN_KODI_CHECK_MAIN_SHARED_V1 kodi_check_main_shared;
    PFN_KODI_DEINIT_V1 kodi_deinit;
    PFN_KODI_INIT_V1 kodi_init;
    PFN_KODI_LOG_V1 kodi_log;
    PFN_KODI_PROCESS_V1 kodi_process;

    // audio_engine.h
    PFN_KODI_AUDIOENGINE_GET_CURRENT_SINK_FORMAT_V1 kodi_audioengine_get_current_sink_format;
    PFN_KODI_AUDIOENGINE_IS_PLANAR_FORMAT_V1 kodi_audioengine_is_planar_format;
    PFN_KODI_AUDIOENGINE_STREAM_ADD_DATA_V1 kodi_audioengine_stream_add_data;
    PFN_KODI_AUDIOENGINE_STREAM_DRAIN_V1 kodi_audioengine_stream_drain;
    PFN_KODI_AUDIOENGINE_STREAM_FLUSH_V1 kodi_audioengine_stream_flush;
    PFN_KODI_AUDIOENGINE_STREAM_FREE_V1 kodi_audioengine_stream_free;
    PFN_KODI_AUDIOENGINE_STREAM_GET_AMPLIFICATION_V1 kodi_audioengine_stream_get_amplification;
    PFN_KODI_AUDIOENGINE_STREAM_GET_CACHE_TIME_V1 kodi_audioengine_stream_get_cache_time;
    PFN_KODI_AUDIOENGINE_STREAM_GET_CACHE_TOTAL_V1 kodi_audioengine_stream_get_cache_total;
    PFN_KODI_AUDIOENGINE_STREAM_GET_CHANNEL_COUNT_V1 kodi_audioengine_stream_get_channel_count;
    PFN_KODI_AUDIOENGINE_STREAM_GET_DATA_FORMAT_V1 kodi_audioengine_stream_get_data_format;
    PFN_KODI_AUDIOENGINE_STREAM_GET_DELAY_V1 kodi_audioengine_stream_get_delay;
    PFN_KODI_AUDIOENGINE_STREAM_GET_FRAME_SIZE_V1 kodi_audioengine_stream_get_frame_size;
    PFN_KODI_AUDIOENGINE_STREAM_GET_RESAMPLE_RATIO_V1 kodi_audioengine_stream_get_resample_ratio;
    PFN_KODI_AUDIOENGINE_STREAM_GET_SAMPLE_RATE_V1 kodi_audioengine_stream_get_sample_rate;
    PFN_KODI_AUDIOENGINE_STREAM_GET_SPACE_V1 kodi_audioengine_stream_get_space;
    PFN_KODI_AUDIOENGINE_STREAM_GET_VOLUME_V1 kodi_audioengine_stream_get_volume;
    PFN_KODI_AUDIOENGINE_STREAM_IS_BUFFERING_V1 kodi_audioengine_stream_is_buffering;
    PFN_KODI_AUDIOENGINE_STREAM_IS_DRAINED_V1 kodi_audioengine_stream_is_drained;
    PFN_KODI_AUDIOENGINE_STREAM_IS_DRAINING_V1 kodi_audioengine_stream_is_draining;
    PFN_KODI_AUDIOENGINE_STREAM_MAKE_V1 kodi_audioengine_stream_make;
    PFN_KODI_AUDIOENGINE_STREAM_PAUSE_V1 kodi_audioengine_stream_pause;
    PFN_KODI_AUDIOENGINE_STREAM_RESUME_V1 kodi_audioengine_stream_resume;
    PFN_KODI_AUDIOENGINE_STREAM_SET_AMPLIFICATION_V1 kodi_audioengine_stream_set_amplification;
    PFN_KODI_AUDIOENGINE_STREAM_SET_RESAMPLE_RATIO_V1 kodi_audioengine_stream_set_resample_ratio;
    PFN_KODI_AUDIOENGINE_STREAM_SET_VOLUME_V1 kodi_audioengine_stream_set_volume;

    // filesystem.h
    PFN_KODI_VFS_CAN_OPEN_DIRECTORY_V1 kodi_vfs_can_open_directory;
    PFN_KODI_VFS_COPY_FILE_V1 kodi_vfs_copy_file;
    PFN_KODI_VFS_CREATE_DIRECTORY_V1 kodi_vfs_create_directory;
    PFN_KODI_VFS_DELETE_FILE_V1 kodi_vfs_delete_file;
    PFN_KODI_VFS_DIRECTORY_EXISTS_V1 kodi_vfs_directory_exists;
    PFN_KODI_VFS_FILE_AT_END_V1 kodi_vfs_file_at_end;
    PFN_KODI_VFS_FILE_CLOSE_V1 kodi_vfs_file_close;
    PFN_KODI_VFS_FILE_CURL_ADD_OPTION_V1 kodi_vfs_file_curl_add_option;
    PFN_KODI_VFS_FILE_CURL_CREATE_V1 kodi_vfs_file_curl_create;
    PFN_KODI_VFS_FILE_CURL_OPEN_V1 kodi_vfs_file_curl_open;
    PFN_KODI_VFS_FILE_EXISTS_V1 kodi_vfs_file_exists;
    PFN_KODI_VFS_FILE_FLUSH_V1 kodi_vfs_file_flush;
    PFN_KODI_VFS_FILE_GET_CHUNK_SIZE_V1 kodi_vfs_file_get_chunk_size;
    PFN_KODI_VFS_FILE_GET_DOWNLOAD_SPEED_V1 kodi_vfs_file_get_download_speed;
    PFN_KODI_VFS_FILE_GET_LENGTH_V1 kodi_vfs_file_get_length;
    PFN_KODI_VFS_FILE_GET_POSITION_V1 kodi_vfs_file_get_position;
    PFN_KODI_VFS_FILE_GET_PROPERTY_VALUES_V1 kodi_vfs_file_get_property_values;
    PFN_KODI_VFS_FILE_GET_PROPERTY_VALUE_V1 kodi_vfs_file_get_property_value;
    PFN_KODI_VFS_FILE_IO_CTL_GET_CACHE_STATUS_V1 kodi_vfs_file_io_ctl_get_cache_status;
    PFN_KODI_VFS_FILE_IO_CTL_GET_SEEK_POSSIBLE_V1 kodi_vfs_file_io_ctl_get_seek_possible;
    PFN_KODI_VFS_FILE_IO_CTL_SET_CACHE_RATE_V1 kodi_vfs_file_io_ctl_set_cache_rate;
    PFN_KODI_VFS_FILE_IO_CTL_SET_RETRY_V1 kodi_vfs_file_io_ctl_set_retry;
    PFN_KODI_VFS_FILE_OPEN_FOR_WRITE_V1 kodi_vfs_file_open_for_write;
    PFN_KODI_VFS_FILE_OPEN_V1 kodi_vfs_file_open;
    PFN_KODI_VFS_FILE_READ_LINE_V1 kodi_vfs_file_read_line;
    PFN_KODI_VFS_FILE_READ_V1 kodi_vfs_file_read;
    PFN_KODI_VFS_FILE_SEEK_V1 kodi_vfs_file_seek;
    PFN_KODI_VFS_FILE_TRUNCATE_V1 kodi_vfs_file_truncate;
    PFN_KODI_VFS_FILE_WRITE_V1 kodi_vfs_file_write;
    PFN_KODI_VFS_FREE_DIRECTORY_V1 kodi_vfs_free_directory;
    PFN_KODI_VFS_GET_CACHE_THUMB_NAME_V1 kodi_vfs_get_cache_thumb_name;
    PFN_KODI_VFS_GET_CONTENT_TYPE_V1 kodi_vfs_get_content_type;
    PFN_KODI_VFS_GET_COOKIES_V1 kodi_vfs_get_cookies;
    PFN_KODI_VFS_GET_DIRECTORY_V1 kodi_vfs_get_directory;
    PFN_KODI_VFS_GET_DISK_SPACE_V1 kodi_vfs_get_disk_space;
    PFN_KODI_VFS_GET_FILE_MD5_V1 kodi_vfs_get_file_md5;
    PFN_KODI_VFS_GET_MIME_TYPE_V1 kodi_vfs_get_mime_type;
    PFN_KODI_VFS_HTTP_HEADER_CLOSE_V1 kodi_vfs_http_header_close;
    PFN_KODI_VFS_HTTP_HEADER_GET_CHARSET_V1 kodi_vfs_http_header_get_charset;
    PFN_KODI_VFS_HTTP_HEADER_GET_HEADER_V1 kodi_vfs_http_header_get_header;
    PFN_KODI_VFS_HTTP_HEADER_GET_MIME_TYPE_V1 kodi_vfs_http_header_get_mime_type;
    PFN_KODI_VFS_HTTP_HEADER_GET_PROTO_LINE_V1 kodi_vfs_http_header_get_proto_line;
    PFN_KODI_VFS_HTTP_HEADER_GET_VALUES_V1 kodi_vfs_http_header_get_values;
    PFN_KODI_VFS_HTTP_HEADER_GET_VALUE_V1 kodi_vfs_http_header_get_value;
    PFN_KODI_VFS_HTTP_HEADER_OPEN_V1 kodi_vfs_http_header_open;
    PFN_KODI_VFS_IS_INTERNET_STREAM_V1 kodi_vfs_is_internet_stream;
    PFN_KODI_VFS_IS_LOCAL_V1 kodi_vfs_is_local;
    PFN_KODI_VFS_IS_ON_LAN_V1 kodi_vfs_is_on_lan;
    PFN_KODI_VFS_IS_REMOTE_V1 kodi_vfs_is_remote;
    PFN_KODI_VFS_IS_URL_V1 kodi_vfs_is_url;
    PFN_KODI_VFS_MAKE_LEGAL_FILENAME_V1 kodi_vfs_make_legal_filename;
    PFN_KODI_VFS_MAKE_LEGAL_PATH_V1 kodi_vfs_make_legal_path;
    PFN_KODI_VFS_REMOVE_DIRECTORY_RECURSIVE_V1 kodi_vfs_remove_directory_recursive;
    PFN_KODI_VFS_REMOVE_DIRECTORY_V1 kodi_vfs_remove_directory;
    PFN_KODI_VFS_RENAME_FILE_V1 kodi_vfs_rename_file;
    PFN_KODI_VFS_STAT_FILE_V1 kodi_vfs_stat_file;
    PFN_KODI_VFS_TRANSLATE_SPECIAL_PROTOCOL_V1 kodi_vfs_translate_special_protocol;

    // general.h
    PFN_KODI_CHANGE_KEYBOARD_LAYOUT_V1 kodi_change_keyboard_layout;
    PFN_KODI_GET_CURRENT_SKIN_ID_V1 kodi_get_current_skin_id;
    PFN_KODI_GET_DIGEST_V1 kodi_get_digest;
    PFN_KODI_GET_FREE_MEM_V1 kodi_get_free_mem;
    PFN_KODI_GET_GLOBAL_IDLE_TIME_V1 kodi_get_global_idle_time;
    PFN_KODI_GET_KEYBOARD_LAYOUT_V1 kodi_get_keyboard_layout;
    PFN_KODI_GET_LANGUAGE_V1 kodi_get_language;
    PFN_KODI_GET_LOCALIZED_STRING_V1 kodi_get_localized_string;
    PFN_KODI_GET_REGION_V1 kodi_get_region;
    PFN_KODI_IS_ADDON_AVILABLE_V1 kodi_is_addon_avilable;
    PFN_KODI_PLAY_SFX_V1 kodi_play_sfx;
    PFN_KODI_QUEUE_NOTIFICATION_V1 kodi_queue_notification;
    PFN_KODI_STOP_SFX_V1 kodi_stop_sfx;
    PFN_KODI_UNKNOWN_TO_UTF8_V1 kodi_unknown_to_utf8;
    PFN_KODI_VERSION_V1 kodi_version;

    // monitor.h
    PFN_KODI_MONITOR_ABORT_REQUESTED_V1 kodi_monitor_abort_requested;
    PFN_KODI_MONITOR_WAIT_FOR_ABORT_V1 kodi_monitor_wait_for_abort;

    // network.h
    PFN_KODI_NETWORK_DNS_LOOKUP_V1 kodi_network_dns_lookup;
    PFN_KODI_NETWORK_GET_HOSTNAME_V1 kodi_network_get_hostname;
    PFN_KODI_NETWORK_GET_IP_ADDRESS_V1 kodi_network_get_ip_address;
    PFN_KODI_NETWORK_GET_USER_AGENT_V1 kodi_network_get_user_agent;
    PFN_KODI_NETWORK_IS_HOST_ON_LAN_V1 kodi_network_is_host_on_lan;
    PFN_KODI_NETWORK_IS_LOCAL_HOST_V1 kodi_network_is_local_host;
    PFN_KODI_NETWORK_URL_ENCODE_V1 kodi_network_url_encode;
    PFN_KODI_NETWORK_WAKE_ON_LAN_V1 kodi_network_wake_on_lan;

    // addon-instance/audioencoder.h
    PFN_KODI_ADDON_AUDIOENCODER_SEEK_V1 kodi_addon_audioencoder_seek;
    PFN_KODI_ADDON_AUDIOENCODER_WRITE_V1 kodi_addon_audioencoder_write;

    // addon-instance/game.h
    PFN_KODI_ADDON_GAME_ADD_STREAM_DATA_V1 kodi_addon_game_add_stream_data;
    PFN_KODI_ADDON_GAME_CLOSE_STREAM_V1 kodi_addon_game_close_stream;
    PFN_KODI_ADDON_GAME_CLOSE_V1 kodi_addon_game_close;
    PFN_KODI_ADDON_GAME_GET_STREAM_BUFFER_V1 kodi_addon_game_get_stream_buffer;
    PFN_KODI_ADDON_GAME_INPUT_EVENT_V1 kodi_addon_game_input_event;
    PFN_KODI_ADDON_GAME_OPEN_STREAM_V1 kodi_addon_game_open_stream;
    PFN_KODI_ADDON_GAME_RELEASE_STREAM_BUFFER_V1 kodi_addon_game_release_stream_buffer;
    PFN_KODI_ADDON_HW_GET_PROC_ADDRESS_V1 kodi_addon_hw_get_proc_address;

    // addon-instance/imagedecoder.h
    PFN_KODI_ADDON_IMAGEDECODER_MIMETYPE_V1 kodi_addon_imagedecoder_mimetype;

    // addon-instance/inputstream.h
    PFN_KODI_ADDON_INPUTSTREAM_ALLOCATE_DEMUX_PACKET_V1
        kodi_addon_inputstream_allocate_demux_packet;
    PFN_KODI_ADDON_INPUTSTREAM_ALLOCATE_ENCRYPTED_DEMUX_PACKET_V1
        kodi_addon_inputstream_allocate_encrypted_demux_packet;
    PFN_KODI_ADDON_INPUTSTREAM_FREE_DEMUX_PACKET_V1 kodi_addon_inputstream_free_demux_packet;

    // addon-instance/peripheral.h
    PFN_KODI_ADDON_PERIPHERAL_FEATURE_COUNT_V1 kodi_addon_peripheral_feature_count;
    PFN_KODI_ADDON_PERIPHERAL_FEATURE_TYPE_V1 kodi_addon_peripheral_feature_type;
    PFN_KODI_ADDON_PERIPHERAL_REFRESH_BUTTON_MAPS_V1 kodi_addon_peripheral_refresh_button_maps;
    PFN_KODI_ADDON_PERIPHERAL_TRIGGER_SCAN_V1 kodi_addon_peripheral_trigger_scan;

    // addon-instance/pvr.h
    PFN_KODI_ADDON_PVR_ADD_MENU_HOOK_V1 kodi_addon_pvr_add_menu_hook;
    PFN_KODI_ADDON_PVR_CONNECTION_STATE_CHANGE_V1 kodi_addon_pvr_connection_state_change;
    PFN_KODI_ADDON_PVR_EPG_EVENT_STATE_CHANGE_V1 kodi_addon_pvr_epg_event_state_change;
    PFN_KODI_ADDON_PVR_GET_EPG_MAX_FUTURE_DAYS_V1 kodi_addon_pvr_get_epg_max_future_days;
    PFN_KODI_ADDON_PVR_GET_EPG_MAX_PAST_DAYS_V1 kodi_addon_pvr_get_epg_max_past_days;
    PFN_KODI_ADDON_PVR_RECORDING_NOTIFICATION_V1 kodi_addon_pvr_recording_notification;
    PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_ENTRY_V1 kodi_addon_pvr_transfer_channel_entry;
    PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_MEMBER_V1
        kodi_addon_pvr_transfer_channel_group_member;
    PFN_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_V1 kodi_addon_pvr_transfer_channel_group;
    PFN_KODI_ADDON_PVR_TRANSFER_EPG_ENTRY_V1 kodi_addon_pvr_transfer_epg_entry;
    PFN_KODI_ADDON_PVR_TRANSFER_RECORDING_ENTRY_V1 kodi_addon_pvr_transfer_recording_entry;
    PFN_KODI_ADDON_PVR_TRANSFER_TIMER_ENTRY_V1 kodi_addon_pvr_transfer_timer_entry;
    PFN_KODI_ADDON_PVR_TRIGGER_CHANNEL_GROUPS_UPDATE_V1
        kodi_addon_pvr_trigger_channel_groups_update;
    PFN_KODI_ADDON_PVR_TRIGGER_CHANNEL_UPDATE_V1 kodi_addon_pvr_trigger_channel_update;
    PFN_KODI_ADDON_PVR_TRIGGER_EPG_UPDATE_V1 kodi_addon_pvr_trigger_epg_update;
    PFN_KODI_ADDON_PVR_TRIGGER_RECORDING_UPDATE_V1 kodi_addon_pvr_trigger_recording_update;
    PFN_KODI_ADDON_PVR_TRIGGER_TIMER_UPDATE_V1 kodi_addon_pvr_trigger_timer_update;

    // addon-instance/screensaver.h
    PFN_KODI_ADDON_SCREENSAVER_GET_PROPERTIES_V1 kodi_addon_screensaver_get_properties;

    // addon-instance/vfs.h
    PFN_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT_V1
        kodi_addon_vfs_get_dir_cb__get_keyboard_input;
    PFN_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION_V1
        kodi_addon_vfs_get_dir_cb__require_authentication;
    PFN_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG_V1 kodi_addon_vfs_get_dir_cb__set_error_dialog;

    // addon-instance/videocodec.h
    PFN_KODI_ADDON_VIDEOCODEC_GET_FRAME_BUFFER_V1 kodi_addon_videocodec_get_frame_buffer;
    PFN_KODI_ADDON_VIDEOCODEC_RELEASE_FRAME_BUFFER_V1 kodi_addon_videocodec_release_frame_buffer;

    // addon-instance/visualization.h
    PFN_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS_V1 kodi_addon_visualization_clear_presets;
    PFN_KODI_ADDON_VISUALIZATION_GET_PROPERTIES_V1 kodi_addon_visualization_get_properties;
    PFN_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET_V1 kodi_addon_visualization_transfer_preset;

    // gui/general.h
    PFN_KODI_GUI_GET_CURRENT_WINDOW_DIALOG_ID_V1 kodi_gui_get_current_window_dialog_id;
    PFN_KODI_GUI_GET_CURRENT_WINDOW_ID_V1 kodi_gui_get_current_window_id;
    PFN_KODI_GUI_GET_HW_CONTEXT_V1 kodi_gui_get_hw_context;
    PFN_KODI_GUI_GET_SCREEN_HEIGHT_V1 kodi_gui_get_screen_height;
    PFN_KODI_GUI_GET_SCREEN_WIDTH_V1 kodi_gui_get_screen_width;
    PFN_KODI_GUI_GET_VIDEO_RESOLUTION_V1 kodi_gui_get_video_resolution;
    PFN_KODI_GUI_LOCK_V1 kodi_gui_lock;
    PFN_KODI_GUI_UNLOCK_V1 kodi_gui_unlock;

    // gui/list_item.h
    PFN_KODI_GUI_LISTITEM_CREATE_V1 kodi_gui_listitem_create;
    PFN_KODI_GUI_LISTITEM_DESTROY_V1 kodi_gui_listitem_destroy;
    PFN_KODI_GUI_LISTITEM_GET_ART_V1 kodi_gui_listitem_get_art;
    PFN_KODI_GUI_LISTITEM_GET_LABEL2_V1 kodi_gui_listitem_get_label2;
    PFN_KODI_GUI_LISTITEM_GET_LABEL_V1 kodi_gui_listitem_get_label;
    PFN_KODI_GUI_LISTITEM_GET_PATH_V1 kodi_gui_listitem_get_path;
    PFN_KODI_GUI_LISTITEM_GET_PROPERTY_V1 kodi_gui_listitem_get_property;
    PFN_KODI_GUI_LISTITEM_IS_SELECTED_V1 kodi_gui_listitem_is_selected;
    PFN_KODI_GUI_LISTITEM_SELECT_V1 kodi_gui_listitem_select;
    PFN_KODI_GUI_LISTITEM_SET_ART_V1 kodi_gui_listitem_set_art;
    PFN_KODI_GUI_LISTITEM_SET_LABEL2_V1 kodi_gui_listitem_set_label2;
    PFN_KODI_GUI_LISTITEM_SET_LABEL_V1 kodi_gui_listitem_set_label;
    PFN_KODI_GUI_LISTITEM_SET_PATH_V1 kodi_gui_listitem_set_path;
    PFN_KODI_GUI_LISTITEM_SET_PROPERTY_V1 kodi_gui_listitem_set_property;

    // gui/window.h
    PFN_KODI_GUI_WINDOW_ADD_LIST_ITEM_V1 kodi_gui_window_add_list_item;
    PFN_KODI_GUI_WINDOW_CLEAR_ITEM_LIST_V1 kodi_gui_window_clear_item_list;
    PFN_KODI_GUI_WINDOW_CLEAR_PROPERTIES_V1 kodi_gui_window_clear_properties;
    PFN_KODI_GUI_WINDOW_CLEAR_PROPERTY_V1 kodi_gui_window_clear_property;
    PFN_KODI_GUI_WINDOW_CLOSE_V1 kodi_gui_window_close;
    PFN_KODI_GUI_WINDOW_CREATE_V1 kodi_gui_window_create;
    PFN_KODI_GUI_WINDOW_DESTROY_V1 kodi_gui_window_destroy;
    PFN_KODI_GUI_WINDOW_DO_MODAL_V1 kodi_gui_window_do_modal;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_BUTTON_V1 kodi_gui_window_get_control_button;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_EDIT_V1 kodi_gui_window_get_control_edit;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_FADE_LABEL_V1 kodi_gui_window_get_control_fade_label;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_IMAGE_V1 kodi_gui_window_get_control_image;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_LABEL_V1 kodi_gui_window_get_control_label;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_PROGRESS_V1 kodi_gui_window_get_control_progress;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_RADIO_BUTTON_V1 kodi_gui_window_get_control_radio_button;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_RENDER_ADDON_V1 kodi_gui_window_get_control_render_addon;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_SETTINGS_SLIDER_V1 kodi_gui_window_get_control_settings_slider;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_SLIDER_V1 kodi_gui_window_get_control_slider;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_SPIN_V1 kodi_gui_window_get_control_spin;
    PFN_KODI_GUI_WINDOW_GET_CONTROL_TEXT_BOX_V1 kodi_gui_window_get_control_text_box;
    PFN_KODI_GUI_WINDOW_GET_CURRENT_CONTAINER_ID_V1 kodi_gui_window_get_current_container_id;
    PFN_KODI_GUI_WINDOW_GET_CURRENT_LIST_POSITION_V1 kodi_gui_window_get_current_list_position;
    PFN_KODI_GUI_WINDOW_GET_FOCUS_ID_V1 kodi_gui_window_get_focus_id;
    PFN_KODI_GUI_WINDOW_GET_LIST_ITEM_V1 kodi_gui_window_get_list_item;
    PFN_KODI_GUI_WINDOW_GET_LIST_SIZE_V1 kodi_gui_window_get_list_size;
    PFN_KODI_GUI_WINDOW_GET_PROPERTY_BOOL_V1 kodi_gui_window_get_property_bool;
    PFN_KODI_GUI_WINDOW_GET_PROPERTY_DOUBLE_V1 kodi_gui_window_get_property_double;
    PFN_KODI_GUI_WINDOW_GET_PROPERTY_INT_V1 kodi_gui_window_get_property_int;
    PFN_KODI_GUI_WINDOW_GET_PROPERTY_V1 kodi_gui_window_get_property;
    PFN_KODI_GUI_WINDOW_MARK_DIRTY_REGION_V1 kodi_gui_window_mark_dirty_region;
    PFN_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_FROM_POSITION_V1
        kodi_gui_window_remove_list_item_from_position;
    PFN_KODI_GUI_WINDOW_REMOVE_LIST_ITEM_V1 kodi_gui_window_remove_list_item;
    PFN_KODI_GUI_WINDOW_SET_CONTAINER_CONTENT_V1 kodi_gui_window_set_container_content;
    PFN_KODI_GUI_WINDOW_SET_CONTAINER_PROPERTY_V1 kodi_gui_window_set_container_property;
    PFN_KODI_GUI_WINDOW_SET_CONTROL_LABEL_V1 kodi_gui_window_set_control_label;
    PFN_KODI_GUI_WINDOW_SET_CONTROL_SELECTED_V1 kodi_gui_window_set_control_selected;
    PFN_KODI_GUI_WINDOW_SET_CONTROL_VISIBLE_V1 kodi_gui_window_set_control_visible;
    PFN_KODI_GUI_WINDOW_SET_CURRENT_LIST_POSITION_V1 kodi_gui_window_set_current_list_position;
    PFN_KODI_GUI_WINDOW_SET_FOCUS_ID_V1 kodi_gui_window_set_focus_id;
    PFN_KODI_GUI_WINDOW_SET_PROPERTY_BOOL_V1 kodi_gui_window_set_property_bool;
    PFN_KODI_GUI_WINDOW_SET_PROPERTY_DOUBLE_V1 kodi_gui_window_set_property_double;
    PFN_KODI_GUI_WINDOW_SET_PROPERTY_INT_V1 kodi_gui_window_set_property_int;
    PFN_KODI_GUI_WINDOW_SET_PROPERTY_V1 kodi_gui_window_set_property;
    PFN_KODI_GUI_WINDOW_SHOW_V1 kodi_gui_window_show;

    // gui/controls/button.h
    PFN_KODI_GUI_CONTROLS_BUTTON_GET_LABEL2_V1 kodi_gui_controls_button_get_label2;
    PFN_KODI_GUI_CONTROLS_BUTTON_GET_LABEL_V1 kodi_gui_controls_button_get_label;
    PFN_KODI_GUI_CONTROLS_BUTTON_SET_ENABLED_V1 kodi_gui_controls_button_set_enabled;
    PFN_KODI_GUI_CONTROLS_BUTTON_SET_LABEL2_V1 kodi_gui_controls_button_set_label2;
    PFN_KODI_GUI_CONTROLS_BUTTON_SET_LABEL_V1 kodi_gui_controls_button_set_label;
    PFN_KODI_GUI_CONTROLS_BUTTON_SET_VISIBLE_V1 kodi_gui_controls_button_set_visible;

    // gui/controls/edit.h
    PFN_KODI_GUI_CONTROLS_EDIT_GET_CURSOR_POSITION_V1 kodi_gui_controls_edit_get_cursor_position;
    PFN_KODI_GUI_CONTROLS_EDIT_GET_LABEL_V1 kodi_gui_controls_edit_get_label;
    PFN_KODI_GUI_CONTROLS_EDIT_GET_TEXT_V1 kodi_gui_controls_edit_get_text;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_CURSOR_POSITION_V1 kodi_gui_controls_edit_set_cursor_position;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_ENABLED_V1 kodi_gui_controls_edit_set_enabled;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_INPUT_TYPE_V1 kodi_gui_controls_edit_set_input_type;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_LABEL_V1 kodi_gui_controls_edit_set_label;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_TEXT_V1 kodi_gui_controls_edit_set_text;
    PFN_KODI_GUI_CONTROLS_EDIT_SET_VISIBLE_V1 kodi_gui_controls_edit_set_visible;

    // gui/controls/fade_label.h
    PFN_KODI_GUI_CONTROLS_FADE_LABEL_ADD_LABEL_V1 kodi_gui_controls_fade_label_add_label;
    PFN_KODI_GUI_CONTROLS_FADE_LABEL_GET_LABEL_V1 kodi_gui_controls_fade_label_get_label;
    PFN_KODI_GUI_CONTROLS_FADE_LABEL_RESET_V1 kodi_gui_controls_fade_label_reset;
    PFN_KODI_GUI_CONTROLS_FADE_LABEL_SET_SCROLLING_V1 kodi_gui_controls_fade_label_set_scrolling;
    PFN_KODI_GUI_CONTROLS_FADE_LABEL_SET_VISIBLE_V1 kodi_gui_controls_fade_label_set_visible;

    // gui/controls/image.h
    PFN_KODI_GUI_CONTROLS_IMAGE_SET_COLOR_DIFFUSE_V1 kodi_gui_controls_image_set_color_diffuse;
    PFN_KODI_GUI_CONTROLS_IMAGE_SET_FILENAME_V1 kodi_gui_controls_image_set_filename;
    PFN_KODI_GUI_CONTROLS_IMAGE_SET_VISIBLE_V1 kodi_gui_controls_image_set_visible;

    // gui/controls/label.h
    PFN_KODI_GUI_CONTROLS_LABEL_GET_LABEL_V1 kodi_gui_controls_label_get_label;
    PFN_KODI_GUI_CONTROLS_LABEL_SET_LABEL_V1 kodi_gui_controls_label_set_label;
    PFN_KODI_GUI_CONTROLS_LABEL_SET_VISIBLE_V1 kodi_gui_controls_label_set_visible;

    // gui/controls/progress.h
    PFN_KODI_GUI_CONTROLS_PROGRESS_GET_PERCENTAGE_V1 kodi_gui_controls_progress_get_percentage;
    PFN_KODI_GUI_CONTROLS_PROGRESS_SET_PERCENTAGE_V1 kodi_gui_controls_progress_set_percentage;
    PFN_KODI_GUI_CONTROLS_PROGRESS_SET_VISIBLE_V1 kodi_gui_controls_progress_set_visible;

    // gui/controls/radio_button.h
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_GET_LABEL_V1 kodi_gui_controls_radio_button_get_label;
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_IS_SELECTED_V1 kodi_gui_controls_radio_button_is_selected;
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_ENABLED_V1 kodi_gui_controls_radio_button_set_enabled;
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_LABEL_V1 kodi_gui_controls_radio_button_set_label;
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_SELECTED_V1 kodi_gui_controls_radio_button_set_selected;
    PFN_KODI_GUI_CONTROLS_RADIO_BUTTON_SET_VISIBLE_V1 kodi_gui_controls_radio_button_set_visible;

    // gui/controls/rendering.h
    PFN_KODI_GUI_CONTROLS_RADIO_RENDERING_DESTROY_V1 kodi_gui_controls_radio_rendering_destroy;

    // gui/controls/settings_slider.h
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_FLOAT_VALUE_V1
        kodi_gui_controls_settings_slider_get_float_value;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_INT_VALUE_V1
        kodi_gui_controls_settings_slider_get_int_value;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_GET_PERCENTAGE_V1
        kodi_gui_controls_settings_slider_get_percentage;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_RESET_V1 kodi_gui_controls_settings_slider_reset;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_ENABLED_V1
        kodi_gui_controls_settings_slider_set_enabled;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_INTERVAL_V1
        kodi_gui_controls_settings_slider_set_float_interval;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_RANGE_V1
        kodi_gui_controls_settings_slider_set_float_range;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_FLOAT_VALUE_V1
        kodi_gui_controls_settings_slider_set_float_value;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_INTERVAL_V1
        kodi_gui_controls_settings_slider_set_int_interval;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_RANGE_V1
        kodi_gui_controls_settings_slider_set_int_range;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_INT_VALUE_V1
        kodi_gui_controls_settings_slider_set_int_value;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_PERCENTAGE_V1
        kodi_gui_controls_settings_slider_set_percentage;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_TEXT_V1 kodi_gui_controls_settings_slider_set_text;
    PFN_KODI_GUI_CONTROLS_SETTINGS_SLIDER_SET_VISIBLE_V1
        kodi_gui_controls_settings_slider_set_visible;

    // gui/controls/slider.h
    PFN_KODI_GUI_CONTROLS_SLIDER_GET_DESCRIPTION_V1 kodi_gui_controls_slider_get_description;
    PFN_KODI_GUI_CONTROLS_SLIDER_GET_FLOAT_VALUE_V1 kodi_gui_controls_slider_get_float_value;
    PFN_KODI_GUI_CONTROLS_SLIDER_GET_INT_VALUE_V1 kodi_gui_controls_slider_get_int_value;
    PFN_KODI_GUI_CONTROLS_SLIDER_GET_PERCENTAGE_V1 kodi_gui_controls_slider_get_percentage;
    PFN_KODI_GUI_CONTROLS_SLIDER_RESET_V1 kodi_gui_controls_slider_reset;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_ENABLED_V1 kodi_gui_controls_slider_set_enabled;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_INTERVAL_V1 kodi_gui_controls_slider_set_float_interval;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_RANGE_V1 kodi_gui_controls_slider_set_float_range;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_FLOAT_VALUE_V1 kodi_gui_controls_slider_set_float_value;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_INTERVAL_V1 kodi_gui_controls_slider_set_int_interval;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_RANGE_V1 kodi_gui_controls_slider_set_int_range;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_INT_VALUE_V1 kodi_gui_controls_slider_set_int_value;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_PERCENTAGE_V1 kodi_gui_controls_slider_set_percentage;
    PFN_KODI_GUI_CONTROLS_SLIDER_SET_VISIBLE_V1 kodi_gui_controls_slider_set_visible;

    // gui/controls/spin.h
    PFN_KODI_GUI_CONTROLS_SPIN_ADD_INT_LABEL_V1 kodi_gui_controls_spin_add_int_label;
    PFN_KODI_GUI_CONTROLS_SPIN_ADD_STRING_LABEL_V1 kodi_gui_controls_spin_add_string_label;
    PFN_KODI_GUI_CONTROLS_SPIN_GET_FLOAT_VALUE_V1 kodi_gui_controls_spin_get_float_value;
    PFN_KODI_GUI_CONTROLS_SPIN_GET_INT_VALUE_V1 kodi_gui_controls_spin_get_int_value;
    PFN_KODI_GUI_CONTROLS_SPIN_GET_STRING_VALUE_V1 kodi_gui_controls_spin_get_string_value;
    PFN_KODI_GUI_CONTROLS_SPIN_RESET_V1 kodi_gui_controls_spin_reset;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_ENABLED_V1 kodi_gui_controls_spin_set_enabled;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_INTERVAL_V1 kodi_gui_controls_spin_set_float_interval;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_RANGE_V1 kodi_gui_controls_spin_set_float_range;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_FLOAT_VALUE_V1 kodi_gui_controls_spin_set_float_value;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_INT_RANGE_V1 kodi_gui_controls_spin_set_int_range;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_INT_VALUE_V1 kodi_gui_controls_spin_set_int_value;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_STRING_VALUE_V1 kodi_gui_controls_spin_set_string_value;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_TEXT_V1 kodi_gui_controls_spin_set_text;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_TYPE_V1 kodi_gui_controls_spin_set_type;
    PFN_KODI_GUI_CONTROLS_SPIN_SET_VISIBLE_V1 kodi_gui_controls_spin_set_visible;

    // gui/controls/text_box.h
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_GET_TEXT_V1 kodi_gui_controls_text_box_get_text;
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_RESET_V1 kodi_gui_controls_text_box_reset;
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_SCROLL_V1 kodi_gui_controls_text_box_scroll;
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_AUTO_SCROLLING_V1
        kodi_gui_controls_text_box_set_auto_scrolling;
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_TEXT_V1 kodi_gui_controls_text_box_set_text;
    PFN_KODI_GUI_CONTROLS_TEXT_BOX_SET_VISIBLE_V1 kodi_gui_controls_text_box_set_visible;

    // gui/dialogs/context_menu.h
    PFN_KODI_GUI_DIALOGS_CONTEXT_MENU_OPEN_V1 kodi_gui_dialogs_context_menu_open;

    // gui/dialogs/extended_progress.h
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_DELETE_DIALOG_V1
        kodi_gui_dialogs_extended_progress_delete_dialog;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_PERCENTAGE_V1
        kodi_gui_dialogs_extended_progress_get_percentage;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_TEXT_V1 kodi_gui_dialogs_extended_progress_get_text;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_GET_TITLE_V1
        kodi_gui_dialogs_extended_progress_get_title;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_IS_FINISHED_V1
        kodi_gui_dialogs_extended_progress_is_finished;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_MARK_FINISHED_V1
        kodi_gui_dialogs_extended_progress_mark_finished;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_NEW_DIALOG_V1
        kodi_gui_dialogs_extended_progress_new_dialog;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_PERCENTAGE_V1
        kodi_gui_dialogs_extended_progress_set_percentage;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_PROGRESS_V1
        kodi_gui_dialogs_extended_progress_set_progress;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_TEXT_V1 kodi_gui_dialogs_extended_progress_set_text;
    PFN_KODI_GUI_DIALOGS_EXTENDED_PROGRESS_SET_TITLE_V1
        kodi_gui_dialogs_extended_progress_set_title;

    // gui/dialogs/filebrowser.h
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_CLEAR_FILE_LIST_V1
        kodi_gui_dialogs_file_browser_clear_file_list;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_DIRECTORY_V1
        kodi_gui_dialogs_file_browser_show_and_get_directory;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_FROM_DIR_V1
        kodi_gui_dialogs_file_browser_show_and_get_file_from_dir;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_LIST_V1
        kodi_gui_dialogs_file_browser_show_and_get_file_list;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_FILE_V1
        kodi_gui_dialogs_file_browser_show_and_get_file;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_IMAGE_LIST_V1
        kodi_gui_dialogs_file_browser_show_and_get_image_list;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_IMAGE_V1
        kodi_gui_dialogs_file_browser_show_and_get_image;
    PFN_KODI_GUI_DIALOGS_FILE_BROWSER_SHOW_AND_GET_SOURCE_V1
        kodi_gui_dialogs_file_browser_show_and_get_source;

    // gui/dialogs/keyboard.h
    PFN_KODI_GUI_DIALOGS_KEYBOARD_IS_KEYBOARD_ACTIVATED_V1
        kodi_gui_dialogs_keyboard_is_keyboard_activated;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SEND_TEXT_TO_ACTIVE_KEYBOARD_V1
        kodi_gui_dialogs_keyboard_send_text_to_active_keyboard;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_FILTER_V1
        kodi_gui_dialogs_keyboard_show_and_get_filter;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_V1
        kodi_gui_dialogs_keyboard_show_and_get_input;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_INPUT_WITH_HEAD_V1
        kodi_gui_dialogs_keyboard_show_and_get_input_with_head;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_V1
        kodi_gui_dialogs_keyboard_show_and_get_new_password;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_GET_NEW_PASSWORD_WITH_HEAD_V1
        kodi_gui_dialogs_keyboard_show_and_get_new_password_with_head;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_V1
        kodi_gui_dialogs_keyboard_show_and_verify_new_password;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_NEW_PASSWORD_WITH_HEAD_V1
        kodi_gui_dialogs_keyboard_show_and_verify_new_password_with_head;
    PFN_KODI_GUI_DIALOGS_KEYBOARD_SHOW_AND_VERIFY_PASSWORD_V1
        kodi_gui_dialogs_keyboard_show_and_verify_password;

    // gui/dialogs/numeric.h
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_DATE_V1 kodi_gui_dialogs_numeric_show_and_get_date;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_IP_ADDRESS_V1
        kodi_gui_dialogs_numeric_show_and_get_ip_address;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_NUMBER_V1
        kodi_gui_dialogs_numeric_show_and_get_number;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_SECONDS_V1
        kodi_gui_dialogs_numeric_show_and_get_seconds;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_GET_TIME_V1 kodi_gui_dialogs_numeric_show_and_get_time;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_INPUT_V1
        kodi_gui_dialogs_numeric_show_and_verify_input;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_NEW_PASSWORD_V1
        kodi_gui_dialogs_numeric_show_and_verify_new_password;
    PFN_KODI_GUI_DIALOGS_NUMERIC_SHOW_AND_VERIFY_PASSWORD_V1
        kodi_gui_dialogs_numeric_show_and_verify_password;

    // gui/dialogs/ok.h
    PFN_KODI_GUI_DIALOGS_OK_SHOW_AND_GET_INPUT_LINE_TEXT_V1
        kodi_gui_dialogs_ok_show_and_get_input_line_text;
    PFN_KODI_GUI_DIALOGS_OK_SHOW_AND_GET_INPUT_SINGLE_TEXT_V1
        kodi_gui_dialogs_ok_show_and_get_input_single_text;

    // gui/dialogs/progress.h
    PFN_KODI_GUI_DIALOGS_PROGRESS_ABORT_V1 kodi_gui_dialogs_progress_abort;
    PFN_KODI_GUI_DIALOGS_PROGRESS_DELETE_DIALOG_V1 kodi_gui_dialogs_progress_delete_dialog;
    PFN_KODI_GUI_DIALOGS_PROGRESS_GET_PERCENTAGE_V1 kodi_gui_dialogs_progress_get_percentage;
    PFN_KODI_GUI_DIALOGS_PROGRESS_IS_CANCELED_V1 kodi_gui_dialogs_progress_is_canceled;
    PFN_KODI_GUI_DIALOGS_PROGRESS_NEW_DIALOG_V1 kodi_gui_dialogs_progress_new_dialog;
    PFN_KODI_GUI_DIALOGS_PROGRESS_OPEN_V1 kodi_gui_dialogs_progress_open;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_CAN_CANCEL_V1 kodi_gui_dialogs_progress_set_can_cancel;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_HEADING_V1 kodi_gui_dialogs_progress_set_heading;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_LINE_V1 kodi_gui_dialogs_progress_set_line;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PERCENTAGE_V1 kodi_gui_dialogs_progress_set_percentage;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PROGRESS_ADVANCE_V1
        kodi_gui_dialogs_progress_set_progress_advance;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SET_PROGRESS_MAX_V1 kodi_gui_dialogs_progress_set_progress_max;
    PFN_KODI_GUI_DIALOGS_PROGRESS_SHOW_PROGRESS_BAR_V1 kodi_gui_dialogs_progress_show_progress_bar;

    // gui/dialogs/select.h
    PFN_KODI_GUI_DIALOGS_SELECT_OPEN_MULTI_SELECT_V1 kodi_gui_dialogs_select_open_multi_select;
    PFN_KODI_GUI_DIALOGS_SELECT_OPEN_V1 kodi_gui_dialogs_select_open;

    // gui/dialogs/text_viewer.h
    PFN_KODI_GUI_DIALOGS_TEXT_VIEWER_SHOW_V1 kodi_gui_dialogs_text_viewer_show;

    // gui/dialogs/yes_no.h
    PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_LINE_BUTTON_TEXT_V1
        kodi_gui_dialogs_yesno_show_and_get_input_line_button_text;
    PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_LINE_TEXT_V1
        kodi_gui_dialogs_yesno_show_and_get_input_line_text;
    PFN_KODI_GUI_DIALOGS_YESNO_SHOW_AND_GET_INPUT_SINGLE_TEXT_V1
        kodi_gui_dialogs_yesno_show_and_get_input_single_text;
  };

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /* C_API_DL_API_1_H */
