/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "audiodecoder.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_audiodecoder_h::InitDirect(
    directFuncToAddon_addoninstance_audiodecoder_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_audiodecoder_create_v1 = kodi_addon_audiodecoder_create_v1;
  ifcToAddon->kodi_addon_audiodecoder_destroy_v1 = kodi_addon_audiodecoder_destroy_v1;
  ifcToAddon->kodi_addon_audiodecoder_init_v1 = kodi_addon_audiodecoder_init_v1;
  ifcToAddon->kodi_addon_audiodecoder_read_pcm_v1 = kodi_addon_audiodecoder_read_pcm_v1;
  ifcToAddon->kodi_addon_audiodecoder_seek_v1 = kodi_addon_audiodecoder_seek_v1;
  ifcToAddon->kodi_addon_audiodecoder_read_tag_v1 = kodi_addon_audiodecoder_read_tag_v1;
  ifcToAddon->kodi_addon_audiodecoder_track_count_v1 = kodi_addon_audiodecoder_track_count_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_audiodecoder_h::HandleMessage(int funcGroup,
                                                           int func,
                                                           const msgpack::unpacked& in,
                                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_audiodecoder_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_audiodecoder_create_v1:
    {
      // Original API call: typedef KODI_ADDON_AUDIODECODER_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audiodecoder_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_audiodecoder_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_AUDIODECODER_HDL auto_gen_ret =
          kodi_addon_audiodecoder_create_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audiodecoder_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_audiodecoder_destroy_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_DESTROY_V1)(KODI_ADDON_AUDIODECODER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audiodecoder_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_audiodecoder_destroy_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_audiodecoder_destroy_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_audiodecoder_init_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_INIT_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file, unsigned int filecache, int* channels, int* samplerate, int* bitspersample, int64_t* totaltime, int* bitrate, enum AudioEngineDataFormat* format, enum AudioEngineChannel info[AUDIOENGINE_CH_MAX]);
      // Tuple in:          typedef std::tuple<PtrValue, std::string, unsigned int, int, int, int, int64_t, int, AudioEngineDataFormat, std::array<AudioEngineChannel, AUDIOENGINE_CH_MAX>> msgChild__IN_kodi_addon_audiodecoder_init_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, int, int, int, int64_t, int, AudioEngineDataFormat, std::array<AudioEngineChannel, AUDIOENGINE_CH_MAX>> msgChild_OUT_kodi_addon_audiodecoder_init_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_init_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::string& file = std::get<1>(t);
      unsigned int filecache = std::get<2>(t);
      int channels = std::get<3>(t);
      int samplerate = std::get<4>(t);
      int bitspersample = std::get<5>(t);
      int64_t totaltime = std::get<6>(t);
      int bitrate = std::get<7>(t);
      enum AudioEngineDataFormat format = std::get<8>(t);
      std::array<AudioEngineChannel, AUDIOENGINE_CH_MAX>& info = std::get<9>(t);
      bool auto_gen_ret = kodi_addon_audiodecoder_init_v1(
          this, auto_gen_hdl, file.c_str(), filecache, &channels, &samplerate, &bitspersample,
          &totaltime, &bitrate, &format, info.data());

      msgpack::pack(out, msgChild_OUT_kodi_addon_audiodecoder_init_v1(
                             auto_gen_ret, channels, samplerate, bitspersample, totaltime, bitrate,
                             format, info));
      return true;
    }
    case funcChild_kodi_addon_audiodecoder_read_pcm_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_READ_PCM_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, uint8_t* buffer, size_t size, size_t* actualsize);
      // Tuple in:          typedef std::tuple<PtrValue, size_t, size_t> msgChild__IN_kodi_addon_audiodecoder_read_pcm_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int, std::vector<uint8_t>, size_t> msgChild_OUT_kodi_addon_audiodecoder_read_pcm_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_read_pcm_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      size_t size = std::get<1>(t);
      size_t actualsize = std::get<2>(t);
      std::vector<uint8_t> buffer(size);
      int auto_gen_ret =
          kodi_addon_audiodecoder_read_pcm_v1(this, auto_gen_hdl, buffer.data(), size, &actualsize);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_audiodecoder_read_pcm_v1(auto_gen_ret, buffer, actualsize));
      return true;
    }
    case funcChild_kodi_addon_audiodecoder_seek_v1:
    {
      // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_SEEK_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, int64_t time);
      // Tuple in:          typedef std::tuple<PtrValue, int64_t> msgChild__IN_kodi_addon_audiodecoder_seek_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_audiodecoder_seek_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_seek_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int64_t time = std::get<1>(t);
      int64_t auto_gen_ret = kodi_addon_audiodecoder_seek_v1(this, auto_gen_hdl, time);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audiodecoder_seek_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_audiodecoder_read_tag_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_READ_TAG_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file, struct AUDIODECODER_INFO_TAG* tag);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_audiodecoder_read_tag_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, IFC_AUDIODECODER_INFO_TAG> msgChild_OUT_kodi_addon_audiodecoder_read_tag_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_read_tag_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::string& file = std::get<1>(t);
      struct AUDIODECODER_INFO_TAG tag;
      bool auto_gen_ret =
          kodi_addon_audiodecoder_read_tag_v1(this, auto_gen_hdl, file.c_str(), &tag);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audiodecoder_read_tag_v1(auto_gen_ret, &tag));
      IFC_AUDIODECODER_INFO_TAG::CleanCStructure(&tag);
      return true;
    }
    case funcChild_kodi_addon_audiodecoder_track_count_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_TRACK_COUNT_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_audiodecoder_track_count_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_audiodecoder_track_count_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audiodecoder_track_count_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::string& file = std::get<1>(t);
      int auto_gen_ret = kodi_addon_audiodecoder_track_count_v1(this, auto_gen_hdl, file.c_str());

      msgpack::pack(out, msgChild_OUT_kodi_addon_audiodecoder_track_count_v1(auto_gen_ret));
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_AUDIODECODER_HDL CHdl_kodi_addoninstance_audiodecoder_h::
    kodi_addon_audiodecoder_create_v1(void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_AUDIODECODER_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_audiodecoder.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_audiodecoder.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_destroy_v1(
    void* thisClassHdl, KODI_ADDON_AUDIODECODER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_audiodecoder.v1.destroy)
  {
    union_data->types.kodi_addon_audiodecoder.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_init_v1(
    void* thisClassHdl,
    const KODI_ADDON_AUDIODECODER_HDL hdl,
    const char* file,
    unsigned int filecache,
    int* channels,
    int* samplerate,
    int* bitspersample,
    int64_t* totaltime,
    int* bitrate,
    enum AudioEngineDataFormat* format,
    enum AudioEngineChannel info[AUDIOENGINE_CH_MAX]) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_audiodecoder.v1.init)
  {
    auto_gen_ret = union_data->types.kodi_addon_audiodecoder.v1.init(
        union_data->hdl, file, filecache, channels, samplerate, bitspersample, totaltime, bitrate,
        format, info);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_read_pcm_v1(
    void* thisClassHdl,
    const KODI_ADDON_AUDIODECODER_HDL hdl,
    uint8_t* buffer,
    size_t size,
    size_t* actualsize) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_audiodecoder.v1.read_pcm)
  {
    auto_gen_ret = union_data->types.kodi_addon_audiodecoder.v1.read_pcm(union_data->hdl, buffer,
                                                                         size, actualsize);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_seek_v1(
    void* thisClassHdl, const KODI_ADDON_AUDIODECODER_HDL hdl, int64_t time) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_audiodecoder.v1.seek)
  {
    auto_gen_ret = union_data->types.kodi_addon_audiodecoder.v1.seek(union_data->hdl, time);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_read_tag_v1(
    void* thisClassHdl,
    const KODI_ADDON_AUDIODECODER_HDL hdl,
    const char* file,
    struct AUDIODECODER_INFO_TAG* tag) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_audiodecoder.v1.read_tag)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_audiodecoder.v1.read_tag(union_data->hdl, file, tag);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_audiodecoder_h::kodi_addon_audiodecoder_track_count_v1(
    void* thisClassHdl, const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audiodecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_audiodecoder.v1.track_count)
  {
    auto_gen_ret = union_data->types.kodi_addon_audiodecoder.v1.track_count(union_data->hdl, file);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
