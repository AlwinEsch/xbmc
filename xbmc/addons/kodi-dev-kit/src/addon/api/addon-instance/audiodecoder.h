/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "core/IMsgHdl.h"
#include "src/shared/api/addon-instance/audiodecoder.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct directFuncToAddon_addoninstance_audiodecoder_h;
struct directFuncToKodi_addoninstance_audiodecoder_h;

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */

namespace KODI_ADDON
{
namespace INTERNAL
{

class ATTR_DLL_LOCAL CHdl_kodi_addoninstance_audiodecoder_h : public IMsgHdl
{
public:
  CHdl_kodi_addoninstance_audiodecoder_h(AddonIfc* ifc) : IMsgHdl(ifc) {}

  void InitDirect(
      KODI::ADDONS::INTERFACE::directFuncToAddon_addoninstance_audiodecoder_h* ifcToAddon);

#ifndef KODI_INHIBIT_SHARED
  bool HandleMessage(int funcGroup,
                     int func,
                     const msgpack::unpacked& in,
                     msgpack::sbuffer& out) override;
#endif /* !KODI_INHIBIT_SHARED */

  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

  // Calls from Kodi to addon
  static KODI_ADDON_AUDIODECODER_HDL kodi_addon_audiodecoder_create_v1(
      void* thisClassHdl, KODI_OWN_HDL kodi_hdl); // Added with API 1

  static void kodi_addon_audiodecoder_destroy_v1(
      void* thisClassHdl, KODI_ADDON_AUDIODECODER_HDL hdl); // Added with API 1

  static bool kodi_addon_audiodecoder_init_v1(
      void* thisClassHdl,
      const KODI_ADDON_AUDIODECODER_HDL hdl,
      const char* file,
      unsigned int filecache,
      int* channels,
      int* samplerate,
      int* bitspersample,
      int64_t* totaltime,
      int* bitrate,
      enum AudioEngineDataFormat* format,
      enum AudioEngineChannel info[AUDIOENGINE_CH_MAX]); // Added with API 1

  static int kodi_addon_audiodecoder_read_pcm_v1(void* thisClassHdl,
                                                 const KODI_ADDON_AUDIODECODER_HDL hdl,
                                                 uint8_t* buffer,
                                                 size_t size,
                                                 size_t* actualsize); // Added with API 1

  static int64_t kodi_addon_audiodecoder_seek_v1(void* thisClassHdl,
                                                 const KODI_ADDON_AUDIODECODER_HDL hdl,
                                                 int64_t time); // Added with API 1

  static bool kodi_addon_audiodecoder_read_tag_v1(
      void* thisClassHdl,
      const KODI_ADDON_AUDIODECODER_HDL hdl,
      const char* file,
      struct AUDIODECODER_INFO_TAG* tag); // Added with API 1

  static int kodi_addon_audiodecoder_track_count_v1(void* thisClassHdl,
                                                    const KODI_ADDON_AUDIODECODER_HDL hdl,
                                                    const char* file); // Added with API 1
};

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */
