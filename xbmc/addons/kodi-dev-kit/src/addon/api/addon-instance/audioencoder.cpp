/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "audioencoder.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_audioencoder_h::InitDirect(
    directFuncToAddon_addoninstance_audioencoder_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_audioencoder_create_v1 = kodi_addon_audioencoder_create_v1;
  ifcToAddon->kodi_addon_audioencoder_destroy_v1 = kodi_addon_audioencoder_destroy_v1;
  ifcToAddon->kodi_addon_audioencoder_start_v1 = kodi_addon_audioencoder_start_v1;
  ifcToAddon->kodi_addon_audioencoder_encode_v1 = kodi_addon_audioencoder_encode_v1;
  ifcToAddon->kodi_addon_audioencoder_finish_v1 = kodi_addon_audioencoder_finish_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_audioencoder_h::HandleMessage(int funcGroup,
                                                           int func,
                                                           const msgpack::unpacked& in,
                                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_audioencoder_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_audioencoder_create_v1:
    {
      // Original API call: typedef KODI_ADDON_AUDIOENCODER_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_audioencoder_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audioencoder_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_AUDIOENCODER_HDL auto_gen_ret =
          kodi_addon_audioencoder_create_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audioencoder_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_audioencoder_destroy_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_DESTROY_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_audioencoder_destroy_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audioencoder_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_audioencoder_destroy_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_audioencoder_start_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_START_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl, const struct AUDIOENCODER_INFO_TAG* tag);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_AUDIOENCODER_INFO_TAG> msgChild__IN_kodi_addon_audioencoder_start_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_audioencoder_start_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audioencoder_start_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      AUDIOENCODER_INFO_TAG tag;
      std::get<1>(t).SetCStructure(&tag);
      bool auto_gen_ret = kodi_addon_audioencoder_start_v1(this, auto_gen_hdl, &tag);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audioencoder_start_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_audioencoder_encode_v1:
    {
      // Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_ENCODE_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl, const uint8_t* pbt_stream, size_t num_bytes_read);
      // Tuple in:          typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t> msgChild__IN_kodi_addon_audioencoder_encode_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<ssize_t> msgChild_OUT_kodi_addon_audioencoder_encode_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audioencoder_encode_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::vector<uint8_t>& pbt_stream = std::get<1>(t);
      size_t num_bytes_read = std::get<2>(t);
      ssize_t auto_gen_ret =
          kodi_addon_audioencoder_encode_v1(this, auto_gen_hdl, pbt_stream.data(), num_bytes_read);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audioencoder_encode_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_audioencoder_finish_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_FINISH_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_finish_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_audioencoder_finish_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_audioencoder_finish_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_audioencoder_finish_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_audioencoder_finish_v1(auto_gen_ret));
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_AUDIOENCODER_HDL CHdl_kodi_addoninstance_audioencoder_h::
    kodi_addon_audioencoder_create_v1(void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audioencoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_AUDIOENCODER_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_audioencoder.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_audioencoder.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_audioencoder_h::kodi_addon_audioencoder_destroy_v1(
    void* thisClassHdl, KODI_ADDON_AUDIOENCODER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audioencoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_audioencoder.v1.destroy)
  {
    union_data->types.kodi_addon_audioencoder.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_audioencoder_h::kodi_addon_audioencoder_start_v1(
    void* thisClassHdl,
    KODI_ADDON_AUDIOENCODER_HDL hdl,
    const struct AUDIOENCODER_INFO_TAG* tag) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audioencoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_audioencoder.v1.start)
  {
    auto_gen_ret = union_data->types.kodi_addon_audioencoder.v1.start(union_data->hdl, tag);
  }
  return auto_gen_ret;
}

ssize_t CHdl_kodi_addoninstance_audioencoder_h::kodi_addon_audioencoder_encode_v1(
    void* thisClassHdl,
    KODI_ADDON_AUDIOENCODER_HDL hdl,
    const uint8_t* pbt_stream,
    size_t num_bytes_read) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audioencoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  ssize_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_audioencoder.v1.encode)
  {
    auto_gen_ret = union_data->types.kodi_addon_audioencoder.v1.encode(union_data->hdl, pbt_stream,
                                                                       num_bytes_read);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_audioencoder_h::kodi_addon_audioencoder_finish_v1(
    void* thisClassHdl, KODI_ADDON_AUDIOENCODER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_audioencoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_audioencoder.v1.finish)
  {
    auto_gen_ret = union_data->types.kodi_addon_audioencoder.v1.finish(union_data->hdl);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_write(KODI_OWN_HDL hdl,
                                                      const uint8_t* data,
                                                      size_t len)
{
  // Original API call: ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_write(KODI_OWN_HDL hdl, const uint8_t* data, size_t len) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t> msgParent__IN_kodi_addon_audioencoder_write_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ssize_t> msgParent_OUT_kodi_addon_audioencoder_write_v1; /* Autogenerated */

  if (hdl == nullptr || data == nullptr)
    return -1;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_audioencoder_write_v1(
                          PtrValue(hdl), std::vector<uint8_t>(data, data + len), len));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_audioencoder_h, funcParent_kodi_addon_audioencoder_write_v1, in,
            out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_audioencoder_write_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_audioencoder_h;
  return auto_gen_group.kodi_addon_audioencoder_write_v1(auto_gen_group.thisClassHdl, hdl, data,
                                                         len);
}

ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_seek(KODI_OWN_HDL hdl, size_t pos, int whence)
{
  // Original API call: ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_seek(KODI_OWN_HDL hdl, size_t pos, int whence) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, size_t, int> msgParent__IN_kodi_addon_audioencoder_seek_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<ssize_t> msgParent_OUT_kodi_addon_audioencoder_seek_v1; /* Autogenerated */

  if (hdl == nullptr)
    return -1;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_audioencoder_seek_v1(PtrValue(hdl), pos, whence));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_audioencoder_h, funcParent_kodi_addon_audioencoder_seek_v1, in,
            out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_audioencoder_seek_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_audioencoder_h;
  return auto_gen_group.kodi_addon_audioencoder_seek_v1(auto_gen_group.thisClassHdl, hdl, pos,
                                                        whence);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
