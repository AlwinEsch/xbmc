/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "game.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_game_h::InitDirect(directFuncToAddon_addoninstance_game_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_game_create_v1 = kodi_addon_game_create_v1;
  ifcToAddon->kodi_addon_game_destroy_v1 = kodi_addon_game_destroy_v1;
  ifcToAddon->kodi_addon_game_load_game_v1 = kodi_addon_game_load_game_v1;
  ifcToAddon->kodi_addon_game_load_game_special_v1 = kodi_addon_game_load_game_special_v1;
  ifcToAddon->kodi_addon_game_load_standalone_v1 = kodi_addon_game_load_standalone_v1;
  ifcToAddon->kodi_addon_game_unload_game_v1 = kodi_addon_game_unload_game_v1;
  ifcToAddon->kodi_addon_game_get_game_timing_v1 = kodi_addon_game_get_game_timing_v1;
  ifcToAddon->kodi_addon_game_get_region_v1 = kodi_addon_game_get_region_v1;
  ifcToAddon->kodi_addon_game_requires_game_loop_v1 = kodi_addon_game_requires_game_loop_v1;
  ifcToAddon->kodi_addon_game_run_frame_v1 = kodi_addon_game_run_frame_v1;
  ifcToAddon->kodi_addon_game_reset_v1 = kodi_addon_game_reset_v1;
  ifcToAddon->kodi_addon_game_hw_context_reset_v1 = kodi_addon_game_hw_context_reset_v1;
  ifcToAddon->kodi_addon_game_hw_context_destroy_v1 = kodi_addon_game_hw_context_destroy_v1;
  ifcToAddon->kodi_addon_game_has_feature_v1 = kodi_addon_game_has_feature_v1;
  ifcToAddon->kodi_addon_game_get_topology_v1 = kodi_addon_game_get_topology_v1;
  ifcToAddon->kodi_addon_game_free_topology_v1 = kodi_addon_game_free_topology_v1;
  ifcToAddon->kodi_addon_game_set_controller_layouts_v1 = kodi_addon_game_set_controller_layouts_v1;
  ifcToAddon->kodi_addon_game_enable_keyboard_v1 = kodi_addon_game_enable_keyboard_v1;
  ifcToAddon->kodi_addon_game_enable_mouse_v1 = kodi_addon_game_enable_mouse_v1;
  ifcToAddon->kodi_addon_game_connect_controller_v1 = kodi_addon_game_connect_controller_v1;
  ifcToAddon->kodi_addon_game_input_event_v1 = kodi_addon_game_input_event_v1;
  ifcToAddon->kodi_addon_game_serialize_size_v1 = kodi_addon_game_serialize_size_v1;
  ifcToAddon->kodi_addon_game_serialize_v1 = kodi_addon_game_serialize_v1;
  ifcToAddon->kodi_addon_game_deserialize_v1 = kodi_addon_game_deserialize_v1;
  ifcToAddon->kodi_addon_game_cheat_reset_v1 = kodi_addon_game_cheat_reset_v1;
  ifcToAddon->kodi_addon_game_get_memory_v1 = kodi_addon_game_get_memory_v1;
  ifcToAddon->kodi_addon_game_set_cheat_v1 = kodi_addon_game_set_cheat_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_game_h::HandleMessage(int funcGroup,
                                                   int func,
                                                   const msgpack::unpacked& in,
                                                   msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_game_h)
    return false;

  switch (func)
  {
    /* NOTE: Ignored as direct api only is set! */
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_GAME_HDL CHdl_kodi_addoninstance_game_h::kodi_addon_game_create_v1(
    void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_GAME_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_game.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_game_h::kodi_addon_game_destroy_v1(
    void* thisClassHdl, KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_game.v1.destroy)
  {
    union_data->types.kodi_addon_game.v1.destroy(union_data->hdl);
  }
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_load_game_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl, const char* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.load_game)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.load_game(union_data->hdl, url);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_load_game_special_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    enum SPECIAL_GAME_TYPE type,
    const char** urls,
    size_t urlCount) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.load_game_special)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.load_game_special(union_data->hdl, type,
                                                                          urls, urlCount);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_load_standalone_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.load_standalone)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.load_standalone(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_unload_game_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.unload_game)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.unload_game(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_get_game_timing_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    struct game_system_timing* timing_info) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.get_game_timing)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_game.v1.get_game_timing(union_data->hdl, timing_info);
  }
  return auto_gen_ret;
}

enum GAME_REGION CHdl_kodi_addoninstance_game_h::kodi_addon_game_get_region_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_REGION_UNKNOWN;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_REGION auto_gen_ret = GAME_REGION_UNKNOWN;
  if (union_data->types.kodi_addon_game.v1.get_region)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.get_region(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_requires_game_loop_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.requires_game_loop)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.requires_game_loop(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_run_frame_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.run_frame)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.run_frame(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_reset_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.reset)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.reset(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_hw_context_reset_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.hw_context_reset)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.hw_context_reset(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_hw_context_destroy_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.hw_context_destroy)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.hw_context_destroy(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_has_feature_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    const char* controller_id,
    const char* feature_name) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.has_feature)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.has_feature(union_data->hdl, controller_id,
                                                                    feature_name);
  }
  return auto_gen_ret;
}

struct game_input_topology* CHdl_kodi_addoninstance_game_h::kodi_addon_game_get_topology_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  struct game_input_topology* auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_game.v1.get_topology)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.get_topology(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_game_h::kodi_addon_game_free_topology_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    struct game_input_topology* topology) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_game.v1.free_topology)
  {
    union_data->types.kodi_addon_game.v1.free_topology(union_data->hdl, topology);
  }
}

void CHdl_kodi_addoninstance_game_h::kodi_addon_game_set_controller_layouts_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    const struct game_controller_layout* controllers,
    size_t controller_count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_game.v1.set_controller_layouts)
  {
    union_data->types.kodi_addon_game.v1.set_controller_layouts(union_data->hdl, controllers,
                                                                controller_count);
  }
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_enable_keyboard_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    bool enable,
    const char* controller_id) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.enable_keyboard)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.enable_keyboard(union_data->hdl, enable,
                                                                        controller_id);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_enable_mouse_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    bool enable,
    const char* controller_id) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.enable_mouse)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_game.v1.enable_mouse(union_data->hdl, enable, controller_id);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_connect_controller_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    bool connect,
    const char* port_address,
    const char* controller_id) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.connect_controller)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.connect_controller(
        union_data->hdl, connect, port_address, controller_id);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_game_h::kodi_addon_game_input_event_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    const struct game_input_event* event) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_game.v1.input_event)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.input_event(union_data->hdl, event);
  }
  return auto_gen_ret;
}

size_t CHdl_kodi_addoninstance_game_h::kodi_addon_game_serialize_size_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return 0;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  size_t auto_gen_ret = 0;
  if (union_data->types.kodi_addon_game.v1.serialize_size)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.serialize_size(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_serialize_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    uint8_t* data,
    size_t size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.serialize)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.serialize(union_data->hdl, data, size);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_deserialize_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    const uint8_t* data,
    size_t size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.deserialize)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.deserialize(union_data->hdl, data, size);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_cheat_reset_v1(
    void* thisClassHdl, const KODI_ADDON_GAME_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.cheat_reset)
  {
    auto_gen_ret = union_data->types.kodi_addon_game.v1.cheat_reset(union_data->hdl);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_get_memory_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    enum GAME_MEMORY type,
    uint8_t** data,
    size_t* size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.get_memory)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_game.v1.get_memory(union_data->hdl, type, data, size);
  }
  return auto_gen_ret;
}

enum GAME_ERROR CHdl_kodi_addoninstance_game_h::kodi_addon_game_set_cheat_v1(
    void* thisClassHdl,
    const KODI_ADDON_GAME_HDL hdl,
    unsigned int index,
    bool enabled,
    const char* code) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_game_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return GAME_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum GAME_ERROR auto_gen_ret = GAME_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_game.v1.set_cheat)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_game.v1.set_cheat(union_data->hdl, index, enabled, code);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT void kodi_addon_game_close(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_game_close(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  auto_gen_group.kodi_addon_game_close_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT KODI_GAME_STREAM_HANDLE
kodi_addon_game_open_stream(KODI_OWN_HDL hdl, const struct game_stream_properties* properties)
{
  // Original API call: ATTR_DLL_EXPORT KODI_GAME_STREAM_HANDLE kodi_addon_game_open_stream(KODI_OWN_HDL hdl, const struct game_stream_properties* properties) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || properties == nullptr)
    return nullptr;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  return auto_gen_group.kodi_addon_game_open_stream_v1(auto_gen_group.thisClassHdl, hdl,
                                                       properties);
}

ATTR_DLL_EXPORT bool kodi_addon_game_get_stream_buffer(KODI_OWN_HDL hdl,
                                                       KODI_GAME_STREAM_HANDLE game_hdl,
                                                       unsigned int width,
                                                       unsigned int height,
                                                       struct game_stream_buffer* buffer)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_addon_game_get_stream_buffer(KODI_OWN_HDL hdl, KODI_GAME_STREAM_HANDLE game_hdl, unsigned int width, unsigned int height, struct game_stream_buffer* buffer) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || game_hdl == nullptr || buffer == nullptr)
    return false;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  return auto_gen_group.kodi_addon_game_get_stream_buffer_v1(auto_gen_group.thisClassHdl, hdl,
                                                             game_hdl, width, height, buffer);
}

ATTR_DLL_EXPORT void kodi_addon_game_add_stream_data(KODI_OWN_HDL hdl,
                                                     KODI_GAME_STREAM_HANDLE game_hdl,
                                                     const struct game_stream_packet* packet)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_game_add_stream_data(KODI_OWN_HDL hdl, KODI_GAME_STREAM_HANDLE game_hdl, const struct game_stream_packet* packet) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || game_hdl == nullptr || packet == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  auto_gen_group.kodi_addon_game_add_stream_data_v1(auto_gen_group.thisClassHdl, hdl, game_hdl,
                                                    packet);
}

ATTR_DLL_EXPORT void kodi_addon_game_release_stream_buffer(KODI_OWN_HDL hdl,
                                                           KODI_GAME_STREAM_HANDLE game_hdl,
                                                           struct game_stream_buffer* buffer)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_game_release_stream_buffer(KODI_OWN_HDL hdl, KODI_GAME_STREAM_HANDLE game_hdl, struct game_stream_buffer* buffer) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || game_hdl == nullptr || buffer == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  auto_gen_group.kodi_addon_game_release_stream_buffer_v1(auto_gen_group.thisClassHdl, hdl,
                                                          game_hdl, buffer);
}

ATTR_DLL_EXPORT void kodi_addon_game_close_stream(KODI_OWN_HDL hdl,
                                                  KODI_GAME_STREAM_HANDLE game_hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_game_close_stream(KODI_OWN_HDL hdl, KODI_GAME_STREAM_HANDLE game_hdl) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || game_hdl == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  auto_gen_group.kodi_addon_game_close_stream_v1(auto_gen_group.thisClassHdl, hdl, game_hdl);
}

ATTR_DLL_EXPORT game_proc_address_t kodi_addon_hw_get_proc_address(KODI_OWN_HDL hdl,
                                                                   const char* symbol)
{
  // Original API call: ATTR_DLL_EXPORT game_proc_address_t kodi_addon_hw_get_proc_address(KODI_OWN_HDL hdl, const char* symbol) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || symbol == nullptr)
    return nullptr;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  return auto_gen_group.kodi_addon_hw_get_proc_address_v1(auto_gen_group.thisClassHdl, hdl, symbol);
}

ATTR_DLL_EXPORT bool kodi_addon_game_input_event(KODI_OWN_HDL hdl,
                                                 const struct game_input_event* event)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_addon_game_input_event(KODI_OWN_HDL hdl, const struct game_input_event* event) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || event == nullptr)
    return false;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_game_h;
  return auto_gen_group.kodi_addon_game_input_event_v1(auto_gen_group.thisClassHdl, hdl, event);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
