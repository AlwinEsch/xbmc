/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "imagedecoder.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_imagedecoder_h::InitDirect(
    directFuncToAddon_addoninstance_imagedecoder_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_imagedecoder_create_v1 = kodi_addon_imagedecoder_create_v1;
  ifcToAddon->kodi_addon_imagedecoder_destroy_v1 = kodi_addon_imagedecoder_destroy_v1;
  ifcToAddon->kodi_addon_imagedecoder_load_image_from_memory_v1 =
      kodi_addon_imagedecoder_load_image_from_memory_v1;
  ifcToAddon->kodi_addon_imagedecoder_decode_v1 = kodi_addon_imagedecoder_decode_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_imagedecoder_h::HandleMessage(int funcGroup,
                                                           int func,
                                                           const msgpack::unpacked& in,
                                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_imagedecoder_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_imagedecoder_create_v1:
    {
      // Original API call: typedef KODI_ADDON_IMAGEDECODER_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_imagedecoder_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_imagedecoder_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_imagedecoder_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_IMAGEDECODER_HDL auto_gen_ret =
          kodi_addon_imagedecoder_create_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_imagedecoder_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_imagedecoder_destroy_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_DESTROY_V1)(KODI_ADDON_IMAGEDECODER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_imagedecoder_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_imagedecoder_destroy_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_imagedecoder_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_imagedecoder_destroy_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_imagedecoder_load_image_from_memory_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1)( KODI_ADDON_IMAGEDECODER_HDL hdl, const uint8_t* buffer, size_t buf_size, unsigned int* width, unsigned int* height);
      // Tuple in:          typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t, unsigned int, unsigned int> msgChild__IN_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, unsigned int, unsigned int> msgChild_OUT_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_imagedecoder_load_image_from_memory_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::vector<uint8_t>& buffer = std::get<1>(t);
      size_t buf_size = std::get<2>(t);
      unsigned int width = std::get<3>(t);
      unsigned int height = std::get<4>(t);
      bool auto_gen_ret = kodi_addon_imagedecoder_load_image_from_memory_v1(
          this, auto_gen_hdl, buffer.data(), buf_size, &width, &height);

      msgpack::pack(out, msgChild_OUT_kodi_addon_imagedecoder_load_image_from_memory_v1(
                             auto_gen_ret, width, height));
      return true;
    }
    case funcChild_kodi_addon_imagedecoder_decode_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_DECODE_V1)(KODI_ADDON_IMAGEDECODER_HDL hdl, uint8_t* pixels, size_t pixels_size, unsigned int width, unsigned int height, unsigned int pitch, enum ADDON_IMG_FMT format);
      // Tuple in:          typedef std::tuple<PtrValue, size_t, unsigned int, unsigned int, unsigned int, ADDON_IMG_FMT> msgChild__IN_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::vector<uint8_t>> msgChild_OUT_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_imagedecoder_decode_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      size_t pixels_size = std::get<1>(t);
      unsigned int width = std::get<2>(t);
      unsigned int height = std::get<3>(t);
      unsigned int pitch = std::get<4>(t);
      enum ADDON_IMG_FMT format = std::get<5>(t);
      std::vector<uint8_t> pixels(pixels_size);
      bool auto_gen_ret = kodi_addon_imagedecoder_decode_v1(
          this, auto_gen_hdl, pixels.data(), pixels_size, width, height, pitch, format);

      msgpack::pack(out, msgChild_OUT_kodi_addon_imagedecoder_decode_v1(auto_gen_ret, pixels));
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_IMAGEDECODER_HDL CHdl_kodi_addoninstance_imagedecoder_h::
    kodi_addon_imagedecoder_create_v1(void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_imagedecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_IMAGEDECODER_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_imagedecoder.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_imagedecoder.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_destroy_v1(
    void* thisClassHdl, KODI_ADDON_IMAGEDECODER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_imagedecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_imagedecoder.v1.destroy)
  {
    union_data->types.kodi_addon_imagedecoder.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_load_image_from_memory_v1(
    void* thisClassHdl,
    KODI_ADDON_IMAGEDECODER_HDL hdl,
    const uint8_t* buffer,
    size_t buf_size,
    unsigned int* width,
    unsigned int* height) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_imagedecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_imagedecoder.v1.load_image_from_memory)
  {
    auto_gen_ret = union_data->types.kodi_addon_imagedecoder.v1.load_image_from_memory(
        union_data->hdl, buffer, buf_size, width, height);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_decode_v1(
    void* thisClassHdl,
    KODI_ADDON_IMAGEDECODER_HDL hdl,
    uint8_t* pixels,
    size_t pixels_size,
    unsigned int width,
    unsigned int height,
    unsigned int pitch,
    enum ADDON_IMG_FMT format) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_imagedecoder_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_imagedecoder.v1.decode)
  {
    auto_gen_ret = union_data->types.kodi_addon_imagedecoder.v1.decode(
        union_data->hdl, pixels, pixels_size, width, height, pitch, format);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT char* kodi_addon_imagedecoder_mimetype(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_addon_imagedecoder_mimetype(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_imagedecoder_mimetype_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_addon_imagedecoder_mimetype_v1; /* Autogenerated */

  if (hdl == nullptr)
    return nullptr;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_imagedecoder_mimetype_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_imagedecoder_h, funcParent_kodi_addon_imagedecoder_mimetype_v1,
            in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_imagedecoder_mimetype_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_imagedecoder_h;
  return auto_gen_group.kodi_addon_imagedecoder_mimetype_v1(auto_gen_group.thisClassHdl, hdl);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
