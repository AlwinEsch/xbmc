/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "inputstream.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_inputstream_h::InitDirect(
    directFuncToAddon_addoninstance_inputstream_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_inputstream_create_v1 = kodi_addon_inputstream_create_v1;
  ifcToAddon->kodi_addon_inputstream_destroy_v1 = kodi_addon_inputstream_destroy_v1;
  ifcToAddon->kodi_addon_inputstream_open_v1 = kodi_addon_inputstream_open_v1;
  ifcToAddon->kodi_addon_inputstream_close_v1 = kodi_addon_inputstream_close_v1;
  ifcToAddon->kodi_addon_inputstream_get_path_list_v1 = kodi_addon_inputstream_get_path_list_v1;
  ifcToAddon->kodi_addon_inputstream_get_capabilities_v1 =
      kodi_addon_inputstream_get_capabilities_v1;
  ifcToAddon->kodi_addon_inputstream_get_stream_ids_v1 = kodi_addon_inputstream_get_stream_ids_v1;
  ifcToAddon->kodi_addon_inputstream_get_stream_v1 = kodi_addon_inputstream_get_stream_v1;
  ifcToAddon->kodi_addon_inputstream_enable_stream_v1 = kodi_addon_inputstream_enable_stream_v1;
  ifcToAddon->kodi_addon_inputstream_open_stream_v1 = kodi_addon_inputstream_open_stream_v1;
  ifcToAddon->kodi_addon_inputstream_demux_reset_v1 = kodi_addon_inputstream_demux_reset_v1;
  ifcToAddon->kodi_addon_inputstream_demux_abort_v1 = kodi_addon_inputstream_demux_abort_v1;
  ifcToAddon->kodi_addon_inputstream_demux_flush_v1 = kodi_addon_inputstream_demux_flush_v1;
  ifcToAddon->kodi_addon_inputstream_demux_read_v1 = kodi_addon_inputstream_demux_read_v1;
  ifcToAddon->kodi_addon_inputstream_demux_seek_time_v1 = kodi_addon_inputstream_demux_seek_time_v1;
  ifcToAddon->kodi_addon_inputstream_demux_set_speed_v1 = kodi_addon_inputstream_demux_set_speed_v1;
  ifcToAddon->kodi_addon_inputstream_set_video_resolution_v1 =
      kodi_addon_inputstream_set_video_resolution_v1;
  ifcToAddon->kodi_addon_inputstream_get_total_time_v1 = kodi_addon_inputstream_get_total_time_v1;
  ifcToAddon->kodi_addon_inputstream_get_time_v1 = kodi_addon_inputstream_get_time_v1;
  ifcToAddon->kodi_addon_inputstream_get_times_v1 = kodi_addon_inputstream_get_times_v1;
  ifcToAddon->kodi_addon_inputstream_pos_time_v1 = kodi_addon_inputstream_pos_time_v1;
  ifcToAddon->kodi_addon_inputstream_read_stream_v1 = kodi_addon_inputstream_read_stream_v1;
  ifcToAddon->kodi_addon_inputstream_seek_stream_v1 = kodi_addon_inputstream_seek_stream_v1;
  ifcToAddon->kodi_addon_inputstream_position_stream_v1 = kodi_addon_inputstream_position_stream_v1;
  ifcToAddon->kodi_addon_inputstream_length_stream_v1 = kodi_addon_inputstream_length_stream_v1;
  ifcToAddon->kodi_addon_inputstream_is_real_time_stream_v1 =
      kodi_addon_inputstream_is_real_time_stream_v1;
  ifcToAddon->kodi_addon_inputstream_get_chapter_v1 = kodi_addon_inputstream_get_chapter_v1;
  ifcToAddon->kodi_addon_inputstream_get_chapter_count_v1 =
      kodi_addon_inputstream_get_chapter_count_v1;
  ifcToAddon->kodi_addon_inputstream_get_chapter_name_v1 =
      kodi_addon_inputstream_get_chapter_name_v1;
  ifcToAddon->kodi_addon_inputstream_get_chapter_pos_v1 = kodi_addon_inputstream_get_chapter_pos_v1;
  ifcToAddon->kodi_addon_inputstream_seek_chapter_v1 = kodi_addon_inputstream_seek_chapter_v1;
  ifcToAddon->kodi_addon_inputstream_block_size_stream_v1 =
      kodi_addon_inputstream_block_size_stream_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_inputstream_h::HandleMessage(int funcGroup,
                                                          int func,
                                                          const msgpack::unpacked& in,
                                                          msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_inputstream_h)
    return false;

  switch (func)
  {
    /* NOTE: Ignored as direct api only is set! */
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_INPUTSTREAM_HDL CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_create_v1(
    void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_INPUTSTREAM_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_inputstream.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_destroy_v1(
    void* thisClassHdl, KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.destroy)
  {
    union_data->types.kodi_addon_inputstream.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_open_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    struct INPUTSTREAM_PROPERTY* props) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.open)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.open(union_data->hdl, props);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_close_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.close)
  {
    union_data->types.kodi_addon_inputstream.v1.close(union_data->hdl);
  }
}

const char* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_path_list_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  const char* auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_inputstream.v1.get_path_list)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_path_list(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_capabilities_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    struct INPUTSTREAM_CAPABILITIES* capabilities) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.get_capabilities)
  {
    union_data->types.kodi_addon_inputstream.v1.get_capabilities(union_data->hdl, capabilities);
  }
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_stream_ids_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    struct INPUTSTREAM_IDS* ids) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.get_stream_ids)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_stream_ids(union_data->hdl, ids);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_stream_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    int streamid,
    struct INPUTSTREAM_INFO* info,
    KODI_OWN_HDL* demuxStream,
    PFN_CB_KODI_ADDON_INPUTSTREAM_TRANSFER_STREAM transfer_stream) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.get_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_stream(
        union_data->hdl, streamid, info, demuxStream, transfer_stream);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_enable_stream_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    int streamid,
    bool enable) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.enable_stream)
  {
    union_data->types.kodi_addon_inputstream.v1.enable_stream(union_data->hdl, streamid, enable);
  }
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_open_stream_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int streamid) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.open_stream)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_inputstream.v1.open_stream(union_data->hdl, streamid);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_reset_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.demux_reset)
  {
    union_data->types.kodi_addon_inputstream.v1.demux_reset(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_abort_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.demux_abort)
  {
    union_data->types.kodi_addon_inputstream.v1.demux_abort(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_flush_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.demux_flush)
  {
    union_data->types.kodi_addon_inputstream.v1.demux_flush(union_data->hdl);
  }
}

struct DEMUX_PACKET* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_read_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  struct DEMUX_PACKET* auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_inputstream.v1.demux_read)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.demux_read(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_seek_time_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    double time,
    bool backwards,
    double* startpts) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.demux_seek_time)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.demux_seek_time(
        union_data->hdl, time, backwards, startpts);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_demux_set_speed_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int speed) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.demux_set_speed)
  {
    union_data->types.kodi_addon_inputstream.v1.demux_set_speed(union_data->hdl, speed);
  }
}

void CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_set_video_resolution_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    int width,
    int height) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_inputstream.v1.set_video_resolution)
  {
    union_data->types.kodi_addon_inputstream.v1.set_video_resolution(union_data->hdl, width,
                                                                     height);
  }
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_total_time_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.get_total_time)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_total_time(union_data->hdl);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_time_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.get_time)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_time(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_times_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    struct INPUTSTREAM_TIMES* times) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.get_times)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_times(union_data->hdl, times);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_pos_time_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int ms) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.pos_time)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.pos_time(union_data->hdl, ms);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_read_stream_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    uint8_t* buffer,
    unsigned int bufferSize) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.read_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.read_stream(union_data->hdl, buffer,
                                                                           bufferSize);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_seek_stream_v1(
    void* thisClassHdl,
    const KODI_ADDON_INPUTSTREAM_HDL hdl,
    int64_t position,
    int whence) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.seek_stream)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_inputstream.v1.seek_stream(union_data->hdl, position, whence);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_position_stream_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.position_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.position_stream(union_data->hdl);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_length_stream_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.length_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.length_stream(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_is_real_time_stream_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.is_real_time_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.is_real_time_stream(union_data->hdl);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.get_chapter)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_chapter(union_data->hdl);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_count_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.get_chapter_count)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_chapter_count(union_data->hdl);
  }
  return auto_gen_ret;
}

const char* CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_name_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  const char* auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_inputstream.v1.get_chapter_name)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_inputstream.v1.get_chapter_name(union_data->hdl, ch);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_get_chapter_pos_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.get_chapter_pos)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.get_chapter_pos(union_data->hdl, ch);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_seek_chapter_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl, int ch) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_inputstream.v1.seek_chapter)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.seek_chapter(union_data->hdl, ch);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_inputstream_h::kodi_addon_inputstream_block_size_stream_v1(
    void* thisClassHdl, const KODI_ADDON_INPUTSTREAM_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_inputstream_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_inputstream.v1.block_size_stream)
  {
    auto_gen_ret = union_data->types.kodi_addon_inputstream.v1.block_size_stream(union_data->hdl);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT struct DEMUX_PACKET* kodi_addon_inputstream_allocate_demux_packet(KODI_OWN_HDL hdl,
                                                                                  int data_size)
{
  // Original API call: ATTR_DLL_EXPORT struct DEMUX_PACKET* kodi_addon_inputstream_allocate_demux_packet( KODI_OWN_HDL hdl, int data_size) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr)
    return nullptr;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_inputstream_h;
  return auto_gen_group.kodi_addon_inputstream_allocate_demux_packet_v1(auto_gen_group.thisClassHdl,
                                                                        hdl, data_size);
}

ATTR_DLL_EXPORT struct DEMUX_PACKET* kodi_addon_inputstream_allocate_encrypted_demux_packet(
    KODI_OWN_HDL hdl, unsigned int data_size, unsigned int encrypted_subsample_count)
{
  // Original API call: ATTR_DLL_EXPORT struct DEMUX_PACKET* kodi_addon_inputstream_allocate_encrypted_demux_packet( KODI_OWN_HDL hdl, unsigned int data_size, unsigned int encrypted_subsample_count) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr)
    return nullptr;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_inputstream_h;
  return auto_gen_group.kodi_addon_inputstream_allocate_encrypted_demux_packet_v1(
      auto_gen_group.thisClassHdl, hdl, data_size, encrypted_subsample_count);
}

ATTR_DLL_EXPORT void kodi_addon_inputstream_free_demux_packet(KODI_OWN_HDL hdl,
                                                              struct DEMUX_PACKET* packet)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_inputstream_free_demux_packet(KODI_OWN_HDL hdl, struct DEMUX_PACKET* packet) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || packet == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_inputstream_h;
  auto_gen_group.kodi_addon_inputstream_free_demux_packet_v1(auto_gen_group.thisClassHdl, hdl,
                                                             packet);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
