/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "pvr.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_pvr_h::InitDirect(directFuncToAddon_addoninstance_pvr_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_pvr_get_capabilities_v1 = kodi_addon_pvr_get_capabilities_v1;
  ifcToAddon->kodi_addon_pvr_get_backend_name_v1 = kodi_addon_pvr_get_backend_name_v1;
  ifcToAddon->kodi_addon_pvr_get_backend_version_v1 = kodi_addon_pvr_get_backend_version_v1;
  ifcToAddon->kodi_addon_pvr_get_backend_hostname_v1 = kodi_addon_pvr_get_backend_hostname_v1;
  ifcToAddon->kodi_addon_pvr_get_connection_string_v1 = kodi_addon_pvr_get_connection_string_v1;
  ifcToAddon->kodi_addon_pvr_get_drive_space_v1 = kodi_addon_pvr_get_drive_space_v1;
  ifcToAddon->kodi_addon_pvr_call_settings_menu_hook_v1 = kodi_addon_pvr_call_settings_menu_hook_v1;
  ifcToAddon->kodi_addon_pvr_get_channels_amount_v1 = kodi_addon_pvr_get_channels_amount_v1;
  ifcToAddon->kodi_addon_pvr_get_channels_v1 = kodi_addon_pvr_get_channels_v1;
  ifcToAddon->kodi_addon_pvr_get_channel_stream_properties_v1 =
      kodi_addon_pvr_get_channel_stream_properties_v1;
  ifcToAddon->kodi_addon_pvr_get_signal_status_v1 = kodi_addon_pvr_get_signal_status_v1;
  ifcToAddon->kodi_addon_pvr_get_descramble_info_v1 = kodi_addon_pvr_get_descramble_info_v1;
  ifcToAddon->kodi_addon_pvr_get_channel_groups_amount_v1 =
      kodi_addon_pvr_get_channel_groups_amount_v1;
  ifcToAddon->kodi_addon_pvr_get_channel_groups_v1 = kodi_addon_pvr_get_channel_groups_v1;
  ifcToAddon->kodi_addon_pvr_get_channel_group_members_v1 =
      kodi_addon_pvr_get_channel_group_members_v1;
  ifcToAddon->kodi_addon_pvr_delete_channel_v1 = kodi_addon_pvr_delete_channel_v1;
  ifcToAddon->kodi_addon_pvr_rename_channel_v1 = kodi_addon_pvr_rename_channel_v1;
  ifcToAddon->kodi_addon_pvr_open_dialog_channel_settings_v1 =
      kodi_addon_pvr_open_dialog_channel_settings_v1;
  ifcToAddon->kodi_addon_pvr_open_dialog_channel_add_v1 = kodi_addon_pvr_open_dialog_channel_add_v1;
  ifcToAddon->kodi_addon_pvr_open_dialog_channel_scan_v1 =
      kodi_addon_pvr_open_dialog_channel_scan_v1;
  ifcToAddon->kodi_addon_pvr_call_channel_menu_hook_v1 = kodi_addon_pvr_call_channel_menu_hook_v1;
  ifcToAddon->kodi_addon_pvr_get_epg_for_channel_v1 = kodi_addon_pvr_get_epg_for_channel_v1;
  ifcToAddon->kodi_addon_pvr_is_epg_tag_recordable_v1 = kodi_addon_pvr_is_epg_tag_recordable_v1;
  ifcToAddon->kodi_addon_pvr_is_epg_tag_playable_v1 = kodi_addon_pvr_is_epg_tag_playable_v1;
  ifcToAddon->kodi_addon_pvr_get_epg_tag_edl_v1 = kodi_addon_pvr_get_epg_tag_edl_v1;
  ifcToAddon->kodi_addon_pvr_get_epg_tag_stream_properties_v1 =
      kodi_addon_pvr_get_epg_tag_stream_properties_v1;
  ifcToAddon->kodi_addon_pvr_set_epg_max_past_days_v1 = kodi_addon_pvr_set_epg_max_past_days_v1;
  ifcToAddon->kodi_addon_pvr_set_epg_max_future_days_v1 = kodi_addon_pvr_set_epg_max_future_days_v1;
  ifcToAddon->kodi_addon_pvr_call_epg_menu_hook_v1 = kodi_addon_pvr_call_epg_menu_hook_v1;
  ifcToAddon->kodi_addon_pvr_get_recordings_amount_v1 = kodi_addon_pvr_get_recordings_amount_v1;
  ifcToAddon->kodi_addon_pvr_get_recordings_v1 = kodi_addon_pvr_get_recordings_v1;
  ifcToAddon->kodi_addon_pvr_delete_recording_v1 = kodi_addon_pvr_delete_recording_v1;
  ifcToAddon->kodi_addon_pvr_undelete_recording_v1 = kodi_addon_pvr_undelete_recording_v1;
  ifcToAddon->kodi_addon_pvr_delete_all_recordings_from_trash_v1 =
      kodi_addon_pvr_delete_all_recordings_from_trash_v1;
  ifcToAddon->kodi_addon_pvr_rename_recording_v1 = kodi_addon_pvr_rename_recording_v1;
  ifcToAddon->kodi_addon_pvr_set_recording_lifetime_v1 = kodi_addon_pvr_set_recording_lifetime_v1;
  ifcToAddon->kodi_addon_pvr_set_recording_play_count_v1 =
      kodi_addon_pvr_set_recording_play_count_v1;
  ifcToAddon->kodi_addon_pvr_set_recording_last_played_position_v1 =
      kodi_addon_pvr_set_recording_last_played_position_v1;
  ifcToAddon->kodi_addon_pvr_get_recording_last_played_position_v1 =
      kodi_addon_pvr_get_recording_last_played_position_v1;
  ifcToAddon->kodi_addon_pvr_get_recording_edl_v1 = kodi_addon_pvr_get_recording_edl_v1;
  ifcToAddon->kodi_addon_pvr_get_recording_size_v1 = kodi_addon_pvr_get_recording_size_v1;
  ifcToAddon->kodi_addon_pvr_get_recording_stream_properties_v1 =
      kodi_addon_pvr_get_recording_stream_properties_v1;
  ifcToAddon->kodi_addon_pvr_call_recording_menu_hook_v1 =
      kodi_addon_pvr_call_recording_menu_hook_v1;
  ifcToAddon->kodi_addon_pvr_get_timer_types_v1 = kodi_addon_pvr_get_timer_types_v1;
  ifcToAddon->kodi_addon_pvr_get_timers_amount_v1 = kodi_addon_pvr_get_timers_amount_v1;
  ifcToAddon->kodi_addon_pvr_get_timers_v1 = kodi_addon_pvr_get_timers_v1;
  ifcToAddon->kodi_addon_pvr_add_timer_v1 = kodi_addon_pvr_add_timer_v1;
  ifcToAddon->kodi_addon_pvr_delete_timer_v1 = kodi_addon_pvr_delete_timer_v1;
  ifcToAddon->kodi_addon_pvr_update_timer_v1 = kodi_addon_pvr_update_timer_v1;
  ifcToAddon->kodi_addon_pvr_call_timer_menu_hook_v1 = kodi_addon_pvr_call_timer_menu_hook_v1;
  ifcToAddon->kodi_addon_pvr_on_system_sleep_v1 = kodi_addon_pvr_on_system_sleep_v1;
  ifcToAddon->kodi_addon_pvr_on_system_wake_v1 = kodi_addon_pvr_on_system_wake_v1;
  ifcToAddon->kodi_addon_pvr_on_power_saving_activated_v1 =
      kodi_addon_pvr_on_power_saving_activated_v1;
  ifcToAddon->kodi_addon_pvr_on_power_saving_deactivated_v1 =
      kodi_addon_pvr_on_power_saving_deactivated_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_pvr_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_pvr_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_pvr_get_capabilities_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CAPABILITIES_V1)( KODI_ADDON_PVR_HDL hdl, struct PVR_ADDON_CAPABILITIES* capabilities);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_get_capabilities_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_ADDON_CAPABILITIES> msgChild_OUT_kodi_addon_pvr_get_capabilities_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_capabilities_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      struct PVR_ADDON_CAPABILITIES capabilities;
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_capabilities_v1(this, auto_gen_hdl, &capabilities);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_capabilities_v1(auto_gen_ret, &capabilities));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_backend_name_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_NAME_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
      // Tuple in:          typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_name_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_name_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_backend_name_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      std::string str;
      size_t mem_size = std::get<1>(t);
      str.reserve(mem_size);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_backend_name_v1(this, auto_gen_hdl, &str[0], mem_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_backend_name_v1(auto_gen_ret, str));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_backend_version_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_VERSION_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
      // Tuple in:          typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_version_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_version_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_backend_version_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      std::string str;
      size_t mem_size = std::get<1>(t);
      str.reserve(mem_size);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_backend_version_v1(this, auto_gen_hdl, &str[0], mem_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_backend_version_v1(auto_gen_ret, str));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_backend_hostname_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_HOSTNAME_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
      // Tuple in:          typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_hostname_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_hostname_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_backend_hostname_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      std::string str;
      size_t mem_size = std::get<1>(t);
      str.reserve(mem_size);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_backend_hostname_v1(this, auto_gen_hdl, &str[0], mem_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_backend_hostname_v1(auto_gen_ret, str));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_connection_string_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CONNECTION_STRING_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
      // Tuple in:          typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_connection_string_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_connection_string_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_connection_string_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      std::string str;
      size_t mem_size = std::get<1>(t);
      str.reserve(mem_size);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_connection_string_v1(this, auto_gen_hdl, &str[0], mem_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_connection_string_v1(auto_gen_ret, str));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_drive_space_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_DRIVE_SPACE_V1)( KODI_ADDON_PVR_HDL hdl, uint64_t* total, uint64_t* used);
      // Tuple in:          typedef std::tuple<PtrValue, uint64_t, uint64_t> msgChild__IN_kodi_addon_pvr_get_drive_space_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, uint64_t, uint64_t> msgChild_OUT_kodi_addon_pvr_get_drive_space_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_drive_space_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      uint64_t total = std::get<1>(t);
      uint64_t used = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_drive_space_v1(this, auto_gen_hdl, &total, &used);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_drive_space_v1(auto_gen_ret, total, used));
      return true;
    }
    case funcChild_kodi_addon_pvr_call_settings_menu_hook_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_SETTINGS_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK> msgChild__IN_kodi_addon_pvr_call_settings_menu_hook_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_settings_menu_hook_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_call_settings_menu_hook_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_MENUHOOK menuhook;
      std::get<1>(t).SetCStructure(&menuhook);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_call_settings_menu_hook_v1(this, auto_gen_hdl, &menuhook);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_call_settings_menu_hook_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channels_amount_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNELS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_channels_amount_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_channels_amount_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channels_amount_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int amount = std::get<1>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_channels_amount_v1(this, auto_gen_hdl, &amount);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_channels_amount_v1(auto_gen_ret, amount));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channels_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNELS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool radio);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_channels_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channels_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channels_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      bool radio = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_channels_v1(this, auto_gen_hdl, handle, radio);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_channels_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channel_stream_properties_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_CHANNEL, size_t> msgChild__IN_kodi_addon_pvr_get_channel_stream_properties_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_channel_stream_properties_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channel_stream_properties_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&channel);
      struct PVR_NAMED_VALUE properties;
      size_t properties_count = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_channel_stream_properties_v1(
          this, auto_gen_hdl, &channel, &properties, &properties_count);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_channel_stream_properties_v1(
                             auto_gen_ret, &properties, properties_count));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_signal_status_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_SIGNAL_STATUS_V1)( KODI_ADDON_PVR_HDL hdl, int channel_uid, struct PVR_SIGNAL_STATUS* signal_status);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_signal_status_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_SIGNAL_STATUS> msgChild_OUT_kodi_addon_pvr_get_signal_status_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_signal_status_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int channel_uid = std::get<1>(t);
      struct PVR_SIGNAL_STATUS signal_status;
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_signal_status_v1(this, auto_gen_hdl, channel_uid, &signal_status);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_signal_status_v1(auto_gen_ret, &signal_status));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_descramble_info_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_DESCRAMBLE_INFO_V1)( KODI_ADDON_PVR_HDL hdl, int channel_uid, struct PVR_DESCRAMBLE_INFO* descramble_info);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_descramble_info_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_DESCRAMBLE_INFO> msgChild_OUT_kodi_addon_pvr_get_descramble_info_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_descramble_info_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int channel_uid = std::get<1>(t);
      struct PVR_DESCRAMBLE_INFO descramble_info;
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_descramble_info_v1(this, auto_gen_hdl, channel_uid, &descramble_info);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_pvr_get_descramble_info_v1(auto_gen_ret, &descramble_info));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channel_groups_amount_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_channel_groups_amount_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_channel_groups_amount_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channel_groups_amount_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int amount = std::get<1>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_channel_groups_amount_v1(this, auto_gen_hdl, &amount);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_channel_groups_amount_v1(auto_gen_ret, amount));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channel_groups_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool radio);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_channel_groups_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channel_groups_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channel_groups_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      bool radio = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_channel_groups_v1(this, auto_gen_hdl, handle, radio);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_channel_groups_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_channel_group_members_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUP_MEMBERS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP* group);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP> msgChild__IN_kodi_addon_pvr_get_channel_group_members_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channel_group_members_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_channel_group_members_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL_GROUP group;
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      std::get<2>(t).SetCStructure(&group);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_channel_group_members_v1(this, auto_gen_hdl, handle, &group);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_channel_group_members_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_delete_channel_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_delete_channel_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_channel_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_delete_channel_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&channel);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_delete_channel_v1(this, auto_gen_hdl, &channel);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_delete_channel_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_rename_channel_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_RENAME_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_rename_channel_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_rename_channel_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_rename_channel_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&channel);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_rename_channel_v1(this, auto_gen_hdl, &channel);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_rename_channel_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_open_dialog_channel_settings_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SETTINGS_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_open_dialog_channel_settings_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_settings_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_open_dialog_channel_settings_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&channel);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_open_dialog_channel_settings_v1(this, auto_gen_hdl, &channel);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_open_dialog_channel_settings_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_open_dialog_channel_add_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_ADD_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_open_dialog_channel_add_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_add_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_open_dialog_channel_add_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&channel);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_open_dialog_channel_add_v1(this, auto_gen_hdl, &channel);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_open_dialog_channel_add_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_open_dialog_channel_scan_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SCAN_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_open_dialog_channel_scan_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_scan_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_open_dialog_channel_scan_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_open_dialog_channel_scan_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_open_dialog_channel_scan_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_call_channel_menu_hook_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_CHANNEL_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_CHANNEL* channel);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_call_channel_menu_hook_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_channel_menu_hook_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_call_channel_menu_hook_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_MENUHOOK menuhook;
      PVR_CHANNEL channel;
      std::get<1>(t).SetCStructure(&menuhook);
      std::get<2>(t).SetCStructure(&channel);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_call_channel_menu_hook_v1(this, auto_gen_hdl, &menuhook, &channel);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_call_channel_menu_hook_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_epg_for_channel_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_FOR_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, int channel_uid, time_t start, time_t end);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int, time_t, time_t> msgChild__IN_kodi_addon_pvr_get_epg_for_channel_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_epg_for_channel_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_epg_for_channel_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      int channel_uid = std::get<2>(t);
      time_t start = std::get<3>(t);
      time_t end = std::get<4>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_epg_for_channel_v1(
          this, auto_gen_hdl, handle, channel_uid, start, end);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_epg_for_channel_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_is_epg_tag_recordable_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_IS_EPG_TAG_RECORDABLE_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, bool* is_recordable);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_EPG_TAG, bool> msgChild__IN_kodi_addon_pvr_is_epg_tag_recordable_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, bool> msgChild_OUT_kodi_addon_pvr_is_epg_tag_recordable_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_is_epg_tag_recordable_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      EPG_TAG tag;
      std::get<1>(t).SetCStructure(&tag);
      bool is_recordable = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_is_epg_tag_recordable_v1(this, auto_gen_hdl, &tag, &is_recordable);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_pvr_is_epg_tag_recordable_v1(auto_gen_ret, is_recordable));
      return true;
    }
    case funcChild_kodi_addon_pvr_is_epg_tag_playable_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_IS_EPG_TAG_PLAYABLE_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, bool* is_playable);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_EPG_TAG, bool> msgChild__IN_kodi_addon_pvr_is_epg_tag_playable_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, bool> msgChild_OUT_kodi_addon_pvr_is_epg_tag_playable_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_is_epg_tag_playable_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      EPG_TAG tag;
      std::get<1>(t).SetCStructure(&tag);
      bool is_playable = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_is_epg_tag_playable_v1(this, auto_gen_hdl, &tag, &is_playable);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_is_epg_tag_playable_v1(auto_gen_ret, is_playable));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_epg_tag_edl_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_TAG_EDL_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, struct PVR_EDL_ENTRY edl[], size_t* size);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_EPG_TAG, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild__IN_kodi_addon_pvr_get_epg_tag_edl_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild_OUT_kodi_addon_pvr_get_epg_tag_edl_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_epg_tag_edl_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      EPG_TAG tag;
      std::get<1>(t).SetCStructure(&tag);
      std::vector<IFC_PVR_EDL_ENTRY>& ifc_edl = std::get<2>(t);
      size_t size = std::get<3>(t);
      std::vector<struct PVR_EDL_ENTRY> edl(size);
      for (size_t i = 0; i < size; ++i)
      {
        ifc_edl[i].SetCStructure(&edl[i]);
      }
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_epg_tag_edl_v1(this, auto_gen_hdl, &tag, edl.data(), &size);

      for (size_t i = 0; i < size; ++i)
      {
        ifc_edl[i] = IFC_PVR_EDL_ENTRY(&edl[i]);
      }
      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_epg_tag_edl_v1(auto_gen_ret, ifc_edl, size));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_epg_tag_stream_properties_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_TAG_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_EPG_TAG, size_t> msgChild__IN_kodi_addon_pvr_get_epg_tag_stream_properties_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_epg_tag_stream_properties_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_epg_tag_stream_properties_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      EPG_TAG tag;
      std::get<1>(t).SetCStructure(&tag);
      struct PVR_NAMED_VALUE properties;
      size_t properties_count = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_epg_tag_stream_properties_v1(
          this, auto_gen_hdl, &tag, &properties, &properties_count);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_epg_tag_stream_properties_v1(
                             auto_gen_ret, &properties, properties_count));
      return true;
    }
    case funcChild_kodi_addon_pvr_set_epg_max_past_days_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_EPG_MAX_PAST_DAYS_V1)( KODI_ADDON_PVR_HDL hdl, int past_days);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_set_epg_max_past_days_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_epg_max_past_days_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_set_epg_max_past_days_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int past_days = std::get<1>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_set_epg_max_past_days_v1(this, auto_gen_hdl, past_days);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_set_epg_max_past_days_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_set_epg_max_future_days_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_EPG_MAX_FUTURE_DAYS_V1)( KODI_ADDON_PVR_HDL hdl, int future_days);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_set_epg_max_future_days_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_epg_max_future_days_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_set_epg_max_future_days_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int future_days = std::get<1>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_set_epg_max_future_days_v1(this, auto_gen_hdl, future_days);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_set_epg_max_future_days_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_call_epg_menu_hook_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_EPG_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct EPG_TAG* tag);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_EPG_TAG> msgChild__IN_kodi_addon_pvr_call_epg_menu_hook_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_epg_menu_hook_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_call_epg_menu_hook_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_MENUHOOK menuhook;
      EPG_TAG tag;
      std::get<1>(t).SetCStructure(&menuhook);
      std::get<2>(t).SetCStructure(&tag);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_call_epg_menu_hook_v1(this, auto_gen_hdl, &menuhook, &tag);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_call_epg_menu_hook_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recordings_amount_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDINGS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, bool deleted, int* amount);
      // Tuple in:          typedef std::tuple<PtrValue, bool, int> msgChild__IN_kodi_addon_pvr_get_recordings_amount_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_recordings_amount_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recordings_amount_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool deleted = std::get<1>(t);
      int amount = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_recordings_amount_v1(this, auto_gen_hdl, deleted, &amount);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_recordings_amount_v1(auto_gen_ret, amount));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recordings_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDINGS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool deleted);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_recordings_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_recordings_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recordings_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      bool deleted = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_recordings_v1(this, auto_gen_hdl, handle, deleted);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_recordings_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_delete_recording_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_delete_recording_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_recording_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_delete_recording_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_delete_recording_v1(this, auto_gen_hdl, &recording);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_delete_recording_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_undelete_recording_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_UNDELETE_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_undelete_recording_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_undelete_recording_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_undelete_recording_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_undelete_recording_v1(this, auto_gen_hdl, &recording);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_undelete_recording_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_delete_all_recordings_from_trash_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_ALL_RECORDINGS_FROM_TRASH_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_delete_all_recordings_from_trash_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_all_recordings_from_trash_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_delete_all_recordings_from_trash_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_delete_all_recordings_from_trash_v1(this, auto_gen_hdl);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_delete_all_recordings_from_trash_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_rename_recording_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_RENAME_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_rename_recording_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_rename_recording_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_rename_recording_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_rename_recording_v1(this, auto_gen_hdl, &recording);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_rename_recording_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_set_recording_lifetime_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_LIFETIME_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_set_recording_lifetime_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_lifetime_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_set_recording_lifetime_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_set_recording_lifetime_v1(this, auto_gen_hdl, &recording);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_set_recording_lifetime_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_set_recording_play_count_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_PLAY_COUNT_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int count);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_set_recording_play_count_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_play_count_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_set_recording_play_count_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      int count = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_set_recording_play_count_v1(this, auto_gen_hdl, &recording, count);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_set_recording_play_count_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_set_recording_last_played_position_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_LAST_PLAYED_POSITION_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int last_played_position);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_set_recording_last_played_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_last_played_position_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_set_recording_last_played_position_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      int last_played_position = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_set_recording_last_played_position_v1(
          this, auto_gen_hdl, &recording, last_played_position);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_pvr_set_recording_last_played_position_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recording_last_played_position_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_LAST_PLAYED_POSITION_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int* last_played_position);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_get_recording_last_played_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_recording_last_played_position_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recording_last_played_position_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      int last_played_position = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_recording_last_played_position_v1(
          this, auto_gen_hdl, &recording, &last_played_position);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_recording_last_played_position_v1(
                             auto_gen_ret, last_played_position));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recording_edl_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_EDL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, struct PVR_EDL_ENTRY edl[], size_t* size);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild__IN_kodi_addon_pvr_get_recording_edl_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild_OUT_kodi_addon_pvr_get_recording_edl_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recording_edl_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      std::vector<IFC_PVR_EDL_ENTRY>& ifc_edl = std::get<2>(t);
      size_t size = std::get<3>(t);
      std::vector<struct PVR_EDL_ENTRY> edl(size);
      for (size_t i = 0; i < size; ++i)
      {
        ifc_edl[i].SetCStructure(&edl[i]);
      }
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_recording_edl_v1(this, auto_gen_hdl, &recording, edl.data(), &size);

      for (size_t i = 0; i < size; ++i)
      {
        ifc_edl[i] = IFC_PVR_EDL_ENTRY(&edl[i]);
      }
      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_pvr_get_recording_edl_v1(auto_gen_ret, ifc_edl, size));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recording_size_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_SIZE_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int64_t* size);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int64_t> msgChild__IN_kodi_addon_pvr_get_recording_size_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int64_t> msgChild_OUT_kodi_addon_pvr_get_recording_size_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recording_size_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      int64_t size = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_recording_size_v1(this, auto_gen_hdl, &recording, &size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_recording_size_v1(auto_gen_ret, size));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_recording_stream_properties_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_RECORDING, size_t> msgChild__IN_kodi_addon_pvr_get_recording_stream_properties_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_recording_stream_properties_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_recording_stream_properties_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&recording);
      struct PVR_NAMED_VALUE properties;
      size_t properties_count = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_recording_stream_properties_v1(
          this, auto_gen_hdl, &recording, &properties, &properties_count);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_recording_stream_properties_v1(
                             auto_gen_ret, &properties, properties_count));
      return true;
    }
    case funcChild_kodi_addon_pvr_call_recording_menu_hook_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_RECORDING_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_RECORDING* recording);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_call_recording_menu_hook_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_recording_menu_hook_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_call_recording_menu_hook_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_MENUHOOK menuhook;
      PVR_RECORDING recording;
      std::get<1>(t).SetCStructure(&menuhook);
      std::get<2>(t).SetCStructure(&recording);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_call_recording_menu_hook_v1(this, auto_gen_hdl, &menuhook, &recording);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_call_recording_menu_hook_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_timer_types_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMER_TYPES_V1)( KODI_ADDON_PVR_HDL hdl, struct PVR_TIMER_TYPE types[], size_t* types_count);
      // Tuple in:          typedef std::tuple<PtrValue, std::vector<IFC_PVR_TIMER_TYPE>, size_t> msgChild__IN_kodi_addon_pvr_get_timer_types_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_TIMER_TYPE>, size_t> msgChild_OUT_kodi_addon_pvr_get_timer_types_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_timer_types_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      std::vector<IFC_PVR_TIMER_TYPE>& ifc_types = std::get<1>(t);
      size_t types_count = std::get<2>(t);
      std::vector<struct PVR_TIMER_TYPE> types(types_count);
      for (size_t i = 0; i < types_count; ++i)
      {
        ifc_types[i].SetCStructure(&types[i]);
      }
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_timer_types_v1(this, auto_gen_hdl, types.data(), &types_count);

      for (size_t i = 0; i < types_count; ++i)
      {
        ifc_types[i] = IFC_PVR_TIMER_TYPE(&types[i]);
      }
      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_timer_types_v1(auto_gen_ret, ifc_types,
                                                                        types_count));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_timers_amount_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMERS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_timers_amount_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_timers_amount_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_timers_amount_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int amount = std::get<1>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_get_timers_amount_v1(this, auto_gen_hdl, &amount);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_timers_amount_v1(auto_gen_ret, amount));
      return true;
    }
    case funcChild_kodi_addon_pvr_get_timers_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMERS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_pvr_get_timers_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_timers_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_get_timers_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_PVR_TRANSFER_HDL handle =
          reinterpret_cast<KODI_ADDON_PVR_TRANSFER_HDL>(std::get<1>(t));
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_get_timers_v1(this, auto_gen_hdl, handle);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_get_timers_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_add_timer_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ADD_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_add_timer_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_add_timer_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_add_timer_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_TIMER timer;
      std::get<1>(t).SetCStructure(&timer);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_add_timer_v1(this, auto_gen_hdl, &timer);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_add_timer_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_delete_timer_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer, bool force_delete);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_TIMER, bool> msgChild__IN_kodi_addon_pvr_delete_timer_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_timer_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_delete_timer_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_TIMER timer;
      std::get<1>(t).SetCStructure(&timer);
      bool force_delete = std::get<2>(t);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_delete_timer_v1(this, auto_gen_hdl, &timer, force_delete);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_delete_timer_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_update_timer_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_UPDATE_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_update_timer_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_update_timer_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_update_timer_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_TIMER timer;
      std::get<1>(t).SetCStructure(&timer);
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_update_timer_v1(this, auto_gen_hdl, &timer);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_update_timer_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_call_timer_menu_hook_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_TIMER_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_TIMER* timer);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_call_timer_menu_hook_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_timer_menu_hook_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_call_timer_menu_hook_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      PVR_MENUHOOK menuhook;
      PVR_TIMER timer;
      std::get<1>(t).SetCStructure(&menuhook);
      std::get<2>(t).SetCStructure(&timer);
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_call_timer_menu_hook_v1(this, auto_gen_hdl, &menuhook, &timer);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_call_timer_menu_hook_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_on_system_sleep_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_SYSTEM_SLEEP_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_system_sleep_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_system_sleep_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_on_system_sleep_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_on_system_sleep_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_on_system_sleep_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_on_system_wake_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_SYSTEM_WAKE_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_system_wake_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_system_wake_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_on_system_wake_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_on_system_wake_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_on_system_wake_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_on_power_saving_activated_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_POWER_SAVING_ACTIVATED_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_power_saving_activated_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_power_saving_activated_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_on_power_saving_activated_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret = kodi_addon_pvr_on_power_saving_activated_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_on_power_saving_activated_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_pvr_on_power_saving_deactivated_v1:
    {
      // Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_POWER_SAVING_DEACTIVATED_V1)( KODI_ADDON_PVR_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_power_saving_deactivated_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_power_saving_deactivated_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_pvr_on_power_saving_deactivated_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      enum PVR_ERROR auto_gen_ret =
          kodi_addon_pvr_on_power_saving_deactivated_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_pvr_on_power_saving_deactivated_v1(auto_gen_ret));
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_capabilities_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    struct PVR_ADDON_CAPABILITIES* capabilities) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_capabilities)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_capabilities(union_data->hdl, capabilities);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_backend_name_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_backend_name)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_backend_name(union_data->hdl, str, mem_size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_backend_version_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_backend_version)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_backend_version(union_data->hdl, str, mem_size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_backend_hostname_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_backend_hostname)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_backend_hostname(union_data->hdl, str, mem_size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_connection_string_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_connection_string)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_connection_string(union_data->hdl, str, mem_size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_drive_space_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, uint64_t* total, uint64_t* used) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_drive_space)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_drive_space(union_data->hdl, total, used);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_call_settings_menu_hook_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_MENUHOOK* menuhook) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.call_settings_menu_hook)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.call_settings_menu_hook(union_data->hdl, menuhook);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channels_amount_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, int* amount) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channels_amount)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_channels_amount(union_data->hdl, amount);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channels_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle,
    bool radio) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channels)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_channels(union_data->hdl, handle, radio);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channel_stream_properties_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_CHANNEL* channel,
    struct PVR_NAMED_VALUE* properties,
    size_t* properties_count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channel_stream_properties)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_channel_stream_properties(
        union_data->hdl, channel, properties, properties_count);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_signal_status_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    int channel_uid,
    struct PVR_SIGNAL_STATUS* signal_status) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_signal_status)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_signal_status(
        union_data->hdl, channel_uid, signal_status);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_descramble_info_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    int channel_uid,
    struct PVR_DESCRAMBLE_INFO* descramble_info) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_descramble_info)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_descramble_info(
        union_data->hdl, channel_uid, descramble_info);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channel_groups_amount_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, int* amount) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channel_groups_amount)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_channel_groups_amount(union_data->hdl, amount);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channel_groups_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle,
    bool radio) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channel_groups)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_channel_groups(union_data->hdl, handle, radio);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_channel_group_members_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle,
    const struct PVR_CHANNEL_GROUP* group) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_channel_group_members)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_channel_group_members(union_data->hdl,
                                                                                 handle, group);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_delete_channel_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_CHANNEL* channel) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.delete_channel)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.delete_channel(union_data->hdl, channel);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_rename_channel_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_CHANNEL* channel) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.rename_channel)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.rename_channel(union_data->hdl, channel);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_open_dialog_channel_settings_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_CHANNEL* channel) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.open_dialog_channel_settings)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.open_dialog_channel_settings(union_data->hdl, channel);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_open_dialog_channel_add_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_CHANNEL* channel) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.open_dialog_channel_add)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.open_dialog_channel_add(union_data->hdl, channel);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_open_dialog_channel_scan_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.open_dialog_channel_scan)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.open_dialog_channel_scan(union_data->hdl);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_call_channel_menu_hook_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_MENUHOOK* menuhook,
    const struct PVR_CHANNEL* channel) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.call_channel_menu_hook)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.call_channel_menu_hook(union_data->hdl,
                                                                              menuhook, channel);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_epg_for_channel_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle,
    int channel_uid,
    time_t start,
    time_t end) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_epg_for_channel)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_epg_for_channel(union_data->hdl, handle,
                                                                           channel_uid, start, end);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_is_epg_tag_recordable_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct EPG_TAG* tag,
    bool* is_recordable) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.is_epg_tag_recordable)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.is_epg_tag_recordable(union_data->hdl, tag,
                                                                             is_recordable);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_is_epg_tag_playable_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct EPG_TAG* tag,
    bool* is_playable) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.is_epg_tag_playable)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.is_epg_tag_playable(union_data->hdl, tag, is_playable);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_epg_tag_edl_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct EPG_TAG* tag,
    struct PVR_EDL_ENTRY edl[],
    size_t* size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_epg_tag_edl)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_epg_tag_edl(union_data->hdl, tag, edl, size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_epg_tag_stream_properties_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct EPG_TAG* tag,
    struct PVR_NAMED_VALUE* properties,
    size_t* properties_count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_epg_tag_stream_properties)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_epg_tag_stream_properties(
        union_data->hdl, tag, properties, properties_count);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_set_epg_max_past_days_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, int past_days) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.set_epg_max_past_days)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.set_epg_max_past_days(union_data->hdl, past_days);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_set_epg_max_future_days_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, int future_days) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.set_epg_max_future_days)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.set_epg_max_future_days(union_data->hdl, future_days);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_call_epg_menu_hook_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_MENUHOOK* menuhook,
    const struct EPG_TAG* tag) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.call_epg_menu_hook)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.call_epg_menu_hook(union_data->hdl, menuhook, tag);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recordings_amount_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, bool deleted, int* amount) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recordings_amount)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_recordings_amount(union_data->hdl, deleted, amount);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recordings_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle,
    bool deleted) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recordings)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_recordings(union_data->hdl, handle, deleted);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_delete_recording_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.delete_recording)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.delete_recording(union_data->hdl, recording);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_undelete_recording_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.undelete_recording)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.undelete_recording(union_data->hdl, recording);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_delete_all_recordings_from_trash_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.delete_all_recordings_from_trash)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.delete_all_recordings_from_trash(union_data->hdl);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_rename_recording_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.rename_recording)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.rename_recording(union_data->hdl, recording);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_set_recording_lifetime_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.set_recording_lifetime)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.set_recording_lifetime(union_data->hdl, recording);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_set_recording_play_count_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    int count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.set_recording_play_count)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.set_recording_play_count(union_data->hdl,
                                                                                recording, count);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_set_recording_last_played_position_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    int last_played_position) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.set_recording_last_played_position)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.set_recording_last_played_position(
        union_data->hdl, recording, last_played_position);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recording_last_played_position_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    int* last_played_position) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recording_last_played_position)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_recording_last_played_position(
        union_data->hdl, recording, last_played_position);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recording_edl_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    struct PVR_EDL_ENTRY edl[],
    size_t* size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recording_edl)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_recording_edl(union_data->hdl, recording,
                                                                         edl, size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recording_size_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    int64_t* size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recording_size)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_recording_size(union_data->hdl, recording, size);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_recording_stream_properties_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_RECORDING* recording,
    struct PVR_NAMED_VALUE* properties,
    size_t* properties_count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_recording_stream_properties)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_recording_stream_properties(
        union_data->hdl, recording, properties, properties_count);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_call_recording_menu_hook_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_MENUHOOK* menuhook,
    const struct PVR_RECORDING* recording) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.call_recording_menu_hook)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.call_recording_menu_hook(
        union_data->hdl, menuhook, recording);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_timer_types_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    struct PVR_TIMER_TYPE types[],
    size_t* types_count) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_timer_types)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.get_timer_types(union_data->hdl, types, types_count);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_timers_amount_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, int* amount) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_timers_amount)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_timers_amount(union_data->hdl, amount);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_get_timers_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    KODI_ADDON_PVR_TRANSFER_HDL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.get_timers)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.get_timers(union_data->hdl, handle);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_add_timer_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.add_timer)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.add_timer(union_data->hdl, timer);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_delete_timer_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_TIMER* timer,
    bool force_delete) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.delete_timer)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.delete_timer(union_data->hdl, timer, force_delete);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_update_timer_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.update_timer)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.update_timer(union_data->hdl, timer);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_call_timer_menu_hook_v1(
    void* thisClassHdl,
    KODI_ADDON_PVR_HDL hdl,
    const struct PVR_MENUHOOK* menuhook,
    const struct PVR_TIMER* timer) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.call_timer_menu_hook)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_pvr.v1.call_timer_menu_hook(union_data->hdl, menuhook, timer);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_on_system_sleep_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.on_system_sleep)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.on_system_sleep(union_data->hdl);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_on_system_wake_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.on_system_wake)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.on_system_wake(union_data->hdl);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_on_power_saving_activated_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.on_power_saving_activated)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.on_power_saving_activated(union_data->hdl);
  }
  return auto_gen_ret;
}

enum PVR_ERROR CHdl_kodi_addoninstance_pvr_h::kodi_addon_pvr_on_power_saving_deactivated_v1(
    void* thisClassHdl, KODI_ADDON_PVR_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_pvr_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return PVR_ERROR_NO_ERROR;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum PVR_ERROR auto_gen_ret = PVR_ERROR_NO_ERROR;
  if (union_data->types.kodi_addon_pvr.v1.on_power_saving_deactivated)
  {
    auto_gen_ret = union_data->types.kodi_addon_pvr.v1.on_power_saving_deactivated(union_data->hdl);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_future_days(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_future_days(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_get_epg_max_future_days_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_addon_pvr_get_epg_max_future_days_v1; /* Autogenerated */

  if (hdl == nullptr)
    return -1;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_get_epg_max_future_days_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_get_epg_max_future_days_v1, in,
            out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_pvr_get_epg_max_future_days_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  return auto_gen_group.kodi_addon_pvr_get_epg_max_future_days_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_past_days(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_past_days(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_get_epg_max_past_days_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_addon_pvr_get_epg_max_past_days_v1; /* Autogenerated */

  if (hdl == nullptr)
    return -1;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_get_epg_max_past_days_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_get_epg_max_past_days_v1, in,
            out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_pvr_get_epg_max_past_days_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  return auto_gen_group.kodi_addon_pvr_get_epg_max_past_days_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_add_menu_hook(KODI_OWN_HDL hdl, const struct PVR_MENUHOOK* hook)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_add_menu_hook(KODI_OWN_HDL hdl, const struct PVR_MENUHOOK* hook) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK> msgParent__IN_kodi_addon_pvr_add_menu_hook_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_add_menu_hook_v1; /* Autogenerated */

  if (hdl == nullptr || hook == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_add_menu_hook_v1(PtrValue(hdl), hook));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_add_menu_hook_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_add_menu_hook_v1(auto_gen_group.thisClassHdl, hdl, hook);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_recording_notification(KODI_OWN_HDL hdl,
                                                           const char* name,
                                                           const char* fileName,
                                                           bool on)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_recording_notification(KODI_OWN_HDL hdl, const char* name, const char* fileName, bool on) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, std::string, bool> msgParent__IN_kodi_addon_pvr_recording_notification_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_recording_notification_v1; /* Autogenerated */

  if (hdl == nullptr || name == nullptr || fileName == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_recording_notification_v1(PtrValue(hdl), name,
                                                                             fileName, on));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_recording_notification_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_recording_notification_v1(auto_gen_group.thisClassHdl, hdl, name,
                                                          fileName, on);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_connection_state_change(KODI_OWN_HDL hdl,
                                                            const char* strConnectionString,
                                                            enum PVR_CONNECTION_STATE newState,
                                                            const char* strMessage)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_connection_state_change(KODI_OWN_HDL hdl, const char* strConnectionString, enum PVR_CONNECTION_STATE newState, const char* strMessage) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, PVR_CONNECTION_STATE, std::string> msgParent__IN_kodi_addon_pvr_connection_state_change_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_connection_state_change_v1; /* Autogenerated */

  if (hdl == nullptr || strConnectionString == nullptr || strMessage == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_connection_state_change_v1(
                          PtrValue(hdl), strConnectionString, newState, strMessage));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_connection_state_change_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_connection_state_change_v1(
      auto_gen_group.thisClassHdl, hdl, strConnectionString, newState, strMessage);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_epg_event_state_change(KODI_OWN_HDL hdl,
                                                           struct EPG_TAG* tag,
                                                           enum EPG_EVENT_STATE newState)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_epg_event_state_change(KODI_OWN_HDL hdl, struct EPG_TAG* tag, enum EPG_EVENT_STATE newState) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, EPG_EVENT_STATE> msgParent__IN_kodi_addon_pvr_epg_event_state_change_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<IFC_EPG_TAG> msgParent_OUT_kodi_addon_pvr_epg_event_state_change_v1; /* Autogenerated */

  if (hdl == nullptr || tag == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgParent__IN_kodi_addon_pvr_epg_event_state_change_v1(PtrValue(hdl), newState));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_epg_event_state_change_v1, in,
            out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_pvr_epg_event_state_change_v1 t = ident.get().as<decltype(t)>();

    std::get<0>(t).SetCStructure(tag);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_epg_event_state_change_v1(auto_gen_group.thisClassHdl, hdl, tag,
                                                          newState);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_entry(KODI_OWN_HDL hdl,
                                                           const KODI_ADDON_PVR_TRANSFER_HDL handle,
                                                           const struct PVR_CHANNEL* chan)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_entry( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL* chan) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL> msgParent__IN_kodi_addon_pvr_transfer_channel_entry_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_entry_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || chan == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_channel_entry_v1(
                          PtrValue(hdl), PtrValue(handle), chan));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_channel_entry_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_channel_entry_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                          chan);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group(KODI_OWN_HDL hdl,
                                                           const KODI_ADDON_PVR_TRANSFER_HDL handle,
                                                           const struct PVR_CHANNEL_GROUP* group)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP* group) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP> msgParent__IN_kodi_addon_pvr_transfer_channel_group_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_group_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || group == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_channel_group_v1(
                          PtrValue(hdl), PtrValue(handle), group));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_channel_group_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_channel_group_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                          group);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group_member(
    KODI_OWN_HDL hdl,
    const KODI_ADDON_PVR_TRANSFER_HDL handle,
    const struct PVR_CHANNEL_GROUP_MEMBER* member)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group_member( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP_MEMBER* member) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP_MEMBER> msgParent__IN_kodi_addon_pvr_transfer_channel_group_member_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_group_member_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || member == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_channel_group_member_v1(
                          PtrValue(hdl), PtrValue(handle), member));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_channel_group_member_v1,
        in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_channel_group_member_v1(auto_gen_group.thisClassHdl, hdl,
                                                                 handle, member);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_epg_entry(KODI_OWN_HDL hdl,
                                                       const KODI_ADDON_PVR_TRANSFER_HDL handle,
                                                       const struct EPG_TAG* epgentry)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_epg_entry(KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct EPG_TAG* epgentry) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_EPG_TAG> msgParent__IN_kodi_addon_pvr_transfer_epg_entry_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_epg_entry_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || epgentry == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_epg_entry_v1(
                          PtrValue(hdl), PtrValue(handle), epgentry));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_epg_entry_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_epg_entry_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                      epgentry);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_recording_entry(
    KODI_OWN_HDL hdl,
    const KODI_ADDON_PVR_TRANSFER_HDL handle,
    const struct PVR_RECORDING* recording)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_recording_entry( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_RECORDING* recording) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_RECORDING> msgParent__IN_kodi_addon_pvr_transfer_recording_entry_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_recording_entry_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || recording == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_recording_entry_v1(
                          PtrValue(hdl), PtrValue(handle), recording));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_recording_entry_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_recording_entry_v1(auto_gen_group.thisClassHdl, hdl,
                                                            handle, recording);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_timer_entry(KODI_OWN_HDL hdl,
                                                         const KODI_ADDON_PVR_TRANSFER_HDL handle,
                                                         const struct PVR_TIMER* timer)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_timer_entry(KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_TIMER* timer) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_PVR_TIMER> msgParent__IN_kodi_addon_pvr_transfer_timer_entry_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_timer_entry_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || timer == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_transfer_timer_entry_v1(
                          PtrValue(hdl), PtrValue(handle), timer));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_transfer_timer_entry_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_transfer_timer_entry_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                        timer);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_update(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_channel_update_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_channel_update_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_trigger_channel_update_v1(PtrValue(hdl)));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_trigger_channel_update_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_trigger_channel_update_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_groups_update(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_groups_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_channel_groups_update_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_channel_groups_update_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_trigger_channel_groups_update_v1(PtrValue(hdl)));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_trigger_channel_groups_update_v1,
        in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_trigger_channel_groups_update_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_epg_update(KODI_OWN_HDL hdl, unsigned int iChannelUid)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_epg_update(KODI_OWN_HDL hdl, unsigned int iChannelUid) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, unsigned int> msgParent__IN_kodi_addon_pvr_trigger_epg_update_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_epg_update_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in,
                  msgParent__IN_kodi_addon_pvr_trigger_epg_update_v1(PtrValue(hdl), iChannelUid));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_trigger_epg_update_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_trigger_epg_update_v1(auto_gen_group.thisClassHdl, hdl,
                                                      iChannelUid);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_recording_update(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_recording_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_recording_update_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_recording_update_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_trigger_recording_update_v1(PtrValue(hdl)));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_trigger_recording_update_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_trigger_recording_update_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_timer_update(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_timer_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_timer_update_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_timer_update_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_pvr_trigger_timer_update_v1(PtrValue(hdl)));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_pvr_h, funcParent_kodi_addon_pvr_trigger_timer_update_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_pvr_h;
  auto_gen_group.kodi_addon_pvr_trigger_timer_update_v1(auto_gen_group.thisClassHdl, hdl);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
