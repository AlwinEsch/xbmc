/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "vfs.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_vfs_h::InitDirect(directFuncToAddon_addoninstance_vfs_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_vfs_create_v1 = kodi_addon_vfs_create_v1;
  ifcToAddon->kodi_addon_vfs_destroy_v1 = kodi_addon_vfs_destroy_v1;
  ifcToAddon->kodi_addon_vfs_file_open_v1 = kodi_addon_vfs_file_open_v1;
  ifcToAddon->kodi_addon_vfs_file_open_for_write_v1 = kodi_addon_vfs_file_open_for_write_v1;
  ifcToAddon->kodi_addon_vfs_file_close_v1 = kodi_addon_vfs_file_close_v1;
  ifcToAddon->kodi_addon_vfs_file_read_v1 = kodi_addon_vfs_file_read_v1;
  ifcToAddon->kodi_addon_vfs_file_write_v1 = kodi_addon_vfs_file_write_v1;
  ifcToAddon->kodi_addon_vfs_file_seek_v1 = kodi_addon_vfs_file_seek_v1;
  ifcToAddon->kodi_addon_vfs_file_truncate_v1 = kodi_addon_vfs_file_truncate_v1;
  ifcToAddon->kodi_addon_vfs_file_get_length_v1 = kodi_addon_vfs_file_get_length_v1;
  ifcToAddon->kodi_addon_vfs_file_get_position_v1 = kodi_addon_vfs_file_get_position_v1;
  ifcToAddon->kodi_addon_vfs_file_get_chunk_size_v1 = kodi_addon_vfs_file_get_chunk_size_v1;
  ifcToAddon->kodi_addon_vfs_file_io_control_get_seek_possible_v1 =
      kodi_addon_vfs_file_io_control_get_seek_possible_v1;
  ifcToAddon->kodi_addon_vfs_file_io_control_get_cache_status_v1 =
      kodi_addon_vfs_file_io_control_get_cache_status_v1;
  ifcToAddon->kodi_addon_vfs_file_io_control_set_cache_rate_v1 =
      kodi_addon_vfs_file_io_control_set_cache_rate_v1;
  ifcToAddon->kodi_addon_vfs_file_io_control_set_retry_v1 =
      kodi_addon_vfs_file_io_control_set_retry_v1;
  ifcToAddon->kodi_addon_vfs_stat_v1 = kodi_addon_vfs_stat_v1;
  ifcToAddon->kodi_addon_vfs_exists_v1 = kodi_addon_vfs_exists_v1;
  ifcToAddon->kodi_addon_vfs_clear_out_idle_v1 = kodi_addon_vfs_clear_out_idle_v1;
  ifcToAddon->kodi_addon_vfs_disconnect_all_v1 = kodi_addon_vfs_disconnect_all_v1;
  ifcToAddon->kodi_addon_vfs_delete_it_v1 = kodi_addon_vfs_delete_it_v1;
  ifcToAddon->kodi_addon_vfs_rename_v1 = kodi_addon_vfs_rename_v1;
  ifcToAddon->kodi_addon_vfs_directory_exists_v1 = kodi_addon_vfs_directory_exists_v1;
  ifcToAddon->kodi_addon_vfs_directory_remove_v1 = kodi_addon_vfs_directory_remove_v1;
  ifcToAddon->kodi_addon_vfs_directory_create_v1 = kodi_addon_vfs_directory_create_v1;
  ifcToAddon->kodi_addon_vfs_directory_get_v1 = kodi_addon_vfs_directory_get_v1;
  ifcToAddon->kodi_addon_vfs_directory_contains_files_v1 =
      kodi_addon_vfs_directory_contains_files_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_vfs_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_vfs_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_vfs_create_v1:
    {
      // Original API call: typedef KODI_ADDON_VFS_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_VFS_HDL auto_gen_ret = kodi_addon_vfs_create_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_vfs_destroy_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DESTROY_V1)(KODI_ADDON_VFS_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_destroy_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_vfs_destroy_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_vfs_file_open_v1:
    {
      // Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_file_open_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_open_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      KODI_VFS_FILE_HDL auto_gen_ret = kodi_addon_vfs_file_open_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_open_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_open_for_write_v1:
    {
      // Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, bool overwrite);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, bool> msgChild__IN_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_open_for_write_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool overwrite = std::get<2>(t);
      KODI_VFS_FILE_HDL auto_gen_ret =
          kodi_addon_vfs_file_open_for_write_v1(this, auto_gen_hdl, &url, overwrite);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_vfs_file_open_for_write_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_close_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_CLOSE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_close_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_close_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_close_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      bool auto_gen_ret = kodi_addon_vfs_file_close_v1(this, auto_gen_hdl, context);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_close_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_read_v1:
    {
      // Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_READ_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, uint8_t* buffer, size_t buf_size);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, size_t> msgChild__IN_kodi_addon_vfs_file_read_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<ssize_t, std::vector<uint8_t>> msgChild_OUT_kodi_addon_vfs_file_read_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_read_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      size_t buf_size = std::get<2>(t);
      std::vector<uint8_t> buffer(buf_size);
      ssize_t auto_gen_ret =
          kodi_addon_vfs_file_read_v1(this, auto_gen_hdl, context, buffer.data(), buf_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_read_v1(auto_gen_ret, buffer));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_write_v1:
    {
      // Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_WRITE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, const uint8_t* buffer, size_t buf_size);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::vector<uint8_t>, size_t> msgChild__IN_kodi_addon_vfs_file_write_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<ssize_t> msgChild_OUT_kodi_addon_vfs_file_write_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_write_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      const std::vector<uint8_t>& buffer = std::get<2>(t);
      size_t buf_size = std::get<3>(t);
      ssize_t auto_gen_ret =
          kodi_addon_vfs_file_write_v1(this, auto_gen_hdl, context, buffer.data(), buf_size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_write_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_seek_v1:
    {
      // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_SEEK_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t position, int whence);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int64_t, int> msgChild__IN_kodi_addon_vfs_file_seek_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_seek_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_seek_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      int64_t position = std::get<2>(t);
      int whence = std::get<3>(t);
      int64_t auto_gen_ret =
          kodi_addon_vfs_file_seek_v1(this, auto_gen_hdl, context, position, whence);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_seek_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_truncate_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_TRUNCATE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t size);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int64_t> msgChild__IN_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_truncate_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      int64_t size = std::get<2>(t);
      int auto_gen_ret = kodi_addon_vfs_file_truncate_v1(this, auto_gen_hdl, context, size);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_truncate_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_get_length_v1:
    {
      // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_LENGTH_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_get_length_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      int64_t auto_gen_ret = kodi_addon_vfs_file_get_length_v1(this, auto_gen_hdl, context);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_get_length_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_get_position_v1:
    {
      // Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_POSITION_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_get_position_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      int64_t auto_gen_ret = kodi_addon_vfs_file_get_position_v1(this, auto_gen_hdl, context);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_get_position_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_get_chunk_size_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_get_chunk_size_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      int auto_gen_ret = kodi_addon_vfs_file_get_chunk_size_v1(this, auto_gen_hdl, context);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_get_chunk_size_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_io_control_get_seek_possible_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_io_control_get_seek_possible_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      bool auto_gen_ret =
          kodi_addon_vfs_file_io_control_get_seek_possible_v1(this, auto_gen_hdl, context);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_vfs_file_io_control_get_seek_possible_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_io_control_get_cache_status_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, struct VFS_CACHE_STATUS* status);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, IFC_VFS_CACHE_STATUS> msgChild_OUT_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_io_control_get_cache_status_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      struct VFS_CACHE_STATUS status;
      bool auto_gen_ret =
          kodi_addon_vfs_file_io_control_get_cache_status_v1(this, auto_gen_hdl, context, &status);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_io_control_get_cache_status_v1(
                             auto_gen_ret, &status));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_io_control_set_cache_rate_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, unsigned int rate);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, unsigned int> msgChild__IN_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_io_control_set_cache_rate_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      unsigned int rate = std::get<2>(t);
      bool auto_gen_ret =
          kodi_addon_vfs_file_io_control_set_cache_rate_v1(this, auto_gen_hdl, context, rate);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_vfs_file_io_control_set_cache_rate_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_file_io_control_set_retry_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, bool retry);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_file_io_control_set_retry_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_VFS_FILE_HDL context = reinterpret_cast<KODI_VFS_FILE_HDL>(std::get<1>(t));
      bool retry = std::get<2>(t);
      bool auto_gen_ret =
          kodi_addon_vfs_file_io_control_set_retry_v1(this, auto_gen_hdl, context, retry);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_file_io_control_set_retry_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_stat_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_STAT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_STAT_STRUCTURE* buffer);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_stat_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int, IFC_VFS_STAT_STRUCTURE> msgChild_OUT_kodi_addon_vfs_stat_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_stat_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      struct VFS_STAT_STRUCTURE buffer;
      int auto_gen_ret = kodi_addon_vfs_stat_v1(this, auto_gen_hdl, &url, &buffer);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_stat_v1(auto_gen_ret, &buffer));
      return true;
    }
    case funcChild_kodi_addon_vfs_exists_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_exists_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_exists_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_exists_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool auto_gen_ret = kodi_addon_vfs_exists_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_exists_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_clear_out_idle_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1)(KODI_ADDON_VFS_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_clear_out_idle_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_vfs_clear_out_idle_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_vfs_disconnect_all_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DISCONNECT_ALL_V1)(KODI_ADDON_VFS_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_disconnect_all_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_vfs_disconnect_all_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_vfs_delete_it_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DELETE_IT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_delete_it_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_delete_it_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_delete_it_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool auto_gen_ret = kodi_addon_vfs_delete_it_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_delete_it_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_rename_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_RENAME_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, const struct VFS_URL* url2);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_rename_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_rename_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_rename_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      VFS_URL url2;
      std::get<1>(t).SetCStructure(&url);
      std::get<2>(t).SetCStructure(&url2);
      bool auto_gen_ret = kodi_addon_vfs_rename_v1(this, auto_gen_hdl, &url, &url2);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_rename_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_directory_exists_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_directory_exists_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool auto_gen_ret = kodi_addon_vfs_directory_exists_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_directory_exists_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_directory_remove_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_directory_remove_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool auto_gen_ret = kodi_addon_vfs_directory_remove_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_directory_remove_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_directory_create_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CREATE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_directory_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      bool auto_gen_ret = kodi_addon_vfs_directory_create_v1(this, auto_gen_hdl, &url);

      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_directory_create_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_vfs_directory_get_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_GET_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, KODI_CTX_CB_HDL ctx_cb_hdl);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, size_t, PtrValue> msgChild__IN_kodi_addon_vfs_directory_get_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t> msgChild_OUT_kodi_addon_vfs_directory_get_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_directory_get_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      struct VFS_DIR_ENTRY* entries = nullptr;
      size_t num_entries = std::get<2>(t);
      KODI_CTX_CB_HDL ctx_cb_hdl = reinterpret_cast<KODI_CTX_CB_HDL>(std::get<3>(t));
      bool auto_gen_ret = kodi_addon_vfs_directory_get_v1(this, auto_gen_hdl, &url, &entries,
                                                          &num_entries, ctx_cb_hdl);

      std::vector<IFC_VFS_DIR_ENTRY> ifc_entries;
      if (entries)
      {
        ifc_entries.reserve(num_entries);
        for (size_t i = 0; i < num_entries; ++i)
        {
          ifc_entries.emplace_back(&entries[i]);
          ifc_entries[i].CleanCStructure(&entries[i]);
        }
        free(entries);
      }
      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_directory_get_v1(auto_gen_ret, ifc_entries,
                                                                      num_entries));
      return true;
    }
    case funcChild_kodi_addon_vfs_directory_contains_files_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, char** rootpath);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VFS_URL, size_t> msgChild__IN_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t, std::string> msgChild_OUT_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_vfs_directory_contains_files_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VFS_URL url;
      std::get<1>(t).SetCStructure(&url);
      struct VFS_DIR_ENTRY* entries = nullptr;
      size_t num_entries = std::get<2>(t);
      char* rootpath = nullptr;
      bool auto_gen_ret = kodi_addon_vfs_directory_contains_files_v1(
          this, auto_gen_hdl, &url, &entries, &num_entries, &rootpath);

      std::vector<IFC_VFS_DIR_ENTRY> ifc_entries;
      if (entries)
      {
        ifc_entries.reserve(num_entries);
        for (size_t i = 0; i < num_entries; ++i)
        {
          ifc_entries.emplace_back(&entries[i]);
          ifc_entries[i].CleanCStructure(&entries[i]);
        }
        free(entries);
      }
      msgpack::pack(out, msgChild_OUT_kodi_addon_vfs_directory_contains_files_v1(
                             auto_gen_ret, ifc_entries, num_entries, rootpath ? rootpath : ""));
      if (rootpath)
        free(rootpath);
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_VFS_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_create_v1(
    void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_VFS_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_vfs.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_destroy_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_vfs.v1.destroy)
  {
    union_data->types.kodi_addon_vfs.v1.destroy(union_data->hdl);
  }
}

KODI_VFS_FILE_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_open_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  KODI_VFS_FILE_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_vfs.v1.file_open)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_open(union_data->hdl, url);
  }
  return auto_gen_ret;
}

KODI_VFS_FILE_HDL CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_open_for_write_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    bool overwrite) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  KODI_VFS_FILE_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_vfs.v1.file_open_for_write)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_open_for_write(union_data->hdl, url, overwrite);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_close_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.file_close)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_close(union_data->hdl, context);
  }
  return auto_gen_ret;
}

ssize_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_read_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    KODI_VFS_FILE_HDL context,
    uint8_t* buffer,
    size_t buf_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  ssize_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_read)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_read(union_data->hdl, context, buffer, buf_size);
  }
  return auto_gen_ret;
}

ssize_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_write_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    KODI_VFS_FILE_HDL context,
    const uint8_t* buffer,
    size_t buf_size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  ssize_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_write)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_write(union_data->hdl, context, buffer, buf_size);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_seek_v1(void* thisClassHdl,
                                                                   KODI_ADDON_VFS_HDL hdl,
                                                                   KODI_VFS_FILE_HDL context,
                                                                   int64_t position,
                                                                   int whence) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_seek)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_seek(union_data->hdl, context, position, whence);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_truncate_v1(void* thisClassHdl,
                                                                   KODI_ADDON_VFS_HDL hdl,
                                                                   KODI_VFS_FILE_HDL context,
                                                                   int64_t size) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_truncate)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_truncate(union_data->hdl, context, size);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_length_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_get_length)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_get_length(union_data->hdl, context);
  }
  return auto_gen_ret;
}

int64_t CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_position_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int64_t auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_get_position)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_get_position(union_data->hdl, context);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_get_chunk_size_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.file_get_chunk_size)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_vfs.v1.file_get_chunk_size(union_data->hdl, context);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_get_seek_possible_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.file_io_control_get_seek_possible)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_io_control_get_seek_possible(
        union_data->hdl, context);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_get_cache_status_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    KODI_VFS_FILE_HDL context,
    struct VFS_CACHE_STATUS* status) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.file_io_control_get_cache_status)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_io_control_get_cache_status(
        union_data->hdl, context, status);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_set_cache_rate_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    KODI_VFS_FILE_HDL context,
    unsigned int rate) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.file_io_control_set_cache_rate)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_io_control_set_cache_rate(
        union_data->hdl, context, rate);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_file_io_control_set_retry_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    KODI_VFS_FILE_HDL context,
    bool retry) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.file_io_control_set_retry)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.file_io_control_set_retry(union_data->hdl,
                                                                                 context, retry);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_stat_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    struct VFS_STAT_STRUCTURE* buffer) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_vfs.v1.stat)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.stat(union_data->hdl, url, buffer);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_exists_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.exists)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.exists(union_data->hdl, url);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_clear_out_idle_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_vfs.v1.clear_out_idle)
  {
    union_data->types.kodi_addon_vfs.v1.clear_out_idle(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_disconnect_all_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_vfs.v1.disconnect_all)
  {
    union_data->types.kodi_addon_vfs.v1.disconnect_all(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_delete_it_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.delete_it)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.delete_it(union_data->hdl, url);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_rename_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    const struct VFS_URL* url2) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.rename)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.rename(union_data->hdl, url, url2);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_exists_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.directory_exists)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.directory_exists(union_data->hdl, url);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_remove_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.directory_remove)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.directory_remove(union_data->hdl, url);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_create_v1(
    void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.directory_create)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.directory_create(union_data->hdl, url);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_get_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    struct VFS_DIR_ENTRY** entries,
    size_t* num_entries,
    KODI_CTX_CB_HDL ctx_cb_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.directory_get)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.directory_get(union_data->hdl, url, entries,
                                                                     num_entries, ctx_cb_hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_vfs_h::kodi_addon_vfs_directory_contains_files_v1(
    void* thisClassHdl,
    KODI_ADDON_VFS_HDL hdl,
    const struct VFS_URL* url,
    struct VFS_DIR_ENTRY** entries,
    size_t* num_entries,
    char** rootpath) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_vfs_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_vfs.v1.directory_contains_files)
  {
    auto_gen_ret = union_data->types.kodi_addon_vfs.v1.directory_contains_files(
        union_data->hdl, url, entries, num_entries, rootpath);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT bool kodi_addon_vfs_get_dir_cb__get_keyboard_input(KODI_OWN_HDL hdl,
                                                                   KODI_CTX_CB_HDL ctx_cb_hdl,
                                                                   const char* heading,
                                                                   char** input,
                                                                   bool hidden_input)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_addon_vfs_get_dir_cb__get_keyboard_input(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, char** input, bool hidden_input) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, bool> msgParent__IN_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */

  if (hdl == nullptr || ctx_cb_hdl == nullptr || heading == nullptr || input == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
                          PtrValue(hdl), PtrValue(ctx_cb_hdl), heading, hidden_input));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_vfs_h,
            funcParent_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1 t =
        ident.get().as<decltype(t)>();

    *input = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_vfs_h;
  return auto_gen_group.kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1(
      auto_gen_group.thisClassHdl, hdl, ctx_cb_hdl, heading, input, hidden_input);
}

ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__set_error_dialog(KODI_OWN_HDL hdl,
                                                                 KODI_CTX_CB_HDL ctx_cb_hdl,
                                                                 const char* heading,
                                                                 const char* line1,
                                                                 const char* line2,
                                                                 const char* line3)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__set_error_dialog(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, const char* line1, const char* line2, const char* line3) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, std::string, std::string, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */

  if (hdl == nullptr || ctx_cb_hdl == nullptr || heading == nullptr || line1 == nullptr ||
      line2 == nullptr || line3 == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1(
                          PtrValue(hdl), PtrValue(ctx_cb_hdl), heading, line1, line2, line3));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_vfs_h, funcParent_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1,
        in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_vfs_h;
  auto_gen_group.kodi_addon_vfs_get_dir_cb__set_error_dialog_v1(
      auto_gen_group.thisClassHdl, hdl, ctx_cb_hdl, heading, line1, line2, line3);
}

ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__require_authentication(KODI_OWN_HDL hdl,
                                                                       KODI_CTX_CB_HDL ctx_cb_hdl,
                                                                       const char* url)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__require_authentication(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* url) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */

  if (hdl == nullptr || ctx_cb_hdl == nullptr || url == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_vfs_get_dir_cb__require_authentication_v1(
                          PtrValue(hdl), PtrValue(ctx_cb_hdl), url));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_vfs_h,
        funcParent_kodi_addon_vfs_get_dir_cb__require_authentication_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_vfs_h;
  auto_gen_group.kodi_addon_vfs_get_dir_cb__require_authentication_v1(auto_gen_group.thisClassHdl,
                                                                      hdl, ctx_cb_hdl, url);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
