/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "core/IMsgHdl.h"
#include "src/shared/api/addon-instance/vfs.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct directFuncToAddon_addoninstance_vfs_h;
struct directFuncToKodi_addoninstance_vfs_h;

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */

namespace KODI_ADDON
{
namespace INTERNAL
{

class ATTR_DLL_LOCAL CHdl_kodi_addoninstance_vfs_h : public IMsgHdl
{
public:
  CHdl_kodi_addoninstance_vfs_h(AddonIfc* ifc) : IMsgHdl(ifc) {}

  void InitDirect(KODI::ADDONS::INTERFACE::directFuncToAddon_addoninstance_vfs_h* ifcToAddon);

#ifndef KODI_INHIBIT_SHARED
  bool HandleMessage(int funcGroup,
                     int func,
                     const msgpack::unpacked& in,
                     msgpack::sbuffer& out) override;
#endif /* !KODI_INHIBIT_SHARED */

  /* Code below becomes on auto generation reused, hand edited parts should included here */
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

  // Calls from Kodi to addon
  static KODI_ADDON_VFS_HDL kodi_addon_vfs_create_v1(void* thisClassHdl,
                                                     KODI_OWN_HDL kodi_hdl); // Added with API 1

  static void kodi_addon_vfs_destroy_v1(void* thisClassHdl,
                                        KODI_ADDON_VFS_HDL hdl); // Added with API 1

  static KODI_VFS_FILE_HDL kodi_addon_vfs_file_open_v1(
      void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url); // Added with API 1

  static KODI_VFS_FILE_HDL kodi_addon_vfs_file_open_for_write_v1(
      void* thisClassHdl,
      KODI_ADDON_VFS_HDL hdl,
      const struct VFS_URL* url,
      bool overwrite); // Added with API 1

  static bool kodi_addon_vfs_file_close_v1(void* thisClassHdl,
                                           KODI_ADDON_VFS_HDL hdl,
                                           KODI_VFS_FILE_HDL context); // Added with API 1

  static ssize_t kodi_addon_vfs_file_read_v1(void* thisClassHdl,
                                             KODI_ADDON_VFS_HDL hdl,
                                             KODI_VFS_FILE_HDL context,
                                             uint8_t* buffer,
                                             size_t buf_size); // Added with API 1

  static ssize_t kodi_addon_vfs_file_write_v1(void* thisClassHdl,
                                              KODI_ADDON_VFS_HDL hdl,
                                              KODI_VFS_FILE_HDL context,
                                              const uint8_t* buffer,
                                              size_t buf_size); // Added with API 1

  static int64_t kodi_addon_vfs_file_seek_v1(void* thisClassHdl,
                                             KODI_ADDON_VFS_HDL hdl,
                                             KODI_VFS_FILE_HDL context,
                                             int64_t position,
                                             int whence); // Added with API 1

  static int kodi_addon_vfs_file_truncate_v1(void* thisClassHdl,
                                             KODI_ADDON_VFS_HDL hdl,
                                             KODI_VFS_FILE_HDL context,
                                             int64_t size); // Added with API 1

  static int64_t kodi_addon_vfs_file_get_length_v1(void* thisClassHdl,
                                                   KODI_ADDON_VFS_HDL hdl,
                                                   KODI_VFS_FILE_HDL context); // Added with API 1

  static int64_t kodi_addon_vfs_file_get_position_v1(void* thisClassHdl,
                                                     KODI_ADDON_VFS_HDL hdl,
                                                     KODI_VFS_FILE_HDL context); // Added with API 1

  static int kodi_addon_vfs_file_get_chunk_size_v1(void* thisClassHdl,
                                                   KODI_ADDON_VFS_HDL hdl,
                                                   KODI_VFS_FILE_HDL context); // Added with API 1

  static bool kodi_addon_vfs_file_io_control_get_seek_possible_v1(
      void* thisClassHdl, KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context); // Added with API 1

  static bool kodi_addon_vfs_file_io_control_get_cache_status_v1(
      void* thisClassHdl,
      KODI_ADDON_VFS_HDL hdl,
      KODI_VFS_FILE_HDL context,
      struct VFS_CACHE_STATUS* status); // Added with API 1

  static bool kodi_addon_vfs_file_io_control_set_cache_rate_v1(
      void* thisClassHdl,
      KODI_ADDON_VFS_HDL hdl,
      KODI_VFS_FILE_HDL context,
      unsigned int rate); // Added with API 1

  static bool kodi_addon_vfs_file_io_control_set_retry_v1(void* thisClassHdl,
                                                          KODI_ADDON_VFS_HDL hdl,
                                                          KODI_VFS_FILE_HDL context,
                                                          bool retry); // Added with API 1

  static int kodi_addon_vfs_stat_v1(void* thisClassHdl,
                                    KODI_ADDON_VFS_HDL hdl,
                                    const struct VFS_URL* url,
                                    struct VFS_STAT_STRUCTURE* buffer); // Added with API 1

  static bool kodi_addon_vfs_exists_v1(void* thisClassHdl,
                                       KODI_ADDON_VFS_HDL hdl,
                                       const struct VFS_URL* url); // Added with API 1

  static void kodi_addon_vfs_clear_out_idle_v1(void* thisClassHdl,
                                               KODI_ADDON_VFS_HDL hdl); // Added with API 1

  static void kodi_addon_vfs_disconnect_all_v1(void* thisClassHdl,
                                               KODI_ADDON_VFS_HDL hdl); // Added with API 1

  static bool kodi_addon_vfs_delete_it_v1(void* thisClassHdl,
                                          KODI_ADDON_VFS_HDL hdl,
                                          const struct VFS_URL* url); // Added with API 1

  static bool kodi_addon_vfs_rename_v1(void* thisClassHdl,
                                       KODI_ADDON_VFS_HDL hdl,
                                       const struct VFS_URL* url,
                                       const struct VFS_URL* url2); // Added with API 1

  static bool kodi_addon_vfs_directory_exists_v1(void* thisClassHdl,
                                                 KODI_ADDON_VFS_HDL hdl,
                                                 const struct VFS_URL* url); // Added with API 1

  static bool kodi_addon_vfs_directory_remove_v1(void* thisClassHdl,
                                                 KODI_ADDON_VFS_HDL hdl,
                                                 const struct VFS_URL* url); // Added with API 1

  static bool kodi_addon_vfs_directory_create_v1(void* thisClassHdl,
                                                 KODI_ADDON_VFS_HDL hdl,
                                                 const struct VFS_URL* url); // Added with API 1

  static bool kodi_addon_vfs_directory_get_v1(void* thisClassHdl,
                                              KODI_ADDON_VFS_HDL hdl,
                                              const struct VFS_URL* url,
                                              struct VFS_DIR_ENTRY** entries,
                                              size_t* num_entries,
                                              KODI_CTX_CB_HDL ctx_cb_hdl); // Added with API 1

  static bool kodi_addon_vfs_directory_contains_files_v1(void* thisClassHdl,
                                                         KODI_ADDON_VFS_HDL hdl,
                                                         const struct VFS_URL* url,
                                                         struct VFS_DIR_ENTRY** entries,
                                                         size_t* num_entries,
                                                         char** rootpath); // Added with API 1
};

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */
