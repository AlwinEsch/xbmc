/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "videocodec.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_videocodec_h::InitDirect(
    directFuncToAddon_addoninstance_videocodec_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_videocodec_create_v1 = kodi_addon_videocodec_create_v1;
  ifcToAddon->kodi_addon_videocodec_destroy_v1 = kodi_addon_videocodec_destroy_v1;
  ifcToAddon->kodi_addon_videocodec_open_v1 = kodi_addon_videocodec_open_v1;
  ifcToAddon->kodi_addon_videocodec_reconfigure_v1 = kodi_addon_videocodec_reconfigure_v1;
  ifcToAddon->kodi_addon_videocodec_add_data_v1 = kodi_addon_videocodec_add_data_v1;
  ifcToAddon->kodi_addon_videocodec_get_picture_v1 = kodi_addon_videocodec_get_picture_v1;
  ifcToAddon->kodi_addon_videocodec_get_name_v1 = kodi_addon_videocodec_get_name_v1;
  ifcToAddon->kodi_addon_videocodec_reset_v1 = kodi_addon_videocodec_reset_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_videocodec_h::HandleMessage(int funcGroup,
                                                         int func,
                                                         const msgpack::unpacked& in,
                                                         msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_videocodec_h)
    return false;

  switch (func)
  {
    /* NOTE: Ignored as direct api only is set! */
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_VIDEOCODEC_HDL CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_create_v1(
    void* thisClassHdl, KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_VIDEOCODEC_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_videocodec.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_videocodec.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_destroy_v1(
    void* thisClassHdl, KODI_ADDON_VIDEOCODEC_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_videocodec.v1.destroy)
  {
    union_data->types.kodi_addon_videocodec.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_open_v1(
    void* thisClassHdl,
    KODI_ADDON_VIDEOCODEC_HDL hdl,
    struct VIDEOCODEC_INITDATA* initData) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_videocodec.v1.open)
  {
    auto_gen_ret = union_data->types.kodi_addon_videocodec.v1.open(union_data->hdl, initData);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_reconfigure_v1(
    void* thisClassHdl,
    KODI_ADDON_VIDEOCODEC_HDL hdl,
    struct VIDEOCODEC_INITDATA* initData) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_videocodec.v1.reconfigure)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_videocodec.v1.reconfigure(union_data->hdl, initData);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_add_data_v1(
    void* thisClassHdl,
    KODI_ADDON_VIDEOCODEC_HDL hdl,
    const struct DEMUX_PACKET* packet) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_videocodec.v1.add_data)
  {
    auto_gen_ret = union_data->types.kodi_addon_videocodec.v1.add_data(union_data->hdl, packet);
  }
  return auto_gen_ret;
}

enum VIDEOCODEC_RETVAL CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_get_picture_v1(
    void* thisClassHdl,
    KODI_ADDON_VIDEOCODEC_HDL hdl,
    struct VIDEOCODEC_PICTURE* picture) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return VC_NONE;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum VIDEOCODEC_RETVAL auto_gen_ret = VC_NONE;
  if (union_data->types.kodi_addon_videocodec.v1.get_picture)
  {
    auto_gen_ret = union_data->types.kodi_addon_videocodec.v1.get_picture(union_data->hdl, picture);
  }
  return auto_gen_ret;
}

const char* CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_get_name_v1(
    void* thisClassHdl, KODI_ADDON_VIDEOCODEC_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  const char* auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_videocodec.v1.get_name)
  {
    auto_gen_ret = union_data->types.kodi_addon_videocodec.v1.get_name(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_videocodec_h::kodi_addon_videocodec_reset_v1(
    void* thisClassHdl, KODI_ADDON_VIDEOCODEC_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_videocodec_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_videocodec.v1.reset)
  {
    union_data->types.kodi_addon_videocodec.v1.reset(union_data->hdl);
  }
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT bool kodi_addon_videocodec_get_frame_buffer(KODI_OWN_HDL hdl,
                                                            struct VIDEOCODEC_PICTURE* picture)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_addon_videocodec_get_frame_buffer( KODI_OWN_HDL hdl, struct VIDEOCODEC_PICTURE* picture) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || picture == nullptr)
    return false;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_videocodec_h;
  return auto_gen_group.kodi_addon_videocodec_get_frame_buffer_v1(auto_gen_group.thisClassHdl, hdl,
                                                                  picture);
}

ATTR_DLL_EXPORT void kodi_addon_videocodec_release_frame_buffer(KODI_OWN_HDL hdl,
                                                                struct VIDEOCODEC_PICTURE* picture)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_videocodec_release_frame_buffer( KODI_OWN_HDL hdl, struct VIDEOCODEC_PICTURE* picture) __INTRODUCED_IN_KODI(1);
  if (hdl == nullptr || picture == nullptr)
    return;

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_videocodec_h;
  auto_gen_group.kodi_addon_videocodec_release_frame_buffer_v1(auto_gen_group.thisClassHdl, hdl,
                                                               picture);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
