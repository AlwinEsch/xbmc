/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "visualization.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_visualization_h::InitDirect(
    directFuncToAddon_addoninstance_visualization_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_visualization_create_v1 = kodi_addon_visualization_create_v1;
  ifcToAddon->kodi_addon_visualization_destroy_v1 = kodi_addon_visualization_destroy_v1;
  ifcToAddon->kodi_addon_visualization_start_v1 = kodi_addon_visualization_start_v1;
  ifcToAddon->kodi_addon_visualization_stop_v1 = kodi_addon_visualization_stop_v1;
  ifcToAddon->kodi_addon_visualization_get_info_v1 = kodi_addon_visualization_get_info_v1;
  ifcToAddon->kodi_addon_visualization_audio_data_v1 = kodi_addon_visualization_audio_data_v1;
  ifcToAddon->kodi_addon_visualization_is_dirty_v1 = kodi_addon_visualization_is_dirty_v1;
  ifcToAddon->kodi_addon_visualization_render_v1 = kodi_addon_visualization_render_v1;
  ifcToAddon->kodi_addon_visualization_get_presets_v1 = kodi_addon_visualization_get_presets_v1;
  ifcToAddon->kodi_addon_visualization_get_active_preset_v1 =
      kodi_addon_visualization_get_active_preset_v1;
  ifcToAddon->kodi_addon_visualization_prev_preset_v1 = kodi_addon_visualization_prev_preset_v1;
  ifcToAddon->kodi_addon_visualization_next_preset_v1 = kodi_addon_visualization_next_preset_v1;
  ifcToAddon->kodi_addon_visualization_load_preset_v1 = kodi_addon_visualization_load_preset_v1;
  ifcToAddon->kodi_addon_visualization_random_preset_v1 = kodi_addon_visualization_random_preset_v1;
  ifcToAddon->kodi_addon_visualization_lock_preset_v1 = kodi_addon_visualization_lock_preset_v1;
  ifcToAddon->kodi_addon_visualization_rate_preset_v1 = kodi_addon_visualization_rate_preset_v1;
  ifcToAddon->kodi_addon_visualization_is_locked_v1 = kodi_addon_visualization_is_locked_v1;
  ifcToAddon->kodi_addon_visualization_update_albumart_v1 =
      kodi_addon_visualization_update_albumart_v1;
  ifcToAddon->kodi_addon_visualization_update_track_v1 = kodi_addon_visualization_update_track_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_visualization_h::HandleMessage(int funcGroup,
                                                            int func,
                                                            const msgpack::unpacked& in,
                                                            msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_visualization_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_visualization_create_v1:
    {
      // Original API call: typedef KODI_ADDON_VISUALIZATION_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_create_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_visualization_create_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_create_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_VISUALIZATION_HDL auto_gen_ret =
          kodi_addon_visualization_create_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_create_v1(PtrValue(auto_gen_ret)));
      return true;
    }
    case funcChild_kodi_addon_visualization_destroy_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_DESTROY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_destroy_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_destroy_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_destroy_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_visualization_destroy_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_visualization_start_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_START_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int channels, int samples_per_sec, int bits_per_sample, const char* song_name);
      // Tuple in:          typedef std::tuple<PtrValue, int, int, int, std::string> msgChild__IN_kodi_addon_visualization_start_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_start_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_start_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int channels = std::get<1>(t);
      int samples_per_sec = std::get<2>(t);
      int bits_per_sample = std::get<3>(t);
      const std::string& song_name = std::get<4>(t);
      bool auto_gen_ret = kodi_addon_visualization_start_v1(
          this, auto_gen_hdl, channels, samples_per_sec, bits_per_sample, song_name.c_str());

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_start_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_stop_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_STOP_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_stop_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_stop_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_stop_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_visualization_stop_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_visualization_get_info_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_INFO_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, struct VIS_INFO* info);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_info_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<IFC_VIS_INFO> msgChild_OUT_kodi_addon_visualization_get_info_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_get_info_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      struct VIS_INFO info;
      kodi_addon_visualization_get_info_v1(this, auto_gen_hdl, &info);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_get_info_v1(&info));
      return true;
    }
    case funcChild_kodi_addon_visualization_audio_data_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const float* audio_data, size_t audio_data_length, const float* freq_data, size_t freq_data_length);
      // Tuple in:          typedef std::tuple<PtrValue, std::vector<float>, size_t, std::vector<float>, size_t> msgChild__IN_kodi_addon_visualization_audio_data_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_audio_data_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_audio_data_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::vector<float>& audio_data = std::get<1>(t);
      size_t audio_data_length = std::get<2>(t);
      const std::vector<float>& freq_data = std::get<3>(t);
      size_t freq_data_length = std::get<4>(t);
      kodi_addon_visualization_audio_data_v1(this, auto_gen_hdl, audio_data.data(),
                                             audio_data_length, freq_data.data(), freq_data_length);

      return true;
    }
    case funcChild_kodi_addon_visualization_is_dirty_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_is_dirty_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_is_dirty_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_is_dirty_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_render_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RENDER_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_render_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_render_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_render_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      kodi_addon_visualization_render_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_visualization_get_presets_v1:
    {
      // Original API call: typedef unsigned int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_presets_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<unsigned int> msgChild_OUT_kodi_addon_visualization_get_presets_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_get_presets_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      unsigned int auto_gen_ret = kodi_addon_visualization_get_presets_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_get_presets_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_get_active_preset_v1:
    {
      // Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<int> msgChild_OUT_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_get_active_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int auto_gen_ret = kodi_addon_visualization_get_active_preset_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_get_active_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_prev_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_prev_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_prev_preset_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_prev_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_next_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_next_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_next_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_next_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_next_preset_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_next_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_load_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int select);
      // Tuple in:          typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_visualization_load_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_load_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_load_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      int select = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_visualization_load_preset_v1(this, auto_gen_hdl, select);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_load_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_random_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_random_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_random_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_random_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_random_preset_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_random_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_lock_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_lock_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_lock_preset_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_lock_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_rate_preset_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, bool plus_minus);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgChild__IN_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_rate_preset_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool plus_minus = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_visualization_rate_preset_v1(this, auto_gen_hdl, plus_minus);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_rate_preset_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_is_locked_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_locked_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_locked_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_is_locked_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_visualization_is_locked_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_is_locked_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_update_albumart_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const char* albumart);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_update_albumart_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::string& albumart = std::get<1>(t);
      bool auto_gen_ret =
          kodi_addon_visualization_update_albumart_v1(this, auto_gen_hdl, albumart.c_str());

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_update_albumart_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_visualization_update_track_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const struct VIS_TRACK* track);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_VIS_TRACK> msgChild__IN_kodi_addon_visualization_update_track_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_track_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_visualization_update_track_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      VIS_TRACK track;
      std::get<1>(t).SetCStructure(&track);
      bool auto_gen_ret = kodi_addon_visualization_update_track_v1(this, auto_gen_hdl, &track);

      msgpack::pack(out, msgChild_OUT_kodi_addon_visualization_update_track_v1(auto_gen_ret));
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/


KODI_ADDON_VISUALIZATION_HDL CHdl_kodi_addoninstance_visualization_h::
    kodi_addon_visualization_create_v1(void* thisClassHdl,
                                       KODI_OWN_HDL kodi_hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return nullptr;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(kodi_hdl);
  KODI_ADDON_VISUALIZATION_HDL auto_gen_ret = nullptr;
  if (union_data->types.kodi_addon_visualization.v1.create)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.create(kodi_hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_destroy_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_visualization.v1.destroy)
  {
    union_data->types.kodi_addon_visualization.v1.destroy(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_start_v1(
    void* thisClassHdl,
    KODI_ADDON_VISUALIZATION_HDL hdl,
    int channels,
    int samples_per_sec,
    int bits_per_sample,
    const char* song_name) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.start)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.start(
        union_data->hdl, channels, samples_per_sec, bits_per_sample, song_name);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_stop_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_visualization.v1.stop)
  {
    union_data->types.kodi_addon_visualization.v1.stop(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_info_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl, struct VIS_INFO* info) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_visualization.v1.get_info)
  {
    union_data->types.kodi_addon_visualization.v1.get_info(union_data->hdl, info);
  }
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_audio_data_v1(
    void* thisClassHdl,
    KODI_ADDON_VISUALIZATION_HDL hdl,
    const float* audio_data,
    size_t audio_data_length,
    const float* freq_data,
    size_t freq_data_length) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_visualization.v1.audio_data)
  {
    union_data->types.kodi_addon_visualization.v1.audio_data(
        union_data->hdl, audio_data, audio_data_length, freq_data, freq_data_length);
  }
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_is_dirty_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.is_dirty)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.is_dirty(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_render_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_visualization.v1.render)
  {
    union_data->types.kodi_addon_visualization.v1.render(union_data->hdl);
  }
}

unsigned int CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_presets_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return 0;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  unsigned int auto_gen_ret = 0;
  if (union_data->types.kodi_addon_visualization.v1.get_presets)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.get_presets(union_data->hdl);
  }
  return auto_gen_ret;
}

int CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_get_active_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return -1;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  int auto_gen_ret = -1;
  if (union_data->types.kodi_addon_visualization.v1.get_active_preset)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.get_active_preset(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_prev_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.prev_preset)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.prev_preset(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_next_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.next_preset)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.next_preset(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_load_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl, int select) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.load_preset)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_visualization.v1.load_preset(union_data->hdl, select);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_random_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.random_preset)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.random_preset(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_lock_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.lock_preset)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.lock_preset(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_rate_preset_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl, bool plus_minus) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.rate_preset)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_visualization.v1.rate_preset(union_data->hdl, plus_minus);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_is_locked_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.is_locked)
  {
    auto_gen_ret = union_data->types.kodi_addon_visualization.v1.is_locked(union_data->hdl);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_update_albumart_v1(
    void* thisClassHdl, KODI_ADDON_VISUALIZATION_HDL hdl, const char* albumart) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.update_albumart)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_visualization.v1.update_albumart(union_data->hdl, albumart);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_visualization_h::kodi_addon_visualization_update_track_v1(
    void* thisClassHdl,
    KODI_ADDON_VISUALIZATION_HDL hdl,
    const struct VIS_TRACK* track) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_visualization_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_visualization.v1.update_track)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_visualization.v1.update_track(union_data->hdl, track);
  }
  return auto_gen_ret;
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT void kodi_addon_visualization_get_properties(KODI_OWN_HDL hdl,
                                                             struct VIS_PROPS* props)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_get_properties(KODI_OWN_HDL hdl, struct VIS_PROPS* props) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_get_properties_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<IFC_VIS_PROPS> msgParent_OUT_kodi_addon_visualization_get_properties_v1; /* Autogenerated */

  if (hdl == nullptr || props == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_visualization_get_properties_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_visualization_h,
            funcParent_kodi_addon_visualization_get_properties_v1, in, out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_visualization_get_properties_v1 t = ident.get().as<decltype(t)>();

    std::get<0>(t).SetCStructure(props);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_visualization_h;
  auto_gen_group.kodi_addon_visualization_get_properties_v1(auto_gen_group.thisClassHdl, hdl,
                                                            props);
}

ATTR_DLL_EXPORT void kodi_addon_visualization_transfer_preset(KODI_OWN_HDL hdl, const char* preset)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_transfer_preset(KODI_OWN_HDL hdl, const char* preset) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */

  if (hdl == nullptr || preset == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in,
                  msgParent__IN_kodi_addon_visualization_transfer_preset_v1(PtrValue(hdl), preset));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_visualization_h,
        funcParent_kodi_addon_visualization_transfer_preset_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_visualization_h;
  auto_gen_group.kodi_addon_visualization_transfer_preset_v1(auto_gen_group.thisClassHdl, hdl,
                                                             preset);
}

ATTR_DLL_EXPORT void kodi_addon_visualization_clear_presets(KODI_OWN_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_clear_presets(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_visualization_clear_presets_v1(PtrValue(hdl)));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_visualization_h,
        funcParent_kodi_addon_visualization_clear_presets_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_visualization_h;
  auto_gen_group.kodi_addon_visualization_clear_presets_v1(auto_gen_group.thisClassHdl, hdl);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
