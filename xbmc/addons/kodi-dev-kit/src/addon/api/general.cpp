/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "general.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_general_h::InitDirect(directFuncToAddon_general_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

/* NOTE: unused (no functions from Kodi to addon here) */

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT char* kodi_get_localized_string(long label_id)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_get_localized_string(long label_id) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<long> msgParent__IN_kodi_get_localized_string_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_get_localized_string_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_localized_string_v1(label_id));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_localized_string_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_localized_string_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_localized_string_v1(auto_gen_group.thisClassHdl, label_id);
}

ATTR_DLL_EXPORT void kodi_get_free_mem(long* free, long* total, bool as_bytes)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_get_free_mem(long* free, long* total, bool as_bytes) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<long, long, bool> msgParent__IN_kodi_get_free_mem_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<long, long> msgParent_OUT_kodi_get_free_mem_v1; /* Autogenerated */

  if (free == nullptr || total == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_free_mem_v1(*free, *total, as_bytes));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_free_mem_v1, in, out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_free_mem_v1 t = ident.get().as<decltype(t)>();

    *free = std::get<0>(t);
    *total = std::get<1>(t);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  auto_gen_group.kodi_get_free_mem_v1(auto_gen_group.thisClassHdl, free, total, as_bytes);
}

ATTR_DLL_EXPORT char* kodi_unknown_to_utf8(const char* source, bool* ret, bool failOnBadChar)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_unknown_to_utf8(const char* source, bool* ret, bool failOnBadChar) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, bool, bool> msgParent__IN_kodi_unknown_to_utf8_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string, bool> msgParent_OUT_kodi_unknown_to_utf8_v1; /* Autogenerated */

  if (source == nullptr || ret == nullptr)
    return nullptr;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_unknown_to_utf8_v1(source, *ret, failOnBadChar));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_unknown_to_utf8_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_unknown_to_utf8_v1 t = ident.get().as<decltype(t)>();

    *ret = std::get<1>(t);
    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_unknown_to_utf8_v1(auto_gen_group.thisClassHdl, source, ret,
                                                failOnBadChar);
}

ATTR_DLL_EXPORT char* kodi_get_language(enum LangFormats format, bool region)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_get_language(enum LangFormats format, bool region) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<LangFormats, bool> msgParent__IN_kodi_get_language_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_get_language_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_language_v1(format, region));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_language_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_language_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_language_v1(auto_gen_group.thisClassHdl, format, region);
}

ATTR_DLL_EXPORT void kodi_queue_notification(enum QueueMsg type,
                                             const char* header,
                                             const char* message,
                                             const char* imageFile,
                                             unsigned int displayTime,
                                             bool withSound,
                                             unsigned int messageTime)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_queue_notification(enum QueueMsg type, const char* header, const char* message, const char* imageFile, unsigned int displayTime, bool withSound, unsigned int messageTime) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<QueueMsg, std::string, std::string, std::string, unsigned int, bool, unsigned int> msgParent__IN_kodi_queue_notification_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_queue_notification_v1; /* Autogenerated */

  if (header == nullptr || message == nullptr || imageFile == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_queue_notification_v1(
                          type, header, message, imageFile, displayTime, withSound, messageTime));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_general_h, funcParent_kodi_queue_notification_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  auto_gen_group.kodi_queue_notification_v1(auto_gen_group.thisClassHdl, type, header, message,
                                            imageFile, displayTime, withSound, messageTime);
}

ATTR_DLL_EXPORT char* kodi_get_digest(enum DigestType type, const char* text)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_get_digest(enum DigestType type, const char* text) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<DigestType, std::string> msgParent__IN_kodi_get_digest_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_get_digest_v1; /* Autogenerated */

  if (text == nullptr)
    return nullptr;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_digest_v1(type, text));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_digest_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_digest_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_digest_v1(auto_gen_group.thisClassHdl, type, text);
}

ATTR_DLL_EXPORT char* kodi_get_region(const char* id)
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_get_region(const char* id) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string> msgParent__IN_kodi_get_region_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_get_region_v1; /* Autogenerated */

  if (id == nullptr)
    return nullptr;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_region_v1(id));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_region_v1, in, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_region_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_region_v1(auto_gen_group.thisClassHdl, id);
}

ATTR_DLL_EXPORT int kodi_get_global_idle_time()
{
  // Original API call: ATTR_DLL_EXPORT int kodi_get_global_idle_time() __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_get_global_idle_time_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_get_global_idle_time_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer out;
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessageOnlyGetReturn(
            funcGroup_general_h, funcParent_kodi_get_global_idle_time_v1, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_global_idle_time_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_global_idle_time_v1(auto_gen_group.thisClassHdl);
}

ATTR_DLL_EXPORT bool kodi_is_addon_avilable(const char* id, char** version, bool* enabled)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_is_addon_avilable(const char* id, char** version, bool* enabled) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, bool> msgParent__IN_kodi_is_addon_avilable_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string, bool> msgParent_OUT_kodi_is_addon_avilable_v1; /* Autogenerated */

  if (id == nullptr || version == nullptr || enabled == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_is_addon_avilable_v1(id, *enabled));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_is_addon_avilable_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_is_addon_avilable_v1 t = ident.get().as<decltype(t)>();

    *version = strdup(std::get<1>(t).c_str());
    *enabled = std::get<2>(t);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_is_addon_avilable_v1(auto_gen_group.thisClassHdl, id, version,
                                                  enabled);
}

ATTR_DLL_EXPORT void kodi_version(
    char** compile_name, int* major, int* minor, char** revision, char** tag, char** tagversion)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_version( char** compile_name, int* major, int* minor, char** revision, char** tag, char** tagversion) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<int, int> msgParent__IN_kodi_version_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string, int, int, std::string, std::string, std::string> msgParent_OUT_kodi_version_v1; /* Autogenerated */

  if (compile_name == nullptr || major == nullptr || minor == nullptr || revision == nullptr ||
      tag == nullptr || tagversion == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_version_v1(*major, *minor));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(funcGroup_general_h,
                                                               funcParent_kodi_version_v1, in, out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_version_v1 t = ident.get().as<decltype(t)>();

    *compile_name = strdup(std::get<0>(t).c_str());
    *major = std::get<1>(t);
    *minor = std::get<2>(t);
    *revision = strdup(std::get<3>(t).c_str());
    *tag = strdup(std::get<4>(t).c_str());
    *tagversion = strdup(std::get<5>(t).c_str());
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  auto_gen_group.kodi_version_v1(auto_gen_group.thisClassHdl, compile_name, major, minor, revision,
                                 tag, tagversion);
}

ATTR_DLL_EXPORT char* kodi_get_current_skin_id()
{
  // Original API call: ATTR_DLL_EXPORT char* kodi_get_current_skin_id() __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_get_current_skin_id_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<std::string> msgParent_OUT_kodi_get_current_skin_id_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer out;
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessageOnlyGetReturn(
            funcGroup_general_h, funcParent_kodi_get_current_skin_id_v1, out))
      return nullptr;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_current_skin_id_v1 t = ident.get().as<decltype(t)>();

    return strdup(std::get<0>(t).c_str());
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_current_skin_id_v1(auto_gen_group.thisClassHdl);
}

ATTR_DLL_EXPORT bool kodi_get_keyboard_layout(int modifier_key,
                                              char** layout_name,
                                              struct AddonKeyboardKeyTable* layout)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_get_keyboard_layout(int modifier_key, char** layout_name, struct AddonKeyboardKeyTable* layout) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<int> msgParent__IN_kodi_get_keyboard_layout_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string, IFC_AddonKeyboardKeyTable> msgParent_OUT_kodi_get_keyboard_layout_v1; /* Autogenerated */

  if (layout_name == nullptr || layout == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_get_keyboard_layout_v1(modifier_key));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_general_h, funcParent_kodi_get_keyboard_layout_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_get_keyboard_layout_v1 t = ident.get().as<decltype(t)>();

    *layout_name = strdup(std::get<1>(t).c_str());
    std::get<2>(t).SetCStructure(layout);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_get_keyboard_layout_v1(auto_gen_group.thisClassHdl, modifier_key,
                                                    layout_name, layout);
}

ATTR_DLL_EXPORT bool kodi_change_keyboard_layout(char** layout_name)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_change_keyboard_layout(char** layout_name) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_change_keyboard_layout_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_change_keyboard_layout_v1; /* Autogenerated */

  if (layout_name == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer out;
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessageOnlyGetReturn(
            funcGroup_general_h, funcParent_kodi_change_keyboard_layout_v1, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_change_keyboard_layout_v1 t = ident.get().as<decltype(t)>();

    *layout_name = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  return auto_gen_group.kodi_change_keyboard_layout_v1(auto_gen_group.thisClassHdl, layout_name);
}

ATTR_DLL_EXPORT void kodi_play_sfx(const char* filename, bool use_cached)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_play_sfx(const char* filename, bool use_cached) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, bool> msgParent__IN_kodi_play_sfx_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_play_sfx_v1; /* Autogenerated */

  if (filename == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_play_sfx_v1(filename, use_cached));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(funcGroup_general_h,
                                                          funcParent_kodi_play_sfx_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  auto_gen_group.kodi_play_sfx_v1(auto_gen_group.thisClassHdl, filename, use_cached);
}

ATTR_DLL_EXPORT void kodi_stop_sfx()
{
  // Original API call: ATTR_DLL_EXPORT void kodi_stop_sfx() __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<DummyValue> msgParent__IN_kodi_stop_sfx_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_stop_sfx_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(funcGroup_general_h,
                                                          funcParent_kodi_stop_sfx_v1);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.general_h;
  auto_gen_group.kodi_stop_sfx_v1(auto_gen_group.thisClassHdl);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
