/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "filebrowser.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_dialogs_filebrowser_h::InitDirect(
    directFuncToAddon_gui_dialogs_filebrowser_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

/* NOTE: unused (no functions from Kodi to addon here) */

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_directory(
    const char* shares, const char* heading, const char* path_in, char** path_out, bool write_only)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_directory( const char* shares, const char* heading, const char* path_in, char** path_out, bool write_only) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, std::string, bool> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_directory_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_directory_v1; /* Autogenerated */

  if (shares == nullptr || heading == nullptr || path_in == nullptr || path_out == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_directory_v1(
                          shares, heading, path_in, write_only));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_directory_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_directory_v1 t =
        ident.get().as<decltype(t)>();

    *path_out = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_directory_v1(
      auto_gen_group.thisClassHdl, shares, heading, path_in, path_out, write_only);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file(const char* shares,
                                                                     const char* mask,
                                                                     const char* heading,
                                                                     const char* path_in,
                                                                     char** path_out,
                                                                     bool use_thumbs,
                                                                     bool use_file_directories)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file(const char* shares, const char* mask, const char* heading, const char* path_in, char** path_out, bool use_thumbs, bool use_file_directories) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, std::string, std::string, bool, bool> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_v1; /* Autogenerated */

  if (shares == nullptr || mask == nullptr || heading == nullptr || path_in == nullptr ||
      path_out == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_v1(
                          shares, mask, heading, path_in, use_thumbs, use_file_directories));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_file_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_v1 t =
        ident.get().as<decltype(t)>();

    *path_out = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_file_v1(
      auto_gen_group.thisClassHdl, shares, mask, heading, path_in, path_out, use_thumbs,
      use_file_directories);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file_from_dir(
    const char* directory,
    const char* mask,
    const char* heading,
    const char* path_in,
    char** path_out,
    bool use_thumbs,
    bool use_file_directories,
    bool single_list)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file_from_dir( const char* directory, const char* mask, const char* heading, const char* path_in, char** path_out, bool use_thumbs, bool use_file_directories, bool single_list) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, std::string, std::string, bool, bool, bool> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1; /* Autogenerated */

  if (directory == nullptr || mask == nullptr || heading == nullptr || path_in == nullptr ||
      path_out == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(
        in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1(
                directory, mask, heading, path_in, use_thumbs, use_file_directories, single_list));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1 t =
        ident.get().as<decltype(t)>();

    *path_out = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_file_from_dir_v1(
      auto_gen_group.thisClassHdl, directory, mask, heading, path_in, path_out, use_thumbs,
      use_file_directories, single_list);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file_list(const char* shares,
                                                                          const char* mask,
                                                                          const char* heading,
                                                                          char*** file_list,
                                                                          size_t* entries,
                                                                          bool use_thumbs,
                                                                          bool use_file_directories)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_file_list( const char* shares, const char* mask, const char* heading, char*** file_list, size_t* entries, bool use_thumbs, bool use_file_directories) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, std::string, size_t, bool, bool> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_list_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<std::string>, size_t> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_list_v1; /* Autogenerated */

  if (shares == nullptr || mask == nullptr || heading == nullptr || file_list == nullptr ||
      entries == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_file_list_v1(
                          shares, mask, heading, *entries, use_thumbs, use_file_directories));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_file_list_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_file_list_v1 t =
        ident.get().as<decltype(t)>();

    const std::vector<std::string>& cpp_file_list = std::get<1>(t);
    *entries = std::get<2>(t);
    assert(cpp_file_list.size() == *entries);
    if (!cpp_file_list.empty())
    {
      *file_list = static_cast<char**>(malloc(*entries * sizeof(char*)));
      for (size_t i = 0; i < *entries; ++i)
        (*file_list)[i] = strdup(cpp_file_list[i].c_str());
    }
    else
    {
      *file_list = nullptr;
    }
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_file_list_v1(
      auto_gen_group.thisClassHdl, shares, mask, heading, file_list, entries, use_thumbs,
      use_file_directories);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_source(const char* path_in,
                                                                       char** path_out,
                                                                       bool allow_network_shares,
                                                                       const char* additional_share,
                                                                       const char* type)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_source( const char* path_in, char** path_out, bool allow_network_shares, const char* additional_share, const char* type) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, bool, std::string, std::string> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_source_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_source_v1; /* Autogenerated */

  if (path_in == nullptr || path_out == nullptr || additional_share == nullptr || type == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_source_v1(
                          path_in, allow_network_shares, additional_share, type));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_source_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_source_v1 t =
        ident.get().as<decltype(t)>();

    *path_out = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_source_v1(
      auto_gen_group.thisClassHdl, path_in, path_out, allow_network_shares, additional_share, type);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_image(const char* shares,
                                                                      const char* heading,
                                                                      const char* path_in,
                                                                      char** path_out)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_image(const char* shares, const char* heading, const char* path_in, char** path_out) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, std::string> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_image_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::string> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_image_v1; /* Autogenerated */

  if (shares == nullptr || heading == nullptr || path_in == nullptr || path_out == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_image_v1(
                          shares, heading, path_in));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_image_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_image_v1 t =
        ident.get().as<decltype(t)>();

    *path_out = strdup(std::get<1>(t).c_str());
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_image_v1(
      auto_gen_group.thisClassHdl, shares, heading, path_in, path_out);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_image_list(const char* shares,
                                                                           const char* heading,
                                                                           char*** file_list,
                                                                           size_t* entries)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_file_browser_show_and_get_image_list(const char* shares, const char* heading, char*** file_list, size_t* entries) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::string, size_t> msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_image_list_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<std::string>, size_t> msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_image_list_v1; /* Autogenerated */

  if (shares == nullptr || heading == nullptr || file_list == nullptr || entries == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_file_browser_show_and_get_image_list_v1(
                          shares, heading, *entries));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_filebrowser_h,
            funcParent_kodi_gui_dialogs_file_browser_show_and_get_image_list_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_file_browser_show_and_get_image_list_v1 t =
        ident.get().as<decltype(t)>();

    const std::vector<std::string>& cpp_file_list = std::get<1>(t);
    *entries = std::get<2>(t);
    assert(cpp_file_list.size() == *entries);
    if (!cpp_file_list.empty())
    {
      *file_list = static_cast<char**>(malloc(*entries * sizeof(char*)));
      for (size_t i = 0; i < *entries; ++i)
        (*file_list)[i] = strdup(cpp_file_list[i].c_str());
    }
    else
    {
      *file_list = nullptr;
    }
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_filebrowser_h;
  return auto_gen_group.kodi_gui_dialogs_file_browser_show_and_get_image_list_v1(
      auto_gen_group.thisClassHdl, shares, heading, file_list, entries);
}

ATTR_DLL_EXPORT void kodi_gui_dialogs_file_browser_clear_file_list(char*** file_list,
                                                                   size_t entries)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_gui_dialogs_file_browser_clear_file_list(char*** file_list, size_t entries) __INTRODUCED_IN_KODI(1);
  // Tuple in:          /* NOTE: msgParent__IN_kodi_gui_dialogs_file_browser_clear_file_list - Override active to use inside dev-kit library only */
  // Tuple out:         /* NOTE: msgParent_OUT_kodi_gui_dialogs_file_browser_clear_file_list - Override active to use inside dev-kit library only */

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_FILE_BROWSER_CLEAR_FILE_LIST_V1>---*/

  if (*file_list)
  {
    for (size_t i = 0; i < entries; ++i)
      free((*file_list)[i]);
    free(*file_list);
    *file_list = nullptr;
  }

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_GUI_DIALOGS_FILE_BROWSER_CLEAR_FILE_LIST_V1_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
