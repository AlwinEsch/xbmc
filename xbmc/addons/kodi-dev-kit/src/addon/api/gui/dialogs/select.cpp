/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "select.h"

#include <string>
#include <vector>

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_gui_dialogs_select_h::InitDirect(directFuncToAddon_gui_dialogs_select_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

/* NOTE: unused (no functions from Kodi to addon here) */

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT int kodi_gui_dialogs_select_open(
    const char* heading, const char* entries[], size_t size, int selected, unsigned int autoclose)
{
  // Original API call: ATTR_DLL_EXPORT int kodi_gui_dialogs_select_open(const char* heading, const char* entries[], size_t size, int selected, unsigned int autoclose) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::vector<std::string>, size_t, int, unsigned int> msgParent__IN_kodi_gui_dialogs_select_open_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<int> msgParent_OUT_kodi_gui_dialogs_select_open_v1; /* Autogenerated */

  if (heading == nullptr || entries == nullptr)
    return -1;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    std::vector<std::string> cpp_entries;
    cpp_entries.reserve(size);
    for (size_t i = 0; i < size; ++i)
    {
      cpp_entries.emplace_back(entries[i] != nullptr ? entries[i] : "");
    }
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_select_open_v1(heading, cpp_entries, size,
                                                                    selected, autoclose));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_select_h, funcParent_kodi_gui_dialogs_select_open_v1, in, out))
      return -1;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_select_open_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_select_h;
  return auto_gen_group.kodi_gui_dialogs_select_open_v1(auto_gen_group.thisClassHdl, heading,
                                                        entries, size, selected, autoclose);
}

ATTR_DLL_EXPORT bool kodi_gui_dialogs_select_open_multi_select(const char* heading,
                                                               const char* entryIDs[],
                                                               const char* entryNames[],
                                                               uint8_t entriesSelected[],
                                                               size_t size,
                                                               unsigned int autoclose)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_gui_dialogs_select_open_multi_select(const char* heading, const char* entryIDs[], const char* entryNames[], uint8_t entriesSelected[], size_t size, unsigned int autoclose) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<std::string, std::vector<std::string>, std::vector<std::string>, std::vector<uint8_t>, size_t, unsigned int> msgParent__IN_kodi_gui_dialogs_select_open_multi_select_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<uint8_t>> msgParent_OUT_kodi_gui_dialogs_select_open_multi_select_v1; /* Autogenerated */

  if (heading == nullptr || entryIDs == nullptr || entryNames == nullptr ||
      entriesSelected == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    std::vector<std::string> cpp_entryIDs;
    cpp_entryIDs.reserve(size);
    for (size_t i = 0; i < size; ++i)
    {
      cpp_entryIDs.emplace_back(entryIDs[i] != nullptr ? entryIDs[i] : "");
    }
    std::vector<std::string> cpp_entryNames;
    cpp_entryNames.reserve(size);
    for (size_t i = 0; i < size; ++i)
    {
      cpp_entryNames.emplace_back(entryNames[i] != nullptr ? entryNames[i] : "");
    }
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_gui_dialogs_select_open_multi_select_v1(
                          heading, cpp_entryIDs, cpp_entryNames,
                          std::vector<uint8_t>(entriesSelected, entriesSelected + size), size,
                          autoclose));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_gui_dialogs_select_h, funcParent_kodi_gui_dialogs_select_open_multi_select_v1,
            in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_gui_dialogs_select_open_multi_select_v1 t = ident.get().as<decltype(t)>();

    std::memcpy(entriesSelected, std::get<1>(t).data(), sizeof(uint8_t) * size);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.gui_dialogs_select_h;
  return auto_gen_group.kodi_gui_dialogs_select_open_multi_select_v1(
      auto_gen_group.thisClassHdl, heading, entryIDs, entryNames, entriesSelected, size, autoclose);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
