/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/audiodecoder.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_AUDIODECODER_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_AUDIODECODER_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_INIT_V1 init; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_READ_PCM_V1 read_pcm; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_SEEK_V1 seek; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_READ_TAG_V1 read_tag; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIODECODER_TRACK_COUNT_V1 track_count; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_AUDIODECODER_FUNC_V1_TO_V1;

union KODI_ADDON_AUDIODECODER_FUNC_UNION
{
  struct KODI_ADDON_AUDIODECODER_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_AudioEngineDataFormat
#define MSGPACK_ADD_ENUM_AudioEngineDataFormat
MSGPACK_ADD_ENUM(AudioEngineDataFormat);
#endif
#ifndef MSGPACK_ADD_ENUM_AudioEngineChannel
#define MSGPACK_ADD_ENUM_AudioEngineChannel
MSGPACK_ADD_ENUM(AudioEngineChannel);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{


struct directFuncToKodi_addoninstance_audiodecoder_h
{
  void* thisClassHdl;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef KODI_ADDON_AUDIODECODER_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_CREATE_V1)(
    void*, KODI_OWN_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_INIT_V1)(
    void*,
    const KODI_ADDON_AUDIODECODER_HDL,
    const char*,
    unsigned int,
    int*,
    int*,
    int*,
    int64_t*,
    int*,
    enum AudioEngineDataFormat*,
    enum AudioEngineChannel[AUDIOENGINE_CH_MAX]);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_READ_TAG_V1)(
    void*, const KODI_ADDON_AUDIODECODER_HDL, const char*, struct AUDIODECODER_INFO_TAG*);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_READ_PCM_V1)(
    void*, const KODI_ADDON_AUDIODECODER_HDL, uint8_t*, size_t, size_t*);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_TRACK_COUNT_V1)(
    void*, const KODI_ADDON_AUDIODECODER_HDL, const char*);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_SEEK_V1)(
    void*, const KODI_ADDON_AUDIODECODER_HDL, int64_t);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIODECODER_DESTROY_V1)(
    void*, KODI_ADDON_AUDIODECODER_HDL);

struct directFuncToAddon_addoninstance_audiodecoder_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_AUDIODECODER_CREATE_V1 kodi_addon_audiodecoder_create_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_DESTROY_V1 kodi_addon_audiodecoder_destroy_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_INIT_V1 kodi_addon_audiodecoder_init_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_READ_PCM_V1 kodi_addon_audiodecoder_read_pcm_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_READ_TAG_V1 kodi_addon_audiodecoder_read_tag_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_SEEK_V1 kodi_addon_audiodecoder_seek_v1;
  PFN_INT_KODI_ADDON_AUDIODECODER_TRACK_COUNT_V1 kodi_addon_audiodecoder_track_count_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_AUDIODECODER_INFO_TAG
{
  IFC_AUDIODECODER_INFO_TAG() = default;
  IFC_AUDIODECODER_INFO_TAG(const AUDIODECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->title)
      title = c_data->title;
    if (c_data->artist)
      artist = c_data->artist;
    if (c_data->album)
      album = c_data->album;
    if (c_data->album_artist)
      album_artist = c_data->album_artist;
    if (c_data->media_type)
      media_type = c_data->media_type;
    if (c_data->genre)
      genre = c_data->genre;
    duration = c_data->duration;
    track = c_data->track;
    disc = c_data->disc;
    if (c_data->disc_subtitle)
      disc_subtitle = c_data->disc_subtitle;
    disc_total = c_data->disc_total;
    if (c_data->release_date)
      release_date = c_data->release_date;
    if (c_data->lyrics)
      lyrics = c_data->lyrics;
    samplerate = c_data->samplerate;
    channels = c_data->channels;
    bitrate = c_data->bitrate;
    if (c_data->comment)
      comment = c_data->comment;
  }

  static inline void CleanCStructure(AUDIODECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->title)
    {
      free(c_data->title);
      c_data->title = nullptr;
    }
    if (c_data->artist)
    {
      free(c_data->artist);
      c_data->artist = nullptr;
    }
    if (c_data->album)
    {
      free(c_data->album);
      c_data->album = nullptr;
    }
    if (c_data->album_artist)
    {
      free(c_data->album_artist);
      c_data->album_artist = nullptr;
    }
    if (c_data->media_type)
    {
      free(c_data->media_type);
      c_data->media_type = nullptr;
    }
    if (c_data->genre)
    {
      free(c_data->genre);
      c_data->genre = nullptr;
    }
    if (c_data->disc_subtitle)
    {
      free(c_data->disc_subtitle);
      c_data->disc_subtitle = nullptr;
    }
    if (c_data->release_date)
    {
      free(c_data->release_date);
      c_data->release_date = nullptr;
    }
    if (c_data->lyrics)
    {
      free(c_data->lyrics);
      c_data->lyrics = nullptr;
    }
    if (c_data->comment)
    {
      free(c_data->comment);
      c_data->comment = nullptr;
    }
  }

  void SetCStructure(AUDIODECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    if (!title.empty())
      c_data->title = strdup(title.c_str());
    if (!artist.empty())
      c_data->artist = strdup(artist.c_str());
    if (!album.empty())
      c_data->album = strdup(album.c_str());
    if (!album_artist.empty())
      c_data->album_artist = strdup(album_artist.c_str());
    if (!media_type.empty())
      c_data->media_type = strdup(media_type.c_str());
    if (!genre.empty())
      c_data->genre = strdup(genre.c_str());
    c_data->duration = duration;
    c_data->track = track;
    c_data->disc = disc;
    if (!disc_subtitle.empty())
      c_data->disc_subtitle = strdup(disc_subtitle.c_str());
    c_data->disc_total = disc_total;
    if (!release_date.empty())
      c_data->release_date = strdup(release_date.c_str());
    if (!lyrics.empty())
      c_data->lyrics = strdup(lyrics.c_str());
    c_data->samplerate = samplerate;
    c_data->channels = channels;
    c_data->bitrate = bitrate;
    if (!comment.empty())
      c_data->comment = strdup(comment.c_str());
  }

  std::string title;
  std::string artist;
  std::string album;
  std::string album_artist;
  std::string media_type;
  std::string genre;
  int duration;
  int track;
  int disc;
  std::string disc_subtitle;
  int disc_total;
  std::string release_date;
  std::string lyrics;
  int samplerate;
  int channels;
  int bitrate;
  std::string comment;

  MSGPACK_DEFINE(title,
                 artist,
                 album,
                 album_artist,
                 media_type,
                 genre,
                 duration,
                 track,
                 disc,
                 disc_subtitle,
                 disc_total,
                 release_date,
                 lyrics,
                 samplerate,
                 channels,
                 bitrate,
                 comment);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_audiodecoder_h : int
{
  funcParent_addoninstance_audiodecoder_h_dummy
} funcParent_addoninstance_audiodecoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_audiodecoder_h : int
{
  funcChild_kodi_addon_audiodecoder_create_v1,
  funcChild_kodi_addon_audiodecoder_destroy_v1,
  funcChild_kodi_addon_audiodecoder_init_v1,
  funcChild_kodi_addon_audiodecoder_read_pcm_v1,
  funcChild_kodi_addon_audiodecoder_seek_v1,
  funcChild_kodi_addon_audiodecoder_read_tag_v1,
  funcChild_kodi_addon_audiodecoder_track_count_v1,
} funcChild_addoninstance_audiodecoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef KODI_ADDON_AUDIODECODER_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audiodecoder_create_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_audiodecoder_create_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_DESTROY_V1)(KODI_ADDON_AUDIODECODER_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audiodecoder_destroy_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_audiodecoder_destroy_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_INIT_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file, unsigned int filecache, int* channels, int* samplerate, int* bitspersample, int64_t* totaltime, int* bitrate, enum AudioEngineDataFormat* format, enum AudioEngineChannel info[AUDIOENGINE_CH_MAX]);
typedef std::tuple<PtrValue, std::string, unsigned int, int, int, int, int64_t, int, AudioEngineDataFormat, std::array<AudioEngineChannel, AUDIOENGINE_CH_MAX>> msgChild__IN_kodi_addon_audiodecoder_init_v1; /* Autogenerated */
typedef std::tuple<bool, int, int, int, int64_t, int, AudioEngineDataFormat, std::array<AudioEngineChannel, AUDIOENGINE_CH_MAX>> msgChild_OUT_kodi_addon_audiodecoder_init_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_READ_PCM_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, uint8_t* buffer, size_t size, size_t* actualsize);
typedef std::tuple<PtrValue, size_t, size_t> msgChild__IN_kodi_addon_audiodecoder_read_pcm_v1; /* Autogenerated */
typedef std::tuple<int, std::vector<uint8_t>, size_t> msgChild_OUT_kodi_addon_audiodecoder_read_pcm_v1; /* Autogenerated */
// Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_SEEK_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, int64_t time);
typedef std::tuple<PtrValue, int64_t> msgChild__IN_kodi_addon_audiodecoder_seek_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_audiodecoder_seek_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_READ_TAG_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file, struct AUDIODECODER_INFO_TAG* tag);
typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_audiodecoder_read_tag_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_AUDIODECODER_INFO_TAG> msgChild_OUT_kodi_addon_audiodecoder_read_tag_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIODECODER_TRACK_COUNT_V1)(const KODI_ADDON_AUDIODECODER_HDL hdl, const char* file);
typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_audiodecoder_track_count_v1; /* Autogenerated */
typedef std::tuple<int> msgChild_OUT_kodi_addon_audiodecoder_track_count_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
