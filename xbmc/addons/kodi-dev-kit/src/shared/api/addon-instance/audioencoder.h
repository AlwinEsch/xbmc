/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/audioencoder.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_AUDIOENCODER_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_AUDIOENCODER_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIOENCODER_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIOENCODER_START_V1 start; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIOENCODER_ENCODE_V1 encode; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_AUDIOENCODER_FINISH_V1 finish; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_AUDIOENCODER_FUNC_V1_TO_V1;

union KODI_ADDON_AUDIOENCODER_FUNC_UNION
{
  struct KODI_ADDON_AUDIOENCODER_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_SEEK_V1)(void*,
                                                                            KODI_OWN_HDL,
                                                                            size_t,
                                                                            int);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_WRITE_V1)(void*,
                                                                             KODI_OWN_HDL,
                                                                             const uint8_t*,
                                                                             size_t);

struct directFuncToKodi_addoninstance_audioencoder_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_AUDIOENCODER_SEEK_V1 kodi_addon_audioencoder_seek_v1;
  PFN_INT_KODI_ADDON_AUDIOENCODER_WRITE_V1 kodi_addon_audioencoder_write_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef KODI_ADDON_AUDIOENCODER_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_CREATE_V1)(
    void*, KODI_OWN_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_FINISH_V1)(
    void*, KODI_ADDON_AUDIOENCODER_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_START_V1)(
    void*, KODI_ADDON_AUDIOENCODER_HDL, const struct AUDIOENCODER_INFO_TAG*);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_ENCODE_V1)(
    void*, KODI_ADDON_AUDIOENCODER_HDL, const uint8_t*, size_t);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_AUDIOENCODER_DESTROY_V1)(
    void*, KODI_ADDON_AUDIOENCODER_HDL);

struct directFuncToAddon_addoninstance_audioencoder_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_AUDIOENCODER_CREATE_V1 kodi_addon_audioencoder_create_v1;
  PFN_INT_KODI_ADDON_AUDIOENCODER_DESTROY_V1 kodi_addon_audioencoder_destroy_v1;
  PFN_INT_KODI_ADDON_AUDIOENCODER_ENCODE_V1 kodi_addon_audioencoder_encode_v1;
  PFN_INT_KODI_ADDON_AUDIOENCODER_FINISH_V1 kodi_addon_audioencoder_finish_v1;
  PFN_INT_KODI_ADDON_AUDIOENCODER_START_V1 kodi_addon_audioencoder_start_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_AUDIOENCODER_INFO_TAG
{
  IFC_AUDIOENCODER_INFO_TAG() = default;
  IFC_AUDIOENCODER_INFO_TAG(const AUDIOENCODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->title)
      title = c_data->title;
    if (c_data->artist)
      artist = c_data->artist;
    if (c_data->album)
      album = c_data->album;
    if (c_data->album_artist)
      album_artist = c_data->album_artist;
    if (c_data->media_type)
      media_type = c_data->media_type;
    if (c_data->genre)
      genre = c_data->genre;
    duration = c_data->duration;
    track = c_data->track;
    disc = c_data->disc;
    if (c_data->disc_subtitle)
      disc_subtitle = c_data->disc_subtitle;
    disc_total = c_data->disc_total;
    if (c_data->release_date)
      release_date = c_data->release_date;
    if (c_data->lyrics)
      lyrics = c_data->lyrics;
    samplerate = c_data->samplerate;
    channels = c_data->channels;
    bits_per_sample = c_data->bits_per_sample;
    track_length = c_data->track_length;
    if (c_data->comment)
      comment = c_data->comment;
  }

  void SetCStructure(AUDIOENCODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->title = title.c_str();
    c_data->artist = artist.c_str();
    c_data->album = album.c_str();
    c_data->album_artist = album_artist.c_str();
    c_data->media_type = media_type.c_str();
    c_data->genre = genre.c_str();
    c_data->duration = duration;
    c_data->track = track;
    c_data->disc = disc;
    c_data->disc_subtitle = disc_subtitle.c_str();
    c_data->disc_total = disc_total;
    c_data->release_date = release_date.c_str();
    c_data->lyrics = lyrics.c_str();
    c_data->samplerate = samplerate;
    c_data->channels = channels;
    c_data->bits_per_sample = bits_per_sample;
    c_data->track_length = track_length;
    c_data->comment = comment.c_str();
  }

  std::string title;
  std::string artist;
  std::string album;
  std::string album_artist;
  std::string media_type;
  std::string genre;
  int duration;
  int track;
  int disc;
  std::string disc_subtitle;
  int disc_total;
  std::string release_date;
  std::string lyrics;
  int samplerate;
  int channels;
  int bits_per_sample;
  int track_length;
  std::string comment;

  MSGPACK_DEFINE(title,
                 artist,
                 album,
                 album_artist,
                 media_type,
                 genre,
                 duration,
                 track,
                 disc,
                 disc_subtitle,
                 disc_total,
                 release_date,
                 lyrics,
                 samplerate,
                 channels,
                 bits_per_sample,
                 track_length,
                 comment);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_audioencoder_h : int
{
  funcParent_kodi_addon_audioencoder_write_v1,
  funcParent_kodi_addon_audioencoder_seek_v1,
} funcParent_addoninstance_audioencoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_write(KODI_OWN_HDL hdl, const uint8_t* data, size_t len) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t> msgParent__IN_kodi_addon_audioencoder_write_v1; /* Autogenerated */
typedef std::tuple<ssize_t> msgParent_OUT_kodi_addon_audioencoder_write_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT ssize_t kodi_addon_audioencoder_seek(KODI_OWN_HDL hdl, size_t pos, int whence) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, size_t, int> msgParent__IN_kodi_addon_audioencoder_seek_v1; /* Autogenerated */
typedef std::tuple<ssize_t> msgParent_OUT_kodi_addon_audioencoder_seek_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_audioencoder_h : int
{
  funcChild_kodi_addon_audioencoder_create_v1,
  funcChild_kodi_addon_audioencoder_destroy_v1,
  funcChild_kodi_addon_audioencoder_start_v1,
  funcChild_kodi_addon_audioencoder_encode_v1,
  funcChild_kodi_addon_audioencoder_finish_v1,
} funcChild_addoninstance_audioencoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef KODI_ADDON_AUDIOENCODER_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_create_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_audioencoder_create_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_DESTROY_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_destroy_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_audioencoder_destroy_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_START_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl, const struct AUDIOENCODER_INFO_TAG* tag);
typedef std::tuple<PtrValue, IFC_AUDIOENCODER_INFO_TAG> msgChild__IN_kodi_addon_audioencoder_start_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_audioencoder_start_v1; /* Autogenerated */
// Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_ENCODE_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl, const uint8_t* pbt_stream, size_t num_bytes_read);
typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t> msgChild__IN_kodi_addon_audioencoder_encode_v1; /* Autogenerated */
typedef std::tuple<ssize_t> msgChild_OUT_kodi_addon_audioencoder_encode_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_AUDIOENCODER_FINISH_V1)(KODI_ADDON_AUDIOENCODER_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_audioencoder_finish_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_audioencoder_finish_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
