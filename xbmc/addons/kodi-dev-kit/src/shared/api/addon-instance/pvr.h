/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/pvr.h"
#include "src/shared/SharedGroups.h"
#include "src/shared/api/addon-instance/pvr/pvr_channel_groups.h"
#include "src/shared/api/addon-instance/pvr/pvr_channels.h"
#include "src/shared/api/addon-instance/pvr/pvr_defines.h"
#include "src/shared/api/addon-instance/pvr/pvr_edl.h"
#include "src/shared/api/addon-instance/pvr/pvr_epg.h"
#include "src/shared/api/addon-instance/pvr/pvr_general.h"
#include "src/shared/api/addon-instance/pvr/pvr_menu_hook.h"
#include "src/shared/api/addon-instance/pvr/pvr_recordings.h"
#include "src/shared/api/addon-instance/pvr/pvr_timers.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_PVR_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_PVR_GET_CAPABILITIES_V1 get_capabilities; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_BACKEND_NAME_V1 get_backend_name; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_BACKEND_VERSION_V1 get_backend_version; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_BACKEND_HOSTNAME_V1 get_backend_hostname; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CONNECTION_STRING_V1
      get_connection_string; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_DRIVE_SPACE_V1 get_drive_space; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_CALL_SETTINGS_MENU_HOOK_V1
      call_settings_menu_hook; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNELS_AMOUNT_V1 get_channels_amount; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNELS_V1 get_channels; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNEL_STREAM_PROPERTIES_V1
      get_channel_stream_properties; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_SIGNAL_STATUS_V1 get_signal_status; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_DESCRAMBLE_INFO_V1 get_descramble_info; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_AMOUNT_V1
      get_channel_groups_amount; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_V1 get_channel_groups; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUP_MEMBERS_V1
      get_channel_group_members; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_DELETE_CHANNEL_V1 delete_channel; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_RENAME_CHANNEL_V1 rename_channel; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SETTINGS_V1
      open_dialog_channel_settings; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_ADD_V1
      open_dialog_channel_add; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SCAN_V1
      open_dialog_channel_scan; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_CALL_CHANNEL_MENU_HOOK_V1
      call_channel_menu_hook; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_EPG_FOR_CHANNEL_V1 get_epg_for_channel; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_IS_EPG_TAG_RECORDABLE_V1
      is_epg_tag_recordable; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_IS_EPG_TAG_PLAYABLE_V1 is_epg_tag_playable; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_EPG_TAG_EDL_V1 get_epg_tag_edl; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_EPG_TAG_STREAM_PROPERTIES_V1
      get_epg_tag_stream_properties; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_SET_EPG_MAX_PAST_DAYS_V1
      set_epg_max_past_days; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_SET_EPG_MAX_FUTURE_DAYS_V1
      set_epg_max_future_days; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_CALL_EPG_MENU_HOOK_V1 call_epg_menu_hook; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDINGS_AMOUNT_V1
      get_recordings_amount; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDINGS_V1 get_recordings; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_DELETE_RECORDING_V1 delete_recording; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_UNDELETE_RECORDING_V1 undelete_recording; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_DELETE_ALL_RECORDINGS_FROM_TRASH_V1
      delete_all_recordings_from_trash; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_RENAME_RECORDING_V1 rename_recording; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_SET_RECORDING_LIFETIME_V1
      set_recording_lifetime; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_SET_RECORDING_PLAY_COUNT_V1
      set_recording_play_count; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_SET_RECORDING_LAST_PLAYED_POSITION_V1
      set_recording_last_played_position; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDING_LAST_PLAYED_POSITION_V1
      get_recording_last_played_position; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDING_EDL_V1 get_recording_edl; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDING_SIZE_V1 get_recording_size; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_RECORDING_STREAM_PROPERTIES_V1
      get_recording_stream_properties; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_CALL_RECORDING_MENU_HOOK_V1
      call_recording_menu_hook; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_TIMER_TYPES_V1 get_timer_types; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_TIMERS_AMOUNT_V1 get_timers_amount; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_GET_TIMERS_V1 get_timers; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_ADD_TIMER_V1 add_timer; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_DELETE_TIMER_V1 delete_timer; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_UPDATE_TIMER_V1 update_timer; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_CALL_TIMER_MENU_HOOK_V1 call_timer_menu_hook; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_ON_SYSTEM_SLEEP_V1 on_system_sleep; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_ON_SYSTEM_WAKE_V1 on_system_wake; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_ON_POWER_SAVING_ACTIVATED_V1
      on_power_saving_activated; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_PVR_ON_POWER_SAVING_DEACTIVATED_V1
      on_power_saving_deactivated; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_PVR_FUNC_V1_TO_V1;

union KODI_ADDON_PVR_FUNC_UNION
{
  struct KODI_ADDON_PVR_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_PVR_ERROR
#define MSGPACK_ADD_ENUM_PVR_ERROR
MSGPACK_ADD_ENUM(PVR_ERROR);
#endif
#ifndef MSGPACK_ADD_ENUM_PVR_CONNECTION_STATE
#define MSGPACK_ADD_ENUM_PVR_CONNECTION_STATE
MSGPACK_ADD_ENUM(PVR_CONNECTION_STATE);
#endif
#ifndef MSGPACK_ADD_ENUM_EPG_EVENT_STATE
#define MSGPACK_ADD_ENUM_EPG_EVENT_STATE
MSGPACK_ADD_ENUM(EPG_EVENT_STATE);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_EPG_MAX_FUTURE_DAYS_V1)(void*,
                                                                                  KODI_OWN_HDL);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_EPG_MAX_PAST_DAYS_V1)(void*,
                                                                                KODI_OWN_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ADD_MENU_HOOK_V1)(
    void*, KODI_OWN_HDL, const struct PVR_MENUHOOK*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CONNECTION_STATE_CHANGE_V1)(
    void*, KODI_OWN_HDL, const char*, enum PVR_CONNECTION_STATE, const char*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_EPG_EVENT_STATE_CHANGE_V1)(
    void*, KODI_OWN_HDL, struct EPG_TAG*, enum EPG_EVENT_STATE);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_RECORDING_NOTIFICATION_V1)(
    void*, KODI_OWN_HDL, const char*, const char*, bool);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_ENTRY_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_MEMBER_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL_GROUP_MEMBER*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL_GROUP*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_EPG_ENTRY_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct EPG_TAG*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_RECORDING_ENTRY_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_RECORDING*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRANSFER_TIMER_ENTRY_V1)(
    void*, KODI_OWN_HDL, const KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_TIMER*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRIGGER_CHANNEL_GROUPS_UPDATE_V1)(
    void*, KODI_OWN_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRIGGER_CHANNEL_UPDATE_V1)(void*,
                                                                                  KODI_OWN_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRIGGER_EPG_UPDATE_V1)(void*,
                                                                              KODI_OWN_HDL,
                                                                              unsigned int);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRIGGER_RECORDING_UPDATE_V1)(void*,
                                                                                    KODI_OWN_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_TRIGGER_TIMER_UPDATE_V1)(void*,
                                                                                KODI_OWN_HDL);

struct directFuncToKodi_addoninstance_pvr_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_PVR_ADD_MENU_HOOK_V1 kodi_addon_pvr_add_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_CONNECTION_STATE_CHANGE_V1 kodi_addon_pvr_connection_state_change_v1;
  PFN_INT_KODI_ADDON_PVR_EPG_EVENT_STATE_CHANGE_V1 kodi_addon_pvr_epg_event_state_change_v1;
  PFN_INT_KODI_ADDON_PVR_GET_EPG_MAX_FUTURE_DAYS_V1 kodi_addon_pvr_get_epg_max_future_days_v1;
  PFN_INT_KODI_ADDON_PVR_GET_EPG_MAX_PAST_DAYS_V1 kodi_addon_pvr_get_epg_max_past_days_v1;
  PFN_INT_KODI_ADDON_PVR_RECORDING_NOTIFICATION_V1 kodi_addon_pvr_recording_notification_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_ENTRY_V1 kodi_addon_pvr_transfer_channel_entry_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_MEMBER_V1
      kodi_addon_pvr_transfer_channel_group_member_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_CHANNEL_GROUP_V1 kodi_addon_pvr_transfer_channel_group_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_EPG_ENTRY_V1 kodi_addon_pvr_transfer_epg_entry_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_RECORDING_ENTRY_V1 kodi_addon_pvr_transfer_recording_entry_v1;
  PFN_INT_KODI_ADDON_PVR_TRANSFER_TIMER_ENTRY_V1 kodi_addon_pvr_transfer_timer_entry_v1;
  PFN_INT_KODI_ADDON_PVR_TRIGGER_CHANNEL_GROUPS_UPDATE_V1
      kodi_addon_pvr_trigger_channel_groups_update_v1;
  PFN_INT_KODI_ADDON_PVR_TRIGGER_CHANNEL_UPDATE_V1 kodi_addon_pvr_trigger_channel_update_v1;
  PFN_INT_KODI_ADDON_PVR_TRIGGER_EPG_UPDATE_V1 kodi_addon_pvr_trigger_epg_update_v1;
  PFN_INT_KODI_ADDON_PVR_TRIGGER_RECORDING_UPDATE_V1 kodi_addon_pvr_trigger_recording_update_v1;
  PFN_INT_KODI_ADDON_PVR_TRIGGER_TIMER_UPDATE_V1 kodi_addon_pvr_trigger_timer_update_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ADD_TIMER_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_TIMER*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CALL_CHANNEL_MENU_HOOK_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_MENUHOOK*, const struct PVR_CHANNEL*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CALL_EPG_MENU_HOOK_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_MENUHOOK*, const struct EPG_TAG*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CALL_RECORDING_MENU_HOOK_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_MENUHOOK*, const struct PVR_RECORDING*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CALL_SETTINGS_MENU_HOOK_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_MENUHOOK*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_CALL_TIMER_MENU_HOOK_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_MENUHOOK*, const struct PVR_TIMER*);
typedef enum PVR_ERROR(
    ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_DELETE_ALL_RECORDINGS_FROM_TRASH_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_DELETE_CHANNEL_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_CHANNEL*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_DELETE_RECORDING_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_DELETE_TIMER_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_TIMER*, bool);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_BACKEND_HOSTNAME_V1)(
    void*, KODI_ADDON_PVR_HDL, char*, size_t);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_BACKEND_NAME_V1)(
    void*, KODI_ADDON_PVR_HDL, char*, size_t);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_BACKEND_VERSION_V1)(
    void*, KODI_ADDON_PVR_HDL, char*, size_t);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CAPABILITIES_V1)(
    void*, KODI_ADDON_PVR_HDL, struct PVR_ADDON_CAPABILITIES*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNELS_AMOUNT_V1)(
    void*, KODI_ADDON_PVR_HDL, int*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNELS_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL, bool);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_AMOUNT_V1)(
    void*, KODI_ADDON_PVR_HDL, int*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL, bool);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUP_MEMBERS_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL, const struct PVR_CHANNEL_GROUP*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_STREAM_PROPERTIES_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_CHANNEL*, struct PVR_NAMED_VALUE*, size_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_CONNECTION_STRING_V1)(
    void*, KODI_ADDON_PVR_HDL, char*, size_t);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_DESCRAMBLE_INFO_V1)(
    void*, KODI_ADDON_PVR_HDL, int, struct PVR_DESCRAMBLE_INFO*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_DRIVE_SPACE_V1)(
    void*, KODI_ADDON_PVR_HDL, uint64_t*, uint64_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_EPG_FOR_CHANNEL_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL, int, time_t, time_t);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_EPG_TAG_EDL_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct EPG_TAG*, struct PVR_EDL_ENTRY[], size_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_EPG_TAG_STREAM_PROPERTIES_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct EPG_TAG*, struct PVR_NAMED_VALUE*, size_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDINGS_AMOUNT_V1)(
    void*, KODI_ADDON_PVR_HDL, bool, int*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDINGS_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL, bool);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDING_EDL_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, struct PVR_EDL_ENTRY[], size_t*);
typedef enum PVR_ERROR(
    ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDING_LAST_PLAYED_POSITION_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, int*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDING_SIZE_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, int64_t*);
typedef enum PVR_ERROR(
    ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_RECORDING_STREAM_PROPERTIES_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, struct PVR_NAMED_VALUE*, size_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_SIGNAL_STATUS_V1)(
    void*, KODI_ADDON_PVR_HDL, int, struct PVR_SIGNAL_STATUS*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_TIMERS_AMOUNT_V1)(
    void*, KODI_ADDON_PVR_HDL, int*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_TIMERS_V1)(
    void*, KODI_ADDON_PVR_HDL, KODI_ADDON_PVR_TRANSFER_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_GET_TIMER_TYPES_V1)(
    void*, KODI_ADDON_PVR_HDL, struct PVR_TIMER_TYPE[], size_t*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_IS_EPG_TAG_PLAYABLE_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct EPG_TAG*, bool*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_IS_EPG_TAG_RECORDABLE_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct EPG_TAG*, bool*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ON_POWER_SAVING_ACTIVATED_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ON_POWER_SAVING_DEACTIVATED_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ON_SYSTEM_SLEEP_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_ON_SYSTEM_WAKE_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_ADD_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_CHANNEL*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SCAN_V1)(
    void*, KODI_ADDON_PVR_HDL);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SETTINGS_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_CHANNEL*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_RENAME_CHANNEL_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_CHANNEL*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_RENAME_RECORDING_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_SET_EPG_MAX_FUTURE_DAYS_V1)(
    void*, KODI_ADDON_PVR_HDL, int);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_SET_EPG_MAX_PAST_DAYS_V1)(
    void*, KODI_ADDON_PVR_HDL, int);
typedef enum PVR_ERROR(
    ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_SET_RECORDING_LAST_PLAYED_POSITION_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, int);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_SET_RECORDING_LIFETIME_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_SET_RECORDING_PLAY_COUNT_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*, int);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_UNDELETE_RECORDING_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_RECORDING*);
typedef enum PVR_ERROR(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_PVR_UPDATE_TIMER_V1)(
    void*, KODI_ADDON_PVR_HDL, const struct PVR_TIMER*);

struct directFuncToAddon_addoninstance_pvr_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_PVR_ADD_TIMER_V1 kodi_addon_pvr_add_timer_v1;
  PFN_INT_KODI_ADDON_PVR_CALL_CHANNEL_MENU_HOOK_V1 kodi_addon_pvr_call_channel_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_CALL_EPG_MENU_HOOK_V1 kodi_addon_pvr_call_epg_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_CALL_RECORDING_MENU_HOOK_V1 kodi_addon_pvr_call_recording_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_CALL_SETTINGS_MENU_HOOK_V1 kodi_addon_pvr_call_settings_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_CALL_TIMER_MENU_HOOK_V1 kodi_addon_pvr_call_timer_menu_hook_v1;
  PFN_INT_KODI_ADDON_PVR_DELETE_ALL_RECORDINGS_FROM_TRASH_V1
      kodi_addon_pvr_delete_all_recordings_from_trash_v1;
  PFN_INT_KODI_ADDON_PVR_DELETE_CHANNEL_V1 kodi_addon_pvr_delete_channel_v1;
  PFN_INT_KODI_ADDON_PVR_DELETE_RECORDING_V1 kodi_addon_pvr_delete_recording_v1;
  PFN_INT_KODI_ADDON_PVR_DELETE_TIMER_V1 kodi_addon_pvr_delete_timer_v1;
  PFN_INT_KODI_ADDON_PVR_GET_BACKEND_HOSTNAME_V1 kodi_addon_pvr_get_backend_hostname_v1;
  PFN_INT_KODI_ADDON_PVR_GET_BACKEND_NAME_V1 kodi_addon_pvr_get_backend_name_v1;
  PFN_INT_KODI_ADDON_PVR_GET_BACKEND_VERSION_V1 kodi_addon_pvr_get_backend_version_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CAPABILITIES_V1 kodi_addon_pvr_get_capabilities_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNELS_AMOUNT_V1 kodi_addon_pvr_get_channels_amount_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNELS_V1 kodi_addon_pvr_get_channels_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_AMOUNT_V1 kodi_addon_pvr_get_channel_groups_amount_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_V1 kodi_addon_pvr_get_channel_groups_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_GROUP_MEMBERS_V1 kodi_addon_pvr_get_channel_group_members_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CHANNEL_STREAM_PROPERTIES_V1
      kodi_addon_pvr_get_channel_stream_properties_v1;
  PFN_INT_KODI_ADDON_PVR_GET_CONNECTION_STRING_V1 kodi_addon_pvr_get_connection_string_v1;
  PFN_INT_KODI_ADDON_PVR_GET_DESCRAMBLE_INFO_V1 kodi_addon_pvr_get_descramble_info_v1;
  PFN_INT_KODI_ADDON_PVR_GET_DRIVE_SPACE_V1 kodi_addon_pvr_get_drive_space_v1;
  PFN_INT_KODI_ADDON_PVR_GET_EPG_FOR_CHANNEL_V1 kodi_addon_pvr_get_epg_for_channel_v1;
  PFN_INT_KODI_ADDON_PVR_GET_EPG_TAG_EDL_V1 kodi_addon_pvr_get_epg_tag_edl_v1;
  PFN_INT_KODI_ADDON_PVR_GET_EPG_TAG_STREAM_PROPERTIES_V1
      kodi_addon_pvr_get_epg_tag_stream_properties_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDINGS_AMOUNT_V1 kodi_addon_pvr_get_recordings_amount_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDINGS_V1 kodi_addon_pvr_get_recordings_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDING_EDL_V1 kodi_addon_pvr_get_recording_edl_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDING_LAST_PLAYED_POSITION_V1
      kodi_addon_pvr_get_recording_last_played_position_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDING_SIZE_V1 kodi_addon_pvr_get_recording_size_v1;
  PFN_INT_KODI_ADDON_PVR_GET_RECORDING_STREAM_PROPERTIES_V1
      kodi_addon_pvr_get_recording_stream_properties_v1;
  PFN_INT_KODI_ADDON_PVR_GET_SIGNAL_STATUS_V1 kodi_addon_pvr_get_signal_status_v1;
  PFN_INT_KODI_ADDON_PVR_GET_TIMERS_AMOUNT_V1 kodi_addon_pvr_get_timers_amount_v1;
  PFN_INT_KODI_ADDON_PVR_GET_TIMERS_V1 kodi_addon_pvr_get_timers_v1;
  PFN_INT_KODI_ADDON_PVR_GET_TIMER_TYPES_V1 kodi_addon_pvr_get_timer_types_v1;
  PFN_INT_KODI_ADDON_PVR_IS_EPG_TAG_PLAYABLE_V1 kodi_addon_pvr_is_epg_tag_playable_v1;
  PFN_INT_KODI_ADDON_PVR_IS_EPG_TAG_RECORDABLE_V1 kodi_addon_pvr_is_epg_tag_recordable_v1;
  PFN_INT_KODI_ADDON_PVR_ON_POWER_SAVING_ACTIVATED_V1 kodi_addon_pvr_on_power_saving_activated_v1;
  PFN_INT_KODI_ADDON_PVR_ON_POWER_SAVING_DEACTIVATED_V1
      kodi_addon_pvr_on_power_saving_deactivated_v1;
  PFN_INT_KODI_ADDON_PVR_ON_SYSTEM_SLEEP_V1 kodi_addon_pvr_on_system_sleep_v1;
  PFN_INT_KODI_ADDON_PVR_ON_SYSTEM_WAKE_V1 kodi_addon_pvr_on_system_wake_v1;
  PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_ADD_V1 kodi_addon_pvr_open_dialog_channel_add_v1;
  PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SCAN_V1 kodi_addon_pvr_open_dialog_channel_scan_v1;
  PFN_INT_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SETTINGS_V1
      kodi_addon_pvr_open_dialog_channel_settings_v1;
  PFN_INT_KODI_ADDON_PVR_RENAME_CHANNEL_V1 kodi_addon_pvr_rename_channel_v1;
  PFN_INT_KODI_ADDON_PVR_RENAME_RECORDING_V1 kodi_addon_pvr_rename_recording_v1;
  PFN_INT_KODI_ADDON_PVR_SET_EPG_MAX_FUTURE_DAYS_V1 kodi_addon_pvr_set_epg_max_future_days_v1;
  PFN_INT_KODI_ADDON_PVR_SET_EPG_MAX_PAST_DAYS_V1 kodi_addon_pvr_set_epg_max_past_days_v1;
  PFN_INT_KODI_ADDON_PVR_SET_RECORDING_LAST_PLAYED_POSITION_V1
      kodi_addon_pvr_set_recording_last_played_position_v1;
  PFN_INT_KODI_ADDON_PVR_SET_RECORDING_LIFETIME_V1 kodi_addon_pvr_set_recording_lifetime_v1;
  PFN_INT_KODI_ADDON_PVR_SET_RECORDING_PLAY_COUNT_V1 kodi_addon_pvr_set_recording_play_count_v1;
  PFN_INT_KODI_ADDON_PVR_UNDELETE_RECORDING_V1 kodi_addon_pvr_undelete_recording_v1;
  PFN_INT_KODI_ADDON_PVR_UPDATE_TIMER_V1 kodi_addon_pvr_update_timer_v1;
};

//}}}

typedef enum funcParent_addoninstance_pvr_h : int
{
  funcParent_kodi_addon_pvr_get_epg_max_future_days_v1,
  funcParent_kodi_addon_pvr_get_epg_max_past_days_v1,
  funcParent_kodi_addon_pvr_add_menu_hook_v1,
  funcParent_kodi_addon_pvr_recording_notification_v1,
  funcParent_kodi_addon_pvr_connection_state_change_v1,
  funcParent_kodi_addon_pvr_epg_event_state_change_v1,
  funcParent_kodi_addon_pvr_transfer_channel_entry_v1,
  funcParent_kodi_addon_pvr_transfer_channel_group_v1,
  funcParent_kodi_addon_pvr_transfer_channel_group_member_v1,
  funcParent_kodi_addon_pvr_transfer_epg_entry_v1,
  funcParent_kodi_addon_pvr_transfer_recording_entry_v1,
  funcParent_kodi_addon_pvr_transfer_timer_entry_v1,
  funcParent_kodi_addon_pvr_trigger_channel_update_v1,
  funcParent_kodi_addon_pvr_trigger_channel_groups_update_v1,
  funcParent_kodi_addon_pvr_trigger_epg_update_v1,
  funcParent_kodi_addon_pvr_trigger_recording_update_v1,
  funcParent_kodi_addon_pvr_trigger_timer_update_v1,
} funcParent_addoninstance_pvr_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_future_days(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_get_epg_max_future_days_v1; /* Autogenerated */
typedef std::tuple<int> msgParent_OUT_kodi_addon_pvr_get_epg_max_future_days_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int kodi_addon_pvr_get_epg_max_past_days(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_get_epg_max_past_days_v1; /* Autogenerated */
typedef std::tuple<int> msgParent_OUT_kodi_addon_pvr_get_epg_max_past_days_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_add_menu_hook(KODI_OWN_HDL hdl, const struct PVR_MENUHOOK* hook) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK> msgParent__IN_kodi_addon_pvr_add_menu_hook_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_add_menu_hook_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_recording_notification(KODI_OWN_HDL hdl, const char* name, const char* fileName, bool on) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::string, std::string, bool> msgParent__IN_kodi_addon_pvr_recording_notification_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_recording_notification_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_connection_state_change(KODI_OWN_HDL hdl, const char* strConnectionString, enum PVR_CONNECTION_STATE newState, const char* strMessage) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::string, PVR_CONNECTION_STATE, std::string> msgParent__IN_kodi_addon_pvr_connection_state_change_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_connection_state_change_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_epg_event_state_change(KODI_OWN_HDL hdl, struct EPG_TAG* tag, enum EPG_EVENT_STATE newState) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, EPG_EVENT_STATE> msgParent__IN_kodi_addon_pvr_epg_event_state_change_v1; /* Autogenerated */
typedef std::tuple<IFC_EPG_TAG> msgParent_OUT_kodi_addon_pvr_epg_event_state_change_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_entry( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL* chan) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL> msgParent__IN_kodi_addon_pvr_transfer_channel_entry_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_entry_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP* group) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP> msgParent__IN_kodi_addon_pvr_transfer_channel_group_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_group_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_channel_group_member( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP_MEMBER* member) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP_MEMBER> msgParent__IN_kodi_addon_pvr_transfer_channel_group_member_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_channel_group_member_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_epg_entry(KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct EPG_TAG* epgentry) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_EPG_TAG> msgParent__IN_kodi_addon_pvr_transfer_epg_entry_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_epg_entry_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_recording_entry( KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_RECORDING* recording) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_RECORDING> msgParent__IN_kodi_addon_pvr_transfer_recording_entry_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_recording_entry_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_transfer_timer_entry(KODI_OWN_HDL hdl, const KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_TIMER* timer) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_TIMER> msgParent__IN_kodi_addon_pvr_transfer_timer_entry_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_transfer_timer_entry_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_channel_update_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_channel_update_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_channel_groups_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_channel_groups_update_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_channel_groups_update_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_epg_update(KODI_OWN_HDL hdl, unsigned int iChannelUid) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, unsigned int> msgParent__IN_kodi_addon_pvr_trigger_epg_update_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_epg_update_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_recording_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_recording_update_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_recording_update_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_pvr_trigger_timer_update(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_pvr_trigger_timer_update_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_pvr_trigger_timer_update_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_pvr_h : int
{
  funcChild_kodi_addon_pvr_get_capabilities_v1,
  funcChild_kodi_addon_pvr_get_backend_name_v1,
  funcChild_kodi_addon_pvr_get_backend_version_v1,
  funcChild_kodi_addon_pvr_get_backend_hostname_v1,
  funcChild_kodi_addon_pvr_get_connection_string_v1,
  funcChild_kodi_addon_pvr_get_drive_space_v1,
  funcChild_kodi_addon_pvr_call_settings_menu_hook_v1,
  funcChild_kodi_addon_pvr_get_channels_amount_v1,
  funcChild_kodi_addon_pvr_get_channels_v1,
  funcChild_kodi_addon_pvr_get_channel_stream_properties_v1,
  funcChild_kodi_addon_pvr_get_signal_status_v1,
  funcChild_kodi_addon_pvr_get_descramble_info_v1,
  funcChild_kodi_addon_pvr_get_channel_groups_amount_v1,
  funcChild_kodi_addon_pvr_get_channel_groups_v1,
  funcChild_kodi_addon_pvr_get_channel_group_members_v1,
  funcChild_kodi_addon_pvr_delete_channel_v1,
  funcChild_kodi_addon_pvr_rename_channel_v1,
  funcChild_kodi_addon_pvr_open_dialog_channel_settings_v1,
  funcChild_kodi_addon_pvr_open_dialog_channel_add_v1,
  funcChild_kodi_addon_pvr_open_dialog_channel_scan_v1,
  funcChild_kodi_addon_pvr_call_channel_menu_hook_v1,
  funcChild_kodi_addon_pvr_get_epg_for_channel_v1,
  funcChild_kodi_addon_pvr_is_epg_tag_recordable_v1,
  funcChild_kodi_addon_pvr_is_epg_tag_playable_v1,
  funcChild_kodi_addon_pvr_get_epg_tag_edl_v1,
  funcChild_kodi_addon_pvr_get_epg_tag_stream_properties_v1,
  funcChild_kodi_addon_pvr_set_epg_max_past_days_v1,
  funcChild_kodi_addon_pvr_set_epg_max_future_days_v1,
  funcChild_kodi_addon_pvr_call_epg_menu_hook_v1,
  funcChild_kodi_addon_pvr_get_recordings_amount_v1,
  funcChild_kodi_addon_pvr_get_recordings_v1,
  funcChild_kodi_addon_pvr_delete_recording_v1,
  funcChild_kodi_addon_pvr_undelete_recording_v1,
  funcChild_kodi_addon_pvr_delete_all_recordings_from_trash_v1,
  funcChild_kodi_addon_pvr_rename_recording_v1,
  funcChild_kodi_addon_pvr_set_recording_lifetime_v1,
  funcChild_kodi_addon_pvr_set_recording_play_count_v1,
  funcChild_kodi_addon_pvr_set_recording_last_played_position_v1,
  funcChild_kodi_addon_pvr_get_recording_last_played_position_v1,
  funcChild_kodi_addon_pvr_get_recording_edl_v1,
  funcChild_kodi_addon_pvr_get_recording_size_v1,
  funcChild_kodi_addon_pvr_get_recording_stream_properties_v1,
  funcChild_kodi_addon_pvr_call_recording_menu_hook_v1,
  funcChild_kodi_addon_pvr_get_timer_types_v1,
  funcChild_kodi_addon_pvr_get_timers_amount_v1,
  funcChild_kodi_addon_pvr_get_timers_v1,
  funcChild_kodi_addon_pvr_add_timer_v1,
  funcChild_kodi_addon_pvr_delete_timer_v1,
  funcChild_kodi_addon_pvr_update_timer_v1,
  funcChild_kodi_addon_pvr_call_timer_menu_hook_v1,
  funcChild_kodi_addon_pvr_on_system_sleep_v1,
  funcChild_kodi_addon_pvr_on_system_wake_v1,
  funcChild_kodi_addon_pvr_on_power_saving_activated_v1,
  funcChild_kodi_addon_pvr_on_power_saving_deactivated_v1,
} funcChild_addoninstance_pvr_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CAPABILITIES_V1)( KODI_ADDON_PVR_HDL hdl, struct PVR_ADDON_CAPABILITIES* capabilities);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_get_capabilities_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_ADDON_CAPABILITIES> msgChild_OUT_kodi_addon_pvr_get_capabilities_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_NAME_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_name_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_name_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_VERSION_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_version_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_version_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_BACKEND_HOSTNAME_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_backend_hostname_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_backend_hostname_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CONNECTION_STRING_V1)( KODI_ADDON_PVR_HDL hdl, char* str, size_t mem_size);
typedef std::tuple<PtrValue, size_t> msgChild__IN_kodi_addon_pvr_get_connection_string_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::string> msgChild_OUT_kodi_addon_pvr_get_connection_string_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_DRIVE_SPACE_V1)( KODI_ADDON_PVR_HDL hdl, uint64_t* total, uint64_t* used);
typedef std::tuple<PtrValue, uint64_t, uint64_t> msgChild__IN_kodi_addon_pvr_get_drive_space_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, uint64_t, uint64_t> msgChild_OUT_kodi_addon_pvr_get_drive_space_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_SETTINGS_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK> msgChild__IN_kodi_addon_pvr_call_settings_menu_hook_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_settings_menu_hook_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNELS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_channels_amount_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_channels_amount_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNELS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool radio);
typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_channels_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channels_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
typedef std::tuple<PtrValue, IFC_PVR_CHANNEL, size_t> msgChild__IN_kodi_addon_pvr_get_channel_stream_properties_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_channel_stream_properties_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_SIGNAL_STATUS_V1)( KODI_ADDON_PVR_HDL hdl, int channel_uid, struct PVR_SIGNAL_STATUS* signal_status);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_signal_status_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_SIGNAL_STATUS> msgChild_OUT_kodi_addon_pvr_get_signal_status_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_DESCRAMBLE_INFO_V1)( KODI_ADDON_PVR_HDL hdl, int channel_uid, struct PVR_DESCRAMBLE_INFO* descramble_info);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_descramble_info_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_DESCRAMBLE_INFO> msgChild_OUT_kodi_addon_pvr_get_descramble_info_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_channel_groups_amount_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_channel_groups_amount_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUPS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool radio);
typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_channel_groups_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channel_groups_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_CHANNEL_GROUP_MEMBERS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, const struct PVR_CHANNEL_GROUP* group);
typedef std::tuple<PtrValue, PtrValue, IFC_PVR_CHANNEL_GROUP> msgChild__IN_kodi_addon_pvr_get_channel_group_members_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_channel_group_members_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_delete_channel_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_channel_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_RENAME_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_rename_channel_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_rename_channel_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SETTINGS_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_open_dialog_channel_settings_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_settings_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_ADD_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_CHANNEL* channel);
typedef std::tuple<PtrValue, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_open_dialog_channel_add_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_add_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_OPEN_DIALOG_CHANNEL_SCAN_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_open_dialog_channel_scan_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_open_dialog_channel_scan_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_CHANNEL_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_CHANNEL* channel);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_CHANNEL> msgChild__IN_kodi_addon_pvr_call_channel_menu_hook_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_channel_menu_hook_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_FOR_CHANNEL_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, int channel_uid, time_t start, time_t end);
typedef std::tuple<PtrValue, PtrValue, int, time_t, time_t> msgChild__IN_kodi_addon_pvr_get_epg_for_channel_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_epg_for_channel_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_IS_EPG_TAG_RECORDABLE_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, bool* is_recordable);
typedef std::tuple<PtrValue, IFC_EPG_TAG, bool> msgChild__IN_kodi_addon_pvr_is_epg_tag_recordable_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, bool> msgChild_OUT_kodi_addon_pvr_is_epg_tag_recordable_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_IS_EPG_TAG_PLAYABLE_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, bool* is_playable);
typedef std::tuple<PtrValue, IFC_EPG_TAG, bool> msgChild__IN_kodi_addon_pvr_is_epg_tag_playable_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, bool> msgChild_OUT_kodi_addon_pvr_is_epg_tag_playable_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_TAG_EDL_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, struct PVR_EDL_ENTRY edl[], size_t* size);
typedef std::tuple<PtrValue, IFC_EPG_TAG, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild__IN_kodi_addon_pvr_get_epg_tag_edl_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild_OUT_kodi_addon_pvr_get_epg_tag_edl_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_EPG_TAG_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct EPG_TAG* tag, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
typedef std::tuple<PtrValue, IFC_EPG_TAG, size_t> msgChild__IN_kodi_addon_pvr_get_epg_tag_stream_properties_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_epg_tag_stream_properties_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_EPG_MAX_PAST_DAYS_V1)( KODI_ADDON_PVR_HDL hdl, int past_days);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_set_epg_max_past_days_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_epg_max_past_days_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_EPG_MAX_FUTURE_DAYS_V1)( KODI_ADDON_PVR_HDL hdl, int future_days);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_set_epg_max_future_days_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_epg_max_future_days_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_EPG_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct EPG_TAG* tag);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_EPG_TAG> msgChild__IN_kodi_addon_pvr_call_epg_menu_hook_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_epg_menu_hook_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDINGS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, bool deleted, int* amount);
typedef std::tuple<PtrValue, bool, int> msgChild__IN_kodi_addon_pvr_get_recordings_amount_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_recordings_amount_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDINGS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle, bool deleted);
typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_pvr_get_recordings_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_recordings_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_delete_recording_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_recording_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_UNDELETE_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_undelete_recording_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_undelete_recording_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_ALL_RECORDINGS_FROM_TRASH_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_delete_all_recordings_from_trash_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_all_recordings_from_trash_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_RENAME_RECORDING_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_rename_recording_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_rename_recording_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_LIFETIME_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_set_recording_lifetime_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_lifetime_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_PLAY_COUNT_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int count);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_set_recording_play_count_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_play_count_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_SET_RECORDING_LAST_PLAYED_POSITION_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int last_played_position);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_set_recording_last_played_position_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_set_recording_last_played_position_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_LAST_PLAYED_POSITION_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int* last_played_position);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int> msgChild__IN_kodi_addon_pvr_get_recording_last_played_position_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_recording_last_played_position_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_EDL_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, struct PVR_EDL_ENTRY edl[], size_t* size);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild__IN_kodi_addon_pvr_get_recording_edl_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_EDL_ENTRY>, size_t> msgChild_OUT_kodi_addon_pvr_get_recording_edl_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_SIZE_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, int64_t* size);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, int64_t> msgChild__IN_kodi_addon_pvr_get_recording_size_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int64_t> msgChild_OUT_kodi_addon_pvr_get_recording_size_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_RECORDING_STREAM_PROPERTIES_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_RECORDING* recording, struct PVR_NAMED_VALUE* properties, size_t* properties_count);
typedef std::tuple<PtrValue, IFC_PVR_RECORDING, size_t> msgChild__IN_kodi_addon_pvr_get_recording_stream_properties_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, IFC_PVR_NAMED_VALUE, size_t> msgChild_OUT_kodi_addon_pvr_get_recording_stream_properties_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_RECORDING_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_RECORDING* recording);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_RECORDING> msgChild__IN_kodi_addon_pvr_call_recording_menu_hook_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_recording_menu_hook_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMER_TYPES_V1)( KODI_ADDON_PVR_HDL hdl, struct PVR_TIMER_TYPE types[], size_t* types_count);
typedef std::tuple<PtrValue, std::vector<IFC_PVR_TIMER_TYPE>, size_t> msgChild__IN_kodi_addon_pvr_get_timer_types_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, std::vector<IFC_PVR_TIMER_TYPE>, size_t> msgChild_OUT_kodi_addon_pvr_get_timer_types_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMERS_AMOUNT_V1)( KODI_ADDON_PVR_HDL hdl, int* amount);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_pvr_get_timers_amount_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR, int> msgChild_OUT_kodi_addon_pvr_get_timers_amount_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_GET_TIMERS_V1)( KODI_ADDON_PVR_HDL hdl, KODI_ADDON_PVR_TRANSFER_HDL handle);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_pvr_get_timers_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_get_timers_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ADD_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer);
typedef std::tuple<PtrValue, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_add_timer_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_add_timer_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_DELETE_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer, bool force_delete);
typedef std::tuple<PtrValue, IFC_PVR_TIMER, bool> msgChild__IN_kodi_addon_pvr_delete_timer_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_delete_timer_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_UPDATE_TIMER_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_TIMER* timer);
typedef std::tuple<PtrValue, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_update_timer_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_update_timer_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_CALL_TIMER_MENU_HOOK_V1)( KODI_ADDON_PVR_HDL hdl, const struct PVR_MENUHOOK* menuhook, const struct PVR_TIMER* timer);
typedef std::tuple<PtrValue, IFC_PVR_MENUHOOK, IFC_PVR_TIMER> msgChild__IN_kodi_addon_pvr_call_timer_menu_hook_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_call_timer_menu_hook_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_SYSTEM_SLEEP_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_system_sleep_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_system_sleep_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_SYSTEM_WAKE_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_system_wake_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_system_wake_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_POWER_SAVING_ACTIVATED_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_power_saving_activated_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_power_saving_activated_v1; /* Autogenerated */
// Original API call: typedef enum PVR_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_PVR_ON_POWER_SAVING_DEACTIVATED_V1)( KODI_ADDON_PVR_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_pvr_on_power_saving_deactivated_v1; /* Autogenerated */
typedef std::tuple<PVR_ERROR> msgChild_OUT_kodi_addon_pvr_on_power_saving_deactivated_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
