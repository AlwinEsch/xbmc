/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../../include/kodi/c-api/addon-instance/pvr/pvr_channels.h"
#include "../../../../../src/shared/api/addon-instance/pvr/pvr_defines.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct IFC_PVR_CHANNEL
{
  IFC_PVR_CHANNEL() = default;
  IFC_PVR_CHANNEL(const PVR_CHANNEL* c_data)
  {
    if (c_data == nullptr)
      return;

    iUniqueId = c_data->iUniqueId;
    bIsRadio = c_data->bIsRadio;
    iChannelNumber = c_data->iChannelNumber;
    iSubChannelNumber = c_data->iSubChannelNumber;
    memcpy(strChannelName.data(), c_data->strChannelName, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strMimeType.data(), c_data->strMimeType, PVR_ADDON_INPUT_FORMAT_STRING_LENGTH);
    iEncryptionSystem = c_data->iEncryptionSystem;
    memcpy(strIconPath.data(), c_data->strIconPath, PVR_ADDON_URL_STRING_LENGTH);
    bIsHidden = c_data->bIsHidden;
    bHasArchive = c_data->bHasArchive;
    iOrder = c_data->iOrder;
  }

  void SetCStructure(PVR_CHANNEL* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->iUniqueId = iUniqueId;
    c_data->bIsRadio = bIsRadio;
    c_data->iChannelNumber = iChannelNumber;
    c_data->iSubChannelNumber = iSubChannelNumber;
    memcpy(c_data->strChannelName, strChannelName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strMimeType, strMimeType.data(), PVR_ADDON_INPUT_FORMAT_STRING_LENGTH);
    c_data->iEncryptionSystem = iEncryptionSystem;
    memcpy(c_data->strIconPath, strIconPath.data(), PVR_ADDON_URL_STRING_LENGTH);
    c_data->bIsHidden = bIsHidden;
    c_data->bHasArchive = bHasArchive;
    c_data->iOrder = iOrder;
  }

  unsigned int iUniqueId;
  bool bIsRadio;
  unsigned int iChannelNumber;
  unsigned int iSubChannelNumber;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strChannelName;
  std::array<char, PVR_ADDON_INPUT_FORMAT_STRING_LENGTH> strMimeType;
  unsigned int iEncryptionSystem;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strIconPath;
  bool bIsHidden;
  bool bHasArchive;
  int iOrder;

  MSGPACK_DEFINE(iUniqueId,
                 bIsRadio,
                 iChannelNumber,
                 iSubChannelNumber,
                 strChannelName,
                 strMimeType,
                 iEncryptionSystem,
                 strIconPath,
                 bIsHidden,
                 bHasArchive,
                 iOrder);
};

struct IFC_PVR_SIGNAL_STATUS
{
  IFC_PVR_SIGNAL_STATUS() = default;
  IFC_PVR_SIGNAL_STATUS(const PVR_SIGNAL_STATUS* c_data)
  {
    if (c_data == nullptr)
      return;

    memcpy(strAdapterName.data(), c_data->strAdapterName, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strAdapterStatus.data(), c_data->strAdapterStatus, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strServiceName.data(), c_data->strServiceName, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strProviderName.data(), c_data->strProviderName, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strMuxName.data(), c_data->strMuxName, PVR_ADDON_NAME_STRING_LENGTH);
    iSNR = c_data->iSNR;
    iSignal = c_data->iSignal;
    iBER = c_data->iBER;
    iUNC = c_data->iUNC;
  }

  void SetCStructure(PVR_SIGNAL_STATUS* c_data)
  {
    if (c_data == nullptr)
      return;

    memcpy(c_data->strAdapterName, strAdapterName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strAdapterStatus, strAdapterStatus.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strServiceName, strServiceName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strProviderName, strProviderName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strMuxName, strMuxName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    c_data->iSNR = iSNR;
    c_data->iSignal = iSignal;
    c_data->iBER = iBER;
    c_data->iUNC = iUNC;
  }

  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strAdapterName;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strAdapterStatus;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strServiceName;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strProviderName;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strMuxName;
  int iSNR;
  int iSignal;
  long iBER;
  long iUNC;

  MSGPACK_DEFINE(strAdapterName,
                 strAdapterStatus,
                 strServiceName,
                 strProviderName,
                 strMuxName,
                 iSNR,
                 iSignal,
                 iBER,
                 iUNC);
};

struct IFC_PVR_DESCRAMBLE_INFO
{
  IFC_PVR_DESCRAMBLE_INFO() = default;
  IFC_PVR_DESCRAMBLE_INFO(const PVR_DESCRAMBLE_INFO* c_data)
  {
    if (c_data == nullptr)
      return;

    iPid = c_data->iPid;
    iCaid = c_data->iCaid;
    iProvid = c_data->iProvid;
    iEcmTime = c_data->iEcmTime;
    iHops = c_data->iHops;
    memcpy(strCardSystem.data(), c_data->strCardSystem, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(strReader.data(), c_data->strReader, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(strFrom.data(), c_data->strFrom, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(strProtocol.data(), c_data->strProtocol, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
  }

  void SetCStructure(PVR_DESCRAMBLE_INFO* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->iPid = iPid;
    c_data->iCaid = iCaid;
    c_data->iProvid = iProvid;
    c_data->iEcmTime = iEcmTime;
    c_data->iHops = iHops;
    memcpy(c_data->strCardSystem, strCardSystem.data(), PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(c_data->strReader, strReader.data(), PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(c_data->strFrom, strFrom.data(), PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
    memcpy(c_data->strProtocol, strProtocol.data(), PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH);
  }

  int iPid;
  int iCaid;
  int iProvid;
  int iEcmTime;
  int iHops;
  std::array<char, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH> strCardSystem;
  std::array<char, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH> strReader;
  std::array<char, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH> strFrom;
  std::array<char, PVR_ADDON_DESCRAMBLE_INFO_STRING_LENGTH> strProtocol;

  MSGPACK_DEFINE(
      iPid, iCaid, iProvid, iEcmTime, iHops, strCardSystem, strReader, strFrom, strProtocol);
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
