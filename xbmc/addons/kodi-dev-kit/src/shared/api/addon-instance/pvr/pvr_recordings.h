/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../../include/kodi/c-api/addon-instance/pvr/pvr_recordings.h"
#include "../../../../../src/shared/api/addon-instance/pvr/pvr_defines.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_PVR_RECORDING_CHANNEL_TYPE
#define MSGPACK_ADD_ENUM_PVR_RECORDING_CHANNEL_TYPE
MSGPACK_ADD_ENUM(PVR_RECORDING_CHANNEL_TYPE);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct IFC_PVR_RECORDING
{
  IFC_PVR_RECORDING() = default;
  IFC_PVR_RECORDING(const PVR_RECORDING* c_data)
  {
    if (c_data == nullptr)
      return;

    memcpy(strRecordingId.data(), c_data->strRecordingId, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strTitle.data(), c_data->strTitle, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strEpisodeName.data(), c_data->strEpisodeName, PVR_ADDON_NAME_STRING_LENGTH);
    iSeriesNumber = c_data->iSeriesNumber;
    iEpisodeNumber = c_data->iEpisodeNumber;
    iYear = c_data->iYear;
    memcpy(strDirectory.data(), c_data->strDirectory, PVR_ADDON_URL_STRING_LENGTH);
    memcpy(strPlotOutline.data(), c_data->strPlotOutline, PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(strPlot.data(), c_data->strPlot, PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(strGenreDescription.data(), c_data->strGenreDescription, PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(strChannelName.data(), c_data->strChannelName, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strIconPath.data(), c_data->strIconPath, PVR_ADDON_URL_STRING_LENGTH);
    memcpy(strThumbnailPath.data(), c_data->strThumbnailPath, PVR_ADDON_URL_STRING_LENGTH);
    memcpy(strFanartPath.data(), c_data->strFanartPath, PVR_ADDON_URL_STRING_LENGTH);
    recordingTime = c_data->recordingTime;
    iDuration = c_data->iDuration;
    iPriority = c_data->iPriority;
    iLifetime = c_data->iLifetime;
    iGenreType = c_data->iGenreType;
    iGenreSubType = c_data->iGenreSubType;
    iPlayCount = c_data->iPlayCount;
    iLastPlayedPosition = c_data->iLastPlayedPosition;
    bIsDeleted = c_data->bIsDeleted;
    iEpgEventId = c_data->iEpgEventId;
    iChannelUid = c_data->iChannelUid;
    channelType = c_data->channelType;
    memcpy(strFirstAired.data(), c_data->strFirstAired, PVR_ADDON_DATE_STRING_LENGTH);
    iFlags = c_data->iFlags;
    sizeInBytes = c_data->sizeInBytes;
  }

  void SetCStructure(PVR_RECORDING* c_data)
  {
    if (c_data == nullptr)
      return;

    memcpy(c_data->strRecordingId, strRecordingId.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strTitle, strTitle.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strEpisodeName, strEpisodeName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    c_data->iSeriesNumber = iSeriesNumber;
    c_data->iEpisodeNumber = iEpisodeNumber;
    c_data->iYear = iYear;
    memcpy(c_data->strDirectory, strDirectory.data(), PVR_ADDON_URL_STRING_LENGTH);
    memcpy(c_data->strPlotOutline, strPlotOutline.data(), PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(c_data->strPlot, strPlot.data(), PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(c_data->strGenreDescription, strGenreDescription.data(), PVR_ADDON_DESC_STRING_LENGTH);
    memcpy(c_data->strChannelName, strChannelName.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strIconPath, strIconPath.data(), PVR_ADDON_URL_STRING_LENGTH);
    memcpy(c_data->strThumbnailPath, strThumbnailPath.data(), PVR_ADDON_URL_STRING_LENGTH);
    memcpy(c_data->strFanartPath, strFanartPath.data(), PVR_ADDON_URL_STRING_LENGTH);
    c_data->recordingTime = recordingTime;
    c_data->iDuration = iDuration;
    c_data->iPriority = iPriority;
    c_data->iLifetime = iLifetime;
    c_data->iGenreType = iGenreType;
    c_data->iGenreSubType = iGenreSubType;
    c_data->iPlayCount = iPlayCount;
    c_data->iLastPlayedPosition = iLastPlayedPosition;
    c_data->bIsDeleted = bIsDeleted;
    c_data->iEpgEventId = iEpgEventId;
    c_data->iChannelUid = iChannelUid;
    c_data->channelType = channelType;
    memcpy(c_data->strFirstAired, strFirstAired.data(), PVR_ADDON_DATE_STRING_LENGTH);
    c_data->iFlags = iFlags;
    c_data->sizeInBytes = sizeInBytes;
  }

  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strRecordingId;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strTitle;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strEpisodeName;
  int iSeriesNumber;
  int iEpisodeNumber;
  int iYear;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strDirectory;
  std::array<char, PVR_ADDON_DESC_STRING_LENGTH> strPlotOutline;
  std::array<char, PVR_ADDON_DESC_STRING_LENGTH> strPlot;
  std::array<char, PVR_ADDON_DESC_STRING_LENGTH> strGenreDescription;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strChannelName;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strIconPath;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strThumbnailPath;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strFanartPath;
  time_t recordingTime;
  int iDuration;
  int iPriority;
  int iLifetime;
  int iGenreType;
  int iGenreSubType;
  int iPlayCount;
  int iLastPlayedPosition;
  bool bIsDeleted;
  unsigned int iEpgEventId;
  int iChannelUid;
  enum PVR_RECORDING_CHANNEL_TYPE channelType;
  std::array<char, PVR_ADDON_DATE_STRING_LENGTH> strFirstAired;
  unsigned int iFlags;
  int64_t sizeInBytes;

  MSGPACK_DEFINE(strRecordingId,
                 strTitle,
                 strEpisodeName,
                 iSeriesNumber,
                 iEpisodeNumber,
                 iYear,
                 strDirectory,
                 strPlotOutline,
                 strPlot,
                 strGenreDescription,
                 strChannelName,
                 strIconPath,
                 strThumbnailPath,
                 strFanartPath,
                 recordingTime,
                 iDuration,
                 iPriority,
                 iLifetime,
                 iGenreType,
                 iGenreSubType,
                 iPlayCount,
                 iLastPlayedPosition,
                 bIsDeleted,
                 iEpgEventId,
                 iChannelUid,
                 channelType,
                 strFirstAired,
                 iFlags,
                 sizeInBytes);
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
