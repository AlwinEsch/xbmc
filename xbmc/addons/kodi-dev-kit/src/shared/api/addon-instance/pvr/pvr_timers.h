/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../../include/kodi/c-api/addon-instance/pvr/pvr_timers.h"
#include "../../../../../src/shared/api/addon-instance/pvr/pvr_defines.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_PVR_TIMER_STATE
#define MSGPACK_ADD_ENUM_PVR_TIMER_STATE
MSGPACK_ADD_ENUM(PVR_TIMER_STATE);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

struct IFC_PVR_TIMER_TYPE
{
  IFC_PVR_TIMER_TYPE() = default;
  IFC_PVR_TIMER_TYPE(const PVR_TIMER_TYPE* c_data)
  {
    if (c_data == nullptr)
      return;

    iId = c_data->iId;
    iAttributes = c_data->iAttributes;
    memcpy(strDescription.data(), c_data->strDescription, PVR_ADDON_TIMERTYPE_STRING_LENGTH);
    iPrioritiesSize = c_data->iPrioritiesSize;
    memcpy(priorities.data(), c_data->priorities, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    iPrioritiesDefault = c_data->iPrioritiesDefault;
    iLifetimesSize = c_data->iLifetimesSize;
    memcpy(lifetimes.data(), c_data->lifetimes, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    iLifetimesDefault = c_data->iLifetimesDefault;
    iPreventDuplicateEpisodesSize = c_data->iPreventDuplicateEpisodesSize;
    memcpy(preventDuplicateEpisodes.data(), c_data->preventDuplicateEpisodes,
           PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    iPreventDuplicateEpisodesDefault = c_data->iPreventDuplicateEpisodesDefault;
    iRecordingGroupSize = c_data->iRecordingGroupSize;
    memcpy(recordingGroup.data(), c_data->recordingGroup, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    iRecordingGroupDefault = c_data->iRecordingGroupDefault;
    iMaxRecordingsSize = c_data->iMaxRecordingsSize;
    memcpy(maxRecordings.data(), c_data->maxRecordings,
           PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE_SMALL);
    iMaxRecordingsDefault = c_data->iMaxRecordingsDefault;
  }

  void SetCStructure(PVR_TIMER_TYPE* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->iId = iId;
    c_data->iAttributes = iAttributes;
    memcpy(c_data->strDescription, strDescription.data(), PVR_ADDON_TIMERTYPE_STRING_LENGTH);
    c_data->iPrioritiesSize = iPrioritiesSize;
    memcpy(c_data->priorities, priorities.data(), PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    c_data->iPrioritiesDefault = iPrioritiesDefault;
    c_data->iLifetimesSize = iLifetimesSize;
    memcpy(c_data->lifetimes, lifetimes.data(), PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    c_data->iLifetimesDefault = iLifetimesDefault;
    c_data->iPreventDuplicateEpisodesSize = iPreventDuplicateEpisodesSize;
    memcpy(c_data->preventDuplicateEpisodes, preventDuplicateEpisodes.data(),
           PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    c_data->iPreventDuplicateEpisodesDefault = iPreventDuplicateEpisodesDefault;
    c_data->iRecordingGroupSize = iRecordingGroupSize;
    memcpy(c_data->recordingGroup, recordingGroup.data(), PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE);
    c_data->iRecordingGroupDefault = iRecordingGroupDefault;
    c_data->iMaxRecordingsSize = iMaxRecordingsSize;
    memcpy(c_data->maxRecordings, maxRecordings.data(),
           PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE_SMALL);
    c_data->iMaxRecordingsDefault = iMaxRecordingsDefault;
  }

  unsigned int iId;
  uint64_t iAttributes;
  std::array<char, PVR_ADDON_TIMERTYPE_STRING_LENGTH> strDescription;
  unsigned int iPrioritiesSize;
  std::array<IFC_PVR_ATTRIBUTE_INT_VALUE, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE> priorities;
  int iPrioritiesDefault;
  unsigned int iLifetimesSize;
  std::array<IFC_PVR_ATTRIBUTE_INT_VALUE, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE> lifetimes;
  int iLifetimesDefault;
  unsigned int iPreventDuplicateEpisodesSize;
  std::array<IFC_PVR_ATTRIBUTE_INT_VALUE, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE>
      preventDuplicateEpisodes;
  unsigned int iPreventDuplicateEpisodesDefault;
  unsigned int iRecordingGroupSize;
  std::array<IFC_PVR_ATTRIBUTE_INT_VALUE, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE> recordingGroup;
  unsigned int iRecordingGroupDefault;
  unsigned int iMaxRecordingsSize;
  std::array<IFC_PVR_ATTRIBUTE_INT_VALUE, PVR_ADDON_TIMERTYPE_VALUES_ARRAY_SIZE_SMALL>
      maxRecordings;
  int iMaxRecordingsDefault;

  MSGPACK_DEFINE(iId,
                 iAttributes,
                 strDescription,
                 iPrioritiesSize,
                 priorities,
                 iPrioritiesDefault,
                 iLifetimesSize,
                 lifetimes,
                 iLifetimesDefault,
                 iPreventDuplicateEpisodesSize,
                 preventDuplicateEpisodes,
                 iPreventDuplicateEpisodesDefault,
                 iRecordingGroupSize,
                 recordingGroup,
                 iRecordingGroupDefault,
                 iMaxRecordingsSize,
                 maxRecordings,
                 iMaxRecordingsDefault);
};

struct IFC_PVR_TIMER
{
  IFC_PVR_TIMER() = default;
  IFC_PVR_TIMER(const PVR_TIMER* c_data)
  {
    if (c_data == nullptr)
      return;

    iClientIndex = c_data->iClientIndex;
    iParentClientIndex = c_data->iParentClientIndex;
    iClientChannelUid = c_data->iClientChannelUid;
    startTime = c_data->startTime;
    endTime = c_data->endTime;
    bStartAnyTime = c_data->bStartAnyTime;
    bEndAnyTime = c_data->bEndAnyTime;
    state = c_data->state;
    iTimerType = c_data->iTimerType;
    memcpy(strTitle.data(), c_data->strTitle, PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(strEpgSearchString.data(), c_data->strEpgSearchString, PVR_ADDON_NAME_STRING_LENGTH);
    bFullTextEpgSearch = c_data->bFullTextEpgSearch;
    memcpy(strDirectory.data(), c_data->strDirectory, PVR_ADDON_URL_STRING_LENGTH);
    memcpy(strSummary.data(), c_data->strSummary, PVR_ADDON_DESC_STRING_LENGTH);
    iPriority = c_data->iPriority;
    iLifetime = c_data->iLifetime;
    iMaxRecordings = c_data->iMaxRecordings;
    iRecordingGroup = c_data->iRecordingGroup;
    firstDay = c_data->firstDay;
    iWeekdays = c_data->iWeekdays;
    iPreventDuplicateEpisodes = c_data->iPreventDuplicateEpisodes;
    iEpgUid = c_data->iEpgUid;
    iMarginStart = c_data->iMarginStart;
    iMarginEnd = c_data->iMarginEnd;
    iGenreType = c_data->iGenreType;
    iGenreSubType = c_data->iGenreSubType;
    memcpy(strSeriesLink.data(), c_data->strSeriesLink, PVR_ADDON_URL_STRING_LENGTH);
  }

  void SetCStructure(PVR_TIMER* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->iClientIndex = iClientIndex;
    c_data->iParentClientIndex = iParentClientIndex;
    c_data->iClientChannelUid = iClientChannelUid;
    c_data->startTime = startTime;
    c_data->endTime = endTime;
    c_data->bStartAnyTime = bStartAnyTime;
    c_data->bEndAnyTime = bEndAnyTime;
    c_data->state = state;
    c_data->iTimerType = iTimerType;
    memcpy(c_data->strTitle, strTitle.data(), PVR_ADDON_NAME_STRING_LENGTH);
    memcpy(c_data->strEpgSearchString, strEpgSearchString.data(), PVR_ADDON_NAME_STRING_LENGTH);
    c_data->bFullTextEpgSearch = bFullTextEpgSearch;
    memcpy(c_data->strDirectory, strDirectory.data(), PVR_ADDON_URL_STRING_LENGTH);
    memcpy(c_data->strSummary, strSummary.data(), PVR_ADDON_DESC_STRING_LENGTH);
    c_data->iPriority = iPriority;
    c_data->iLifetime = iLifetime;
    c_data->iMaxRecordings = iMaxRecordings;
    c_data->iRecordingGroup = iRecordingGroup;
    c_data->firstDay = firstDay;
    c_data->iWeekdays = iWeekdays;
    c_data->iPreventDuplicateEpisodes = iPreventDuplicateEpisodes;
    c_data->iEpgUid = iEpgUid;
    c_data->iMarginStart = iMarginStart;
    c_data->iMarginEnd = iMarginEnd;
    c_data->iGenreType = iGenreType;
    c_data->iGenreSubType = iGenreSubType;
    memcpy(c_data->strSeriesLink, strSeriesLink.data(), PVR_ADDON_URL_STRING_LENGTH);
  }

  unsigned int iClientIndex;
  unsigned int iParentClientIndex;
  int iClientChannelUid;
  time_t startTime;
  time_t endTime;
  bool bStartAnyTime;
  bool bEndAnyTime;
  enum PVR_TIMER_STATE state;
  unsigned int iTimerType;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strTitle;
  std::array<char, PVR_ADDON_NAME_STRING_LENGTH> strEpgSearchString;
  bool bFullTextEpgSearch;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strDirectory;
  std::array<char, PVR_ADDON_DESC_STRING_LENGTH> strSummary;
  int iPriority;
  int iLifetime;
  int iMaxRecordings;
  unsigned int iRecordingGroup;
  time_t firstDay;
  unsigned int iWeekdays;
  unsigned int iPreventDuplicateEpisodes;
  unsigned int iEpgUid;
  unsigned int iMarginStart;
  unsigned int iMarginEnd;
  int iGenreType;
  int iGenreSubType;
  std::array<char, PVR_ADDON_URL_STRING_LENGTH> strSeriesLink;

  MSGPACK_DEFINE(iClientIndex,
                 iParentClientIndex,
                 iClientChannelUid,
                 startTime,
                 endTime,
                 bStartAnyTime,
                 bEndAnyTime,
                 state,
                 iTimerType,
                 strTitle,
                 strEpgSearchString,
                 bFullTextEpgSearch,
                 strDirectory,
                 strSummary,
                 iPriority,
                 iLifetime,
                 iMaxRecordings,
                 iRecordingGroup,
                 firstDay,
                 iWeekdays,
                 iPreventDuplicateEpisodes,
                 iEpgUid,
                 iMarginStart,
                 iMarginEnd,
                 iGenreType,
                 iGenreSubType,
                 strSeriesLink);
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
