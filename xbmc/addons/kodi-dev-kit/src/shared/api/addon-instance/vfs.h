/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/vfs.h"
#include "src/shared/SharedGroups.h"
#include "src/shared/api/filesystem.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_VFS_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_VFS_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1 clear_out_idle; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DISCONNECT_ALL_V1 disconnect_all; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_OPEN_V1 file_open; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1 file_open_for_write; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_CLOSE_V1 file_close; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_READ_V1 file_read; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_WRITE_V1 file_write; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_SEEK_V1 file_seek; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_TRUNCATE_V1 file_truncate; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_GET_LENGTH_V1 file_get_length; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_GET_POSITION_V1 file_get_position; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1 file_get_chunk_size; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1
      file_io_control_get_seek_possible; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1
      file_io_control_get_cache_status; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1
      file_io_control_set_cache_rate; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1
      file_io_control_set_retry; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_STAT_V1 stat; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_EXISTS_V1 exists; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DELETE_IT_V1 delete_it; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_RENAME_V1 rename; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1 directory_exists; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1 directory_remove; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DIRECTORY_CREATE_V1 directory_create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DIRECTORY_GET_V1 directory_get; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1
      directory_contains_files; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_VFS_FUNC_V1_TO_V1;

union KODI_ADDON_VFS_FUNC_UNION
{
  struct KODI_ADDON_VFS_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT_V1)(
    void*, KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*, char**, bool);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION_V1)(
    void*, KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG_V1)(
    void*, KODI_OWN_HDL, KODI_CTX_CB_HDL, const char*, const char*, const char*, const char*);

struct directFuncToKodi_addoninstance_vfs_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__GET_KEYBOARD_INPUT_V1
      kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1;
  PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__REQUIRE_AUTHENTICATION_V1
      kodi_addon_vfs_get_dir_cb__require_authentication_v1;
  PFN_INT_KODI_ADDON_VFS_GET_DIR_CB__SET_ERROR_DIALOG_V1
      kodi_addon_vfs_get_dir_cb__set_error_dialog_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef KODI_ADDON_VFS_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_CREATE_V1)(void*,
                                                                                KODI_OWN_HDL);
typedef KODI_VFS_FILE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1)(
    void*, KODI_ADDON_VFS_HDL, const struct VFS_URL*, bool);
typedef KODI_VFS_FILE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_OPEN_V1)(
    void*, KODI_ADDON_VFS_HDL, const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DELETE_IT_V1)(void*,
                                                                     KODI_ADDON_VFS_HDL,
                                                                     const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1)(
    void*, KODI_ADDON_VFS_HDL, const struct VFS_URL*, struct VFS_DIR_ENTRY**, size_t*, char**);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DIRECTORY_CREATE_V1)(void*,
                                                                            KODI_ADDON_VFS_HDL,
                                                                            const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1)(void*,
                                                                            KODI_ADDON_VFS_HDL,
                                                                            const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DIRECTORY_GET_V1)(void*,
                                                                         KODI_ADDON_VFS_HDL,
                                                                         const struct VFS_URL*,
                                                                         struct VFS_DIR_ENTRY**,
                                                                         size_t*,
                                                                         KODI_CTX_CB_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1)(void*,
                                                                            KODI_ADDON_VFS_HDL,
                                                                            const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_EXISTS_V1)(void*,
                                                                  KODI_ADDON_VFS_HDL,
                                                                  const struct VFS_URL*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_CLOSE_V1)(void*,
                                                                      KODI_ADDON_VFS_HDL,
                                                                      KODI_VFS_FILE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, struct VFS_CACHE_STATUS*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, unsigned int);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, bool);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_RENAME_V1)(void*,
                                                                  KODI_ADDON_VFS_HDL,
                                                                  const struct VFS_URL*,
                                                                  const struct VFS_URL*);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1)(void*,
                                                                              KODI_ADDON_VFS_HDL,
                                                                              KODI_VFS_FILE_HDL);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_TRUNCATE_V1)(void*,
                                                                        KODI_ADDON_VFS_HDL,
                                                                        KODI_VFS_FILE_HDL,
                                                                        int64_t);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_STAT_V1)(void*,
                                                               KODI_ADDON_VFS_HDL,
                                                               const struct VFS_URL*,
                                                               struct VFS_STAT_STRUCTURE*);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_GET_LENGTH_V1)(void*,
                                                                              KODI_ADDON_VFS_HDL,
                                                                              KODI_VFS_FILE_HDL);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_GET_POSITION_V1)(void*,
                                                                                KODI_ADDON_VFS_HDL,
                                                                                KODI_VFS_FILE_HDL);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_SEEK_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, int64_t, int);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_READ_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, uint8_t*, size_t);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_FILE_WRITE_V1)(
    void*, KODI_ADDON_VFS_HDL, KODI_VFS_FILE_HDL, const uint8_t*, size_t);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1)(void*,
                                                                          KODI_ADDON_VFS_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DESTROY_V1)(void*, KODI_ADDON_VFS_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VFS_DISCONNECT_ALL_V1)(void*,
                                                                          KODI_ADDON_VFS_HDL);

struct directFuncToAddon_addoninstance_vfs_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1 kodi_addon_vfs_clear_out_idle_v1;
  PFN_INT_KODI_ADDON_VFS_CREATE_V1 kodi_addon_vfs_create_v1;
  PFN_INT_KODI_ADDON_VFS_DELETE_IT_V1 kodi_addon_vfs_delete_it_v1;
  PFN_INT_KODI_ADDON_VFS_DESTROY_V1 kodi_addon_vfs_destroy_v1;
  PFN_INT_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1 kodi_addon_vfs_directory_contains_files_v1;
  PFN_INT_KODI_ADDON_VFS_DIRECTORY_CREATE_V1 kodi_addon_vfs_directory_create_v1;
  PFN_INT_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1 kodi_addon_vfs_directory_exists_v1;
  PFN_INT_KODI_ADDON_VFS_DIRECTORY_GET_V1 kodi_addon_vfs_directory_get_v1;
  PFN_INT_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1 kodi_addon_vfs_directory_remove_v1;
  PFN_INT_KODI_ADDON_VFS_DISCONNECT_ALL_V1 kodi_addon_vfs_disconnect_all_v1;
  PFN_INT_KODI_ADDON_VFS_EXISTS_V1 kodi_addon_vfs_exists_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_CLOSE_V1 kodi_addon_vfs_file_close_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1 kodi_addon_vfs_file_get_chunk_size_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_GET_LENGTH_V1 kodi_addon_vfs_file_get_length_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_GET_POSITION_V1 kodi_addon_vfs_file_get_position_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1
      kodi_addon_vfs_file_io_control_get_cache_status_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1
      kodi_addon_vfs_file_io_control_get_seek_possible_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1
      kodi_addon_vfs_file_io_control_set_cache_rate_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1 kodi_addon_vfs_file_io_control_set_retry_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1 kodi_addon_vfs_file_open_for_write_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_OPEN_V1 kodi_addon_vfs_file_open_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_READ_V1 kodi_addon_vfs_file_read_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_SEEK_V1 kodi_addon_vfs_file_seek_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_TRUNCATE_V1 kodi_addon_vfs_file_truncate_v1;
  PFN_INT_KODI_ADDON_VFS_FILE_WRITE_V1 kodi_addon_vfs_file_write_v1;
  PFN_INT_KODI_ADDON_VFS_RENAME_V1 kodi_addon_vfs_rename_v1;
  PFN_INT_KODI_ADDON_VFS_STAT_V1 kodi_addon_vfs_stat_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_VFS_URL
{
  IFC_VFS_URL() = default;
  IFC_VFS_URL(const VFS_URL* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->url)
      url = c_data->url;
    if (c_data->domain)
      domain = c_data->domain;
    if (c_data->hostname)
      hostname = c_data->hostname;
    if (c_data->filename)
      filename = c_data->filename;
    port = c_data->port;
    if (c_data->options)
      options = c_data->options;
    if (c_data->username)
      username = c_data->username;
    if (c_data->password)
      password = c_data->password;
    if (c_data->redacted)
      redacted = c_data->redacted;
    if (c_data->sharename)
      sharename = c_data->sharename;
    if (c_data->protocol)
      protocol = c_data->protocol;
  }

  void SetCStructure(VFS_URL* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->url = url.c_str();
    c_data->domain = domain.c_str();
    c_data->hostname = hostname.c_str();
    c_data->filename = filename.c_str();
    c_data->port = port;
    c_data->options = options.c_str();
    c_data->username = username.c_str();
    c_data->password = password.c_str();
    c_data->redacted = redacted.c_str();
    c_data->sharename = sharename.c_str();
    c_data->protocol = protocol.c_str();
  }

  std::string url;
  std::string domain;
  std::string hostname;
  std::string filename;
  unsigned int port;
  std::string options;
  std::string username;
  std::string password;
  std::string redacted;
  std::string sharename;
  std::string protocol;

  MSGPACK_DEFINE(url,
                 domain,
                 hostname,
                 filename,
                 port,
                 options,
                 username,
                 password,
                 redacted,
                 sharename,
                 protocol);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_vfs_h : int
{
  funcParent_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1,
  funcParent_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1,
  funcParent_kodi_addon_vfs_get_dir_cb__require_authentication_v1,
} funcParent_addoninstance_vfs_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT bool kodi_addon_vfs_get_dir_cb__get_keyboard_input(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, char** input, bool hidden_input) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, std::string, bool> msgParent__IN_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_addon_vfs_get_dir_cb__get_keyboard_input_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__set_error_dialog(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* heading, const char* line1, const char* line2, const char* line3) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, std::string, std::string, std::string, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__set_error_dialog_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_vfs_get_dir_cb__require_authentication(KODI_OWN_HDL hdl, KODI_CTX_CB_HDL ctx_cb_hdl, const char* url) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_vfs_get_dir_cb__require_authentication_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_vfs_h : int
{
  funcChild_kodi_addon_vfs_create_v1,
  funcChild_kodi_addon_vfs_destroy_v1,
  funcChild_kodi_addon_vfs_file_open_v1,
  funcChild_kodi_addon_vfs_file_open_for_write_v1,
  funcChild_kodi_addon_vfs_file_close_v1,
  funcChild_kodi_addon_vfs_file_read_v1,
  funcChild_kodi_addon_vfs_file_write_v1,
  funcChild_kodi_addon_vfs_file_seek_v1,
  funcChild_kodi_addon_vfs_file_truncate_v1,
  funcChild_kodi_addon_vfs_file_get_length_v1,
  funcChild_kodi_addon_vfs_file_get_position_v1,
  funcChild_kodi_addon_vfs_file_get_chunk_size_v1,
  funcChild_kodi_addon_vfs_file_io_control_get_seek_possible_v1,
  funcChild_kodi_addon_vfs_file_io_control_get_cache_status_v1,
  funcChild_kodi_addon_vfs_file_io_control_set_cache_rate_v1,
  funcChild_kodi_addon_vfs_file_io_control_set_retry_v1,
  funcChild_kodi_addon_vfs_stat_v1,
  funcChild_kodi_addon_vfs_exists_v1,
  funcChild_kodi_addon_vfs_clear_out_idle_v1,
  funcChild_kodi_addon_vfs_disconnect_all_v1,
  funcChild_kodi_addon_vfs_delete_it_v1,
  funcChild_kodi_addon_vfs_rename_v1,
  funcChild_kodi_addon_vfs_directory_exists_v1,
  funcChild_kodi_addon_vfs_directory_remove_v1,
  funcChild_kodi_addon_vfs_directory_create_v1,
  funcChild_kodi_addon_vfs_directory_get_v1,
  funcChild_kodi_addon_vfs_directory_contains_files_v1,
} funcChild_addoninstance_vfs_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef KODI_ADDON_VFS_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_create_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_create_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DESTROY_V1)(KODI_ADDON_VFS_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_destroy_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_destroy_v1; /* Autogenerated */
// Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_file_open_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_v1; /* Autogenerated */
// Original API call: typedef KODI_VFS_FILE_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_OPEN_FOR_WRITE_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, bool overwrite);
typedef std::tuple<PtrValue, IFC_VFS_URL, bool> msgChild__IN_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_vfs_file_open_for_write_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_CLOSE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_close_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_close_v1; /* Autogenerated */
// Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_READ_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, uint8_t* buffer, size_t buf_size);
typedef std::tuple<PtrValue, PtrValue, size_t> msgChild__IN_kodi_addon_vfs_file_read_v1; /* Autogenerated */
typedef std::tuple<ssize_t, std::vector<uint8_t>> msgChild_OUT_kodi_addon_vfs_file_read_v1; /* Autogenerated */
// Original API call: typedef ssize_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_WRITE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, const uint8_t* buffer, size_t buf_size);
typedef std::tuple<PtrValue, PtrValue, std::vector<uint8_t>, size_t> msgChild__IN_kodi_addon_vfs_file_write_v1; /* Autogenerated */
typedef std::tuple<ssize_t> msgChild_OUT_kodi_addon_vfs_file_write_v1; /* Autogenerated */
// Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_SEEK_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t position, int whence);
typedef std::tuple<PtrValue, PtrValue, int64_t, int> msgChild__IN_kodi_addon_vfs_file_seek_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_seek_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_TRUNCATE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, int64_t size);
typedef std::tuple<PtrValue, PtrValue, int64_t> msgChild__IN_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */
typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_truncate_v1; /* Autogenerated */
// Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_LENGTH_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_length_v1; /* Autogenerated */
// Original API call: typedef int64_t(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_POSITION_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgChild_OUT_kodi_addon_vfs_file_get_position_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_GET_CHUNK_SIZE_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */
typedef std::tuple<int> msgChild_OUT_kodi_addon_vfs_file_get_chunk_size_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_SEEK_POSSIBLE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_get_seek_possible_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_GET_CACHE_STATUS_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, struct VFS_CACHE_STATUS* status);
typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_VFS_CACHE_STATUS> msgChild_OUT_kodi_addon_vfs_file_io_control_get_cache_status_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_CACHE_RATE_V1)( KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, unsigned int rate);
typedef std::tuple<PtrValue, PtrValue, unsigned int> msgChild__IN_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_cache_rate_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_FILE_IO_CONTROL_SET_RETRY_V1)(KODI_ADDON_VFS_HDL hdl, KODI_VFS_FILE_HDL context, bool retry);
typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_file_io_control_set_retry_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_STAT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_STAT_STRUCTURE* buffer);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_stat_v1; /* Autogenerated */
typedef std::tuple<int, IFC_VFS_STAT_STRUCTURE> msgChild_OUT_kodi_addon_vfs_stat_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_exists_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_exists_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_CLEAR_OUT_IDLE_V1)(KODI_ADDON_VFS_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_clear_out_idle_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DISCONNECT_ALL_V1)(KODI_ADDON_VFS_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_vfs_disconnect_all_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DELETE_IT_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_delete_it_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_delete_it_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_RENAME_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, const struct VFS_URL* url2);
typedef std::tuple<PtrValue, IFC_VFS_URL, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_rename_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_rename_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_EXISTS_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_exists_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_REMOVE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_remove_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CREATE_V1)(KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url);
typedef std::tuple<PtrValue, IFC_VFS_URL> msgChild__IN_kodi_addon_vfs_directory_create_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_vfs_directory_create_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_GET_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, KODI_CTX_CB_HDL ctx_cb_hdl);
typedef std::tuple<PtrValue, IFC_VFS_URL, size_t, PtrValue> msgChild__IN_kodi_addon_vfs_directory_get_v1; /* Autogenerated */
typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t> msgChild_OUT_kodi_addon_vfs_directory_get_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VFS_DIRECTORY_CONTAINS_FILES_V1)( KODI_ADDON_VFS_HDL hdl, const struct VFS_URL* url, struct VFS_DIR_ENTRY** entries, size_t* num_entries, char** rootpath);
typedef std::tuple<PtrValue, IFC_VFS_URL, size_t> msgChild__IN_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */
typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t, std::string> msgChild_OUT_kodi_addon_vfs_directory_contains_files_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
