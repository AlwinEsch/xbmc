/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/visualization.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_VISUALIZATION_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_VISUALIZATION_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_START_V1 start; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_STOP_V1 stop; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_GET_INFO_V1 get_info; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1 audio_data; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1 is_dirty; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_RENDER_V1 render; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1 get_presets; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1
      get_active_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1 prev_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1 next_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1 load_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1 random_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1 lock_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1 rate_preset; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1 is_locked; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1 update_albumart; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1 update_track; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_VISUALIZATION_FUNC_V1_TO_V1;

union KODI_ADDON_VISUALIZATION_FUNC_UNION
{
  struct KODI_ADDON_VISUALIZATION_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS_V1)(void*,
                                                                                   KODI_OWN_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_GET_PROPERTIES_V1)(
    void*, KODI_OWN_HDL, struct VIS_PROPS*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET_V1)(void*,
                                                                                     KODI_OWN_HDL,
                                                                                     const char*);

struct directFuncToKodi_addoninstance_visualization_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_VISUALIZATION_CLEAR_PRESETS_V1 kodi_addon_visualization_clear_presets_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_GET_PROPERTIES_V1 kodi_addon_visualization_get_properties_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_TRANSFER_PRESET_V1 kodi_addon_visualization_transfer_preset_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef KODI_ADDON_VISUALIZATION_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_CREATE_V1)(
    void*, KODI_OWN_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, int);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, bool);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_START_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, int, int, int, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, const struct VIS_TRACK*);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, const float*, size_t, const float*, size_t);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_DESTROY_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_GET_INFO_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL, struct VIS_INFO*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_RENDER_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_VISUALIZATION_STOP_V1)(
    void*, KODI_ADDON_VISUALIZATION_HDL);

struct directFuncToAddon_addoninstance_visualization_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1 kodi_addon_visualization_audio_data_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_CREATE_V1 kodi_addon_visualization_create_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_DESTROY_V1 kodi_addon_visualization_destroy_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1
      kodi_addon_visualization_get_active_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_GET_INFO_V1 kodi_addon_visualization_get_info_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1 kodi_addon_visualization_get_presets_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1 kodi_addon_visualization_is_dirty_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1 kodi_addon_visualization_is_locked_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1 kodi_addon_visualization_load_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1 kodi_addon_visualization_lock_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1 kodi_addon_visualization_next_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1 kodi_addon_visualization_prev_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1 kodi_addon_visualization_random_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1 kodi_addon_visualization_rate_preset_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_RENDER_V1 kodi_addon_visualization_render_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_START_V1 kodi_addon_visualization_start_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_STOP_V1 kodi_addon_visualization_stop_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1 kodi_addon_visualization_update_albumart_v1;
  PFN_INT_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1 kodi_addon_visualization_update_track_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_VIS_INFO
{
  IFC_VIS_INFO() = default;
  IFC_VIS_INFO(const VIS_INFO* c_data)
  {
    if (c_data == nullptr)
      return;

    wants_freq = c_data->wants_freq;
    sync_delay = c_data->sync_delay;
  }

  void SetCStructure(VIS_INFO* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->wants_freq = wants_freq;
    c_data->sync_delay = sync_delay;
  }

  bool wants_freq;
  int sync_delay;

  MSGPACK_DEFINE(wants_freq, sync_delay);
};

struct IFC_VIS_TRACK
{
  IFC_VIS_TRACK() = default;
  IFC_VIS_TRACK(const VIS_TRACK* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->title)
      title = c_data->title;
    if (c_data->artist)
      artist = c_data->artist;
    if (c_data->album)
      album = c_data->album;
    if (c_data->albumArtist)
      albumArtist = c_data->albumArtist;
    if (c_data->genre)
      genre = c_data->genre;
    if (c_data->comment)
      comment = c_data->comment;
    if (c_data->lyrics)
      lyrics = c_data->lyrics;
    if (c_data->reserved1)
      reserved1 = c_data->reserved1;
    if (c_data->reserved2)
      reserved2 = c_data->reserved2;
    trackNumber = c_data->trackNumber;
    discNumber = c_data->discNumber;
    duration = c_data->duration;
    year = c_data->year;
    rating = c_data->rating;
    reserved3 = c_data->reserved3;
    reserved4 = c_data->reserved4;
  }

  void SetCStructure(VIS_TRACK* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->title = title.c_str();
    c_data->artist = artist.c_str();
    c_data->album = album.c_str();
    c_data->albumArtist = albumArtist.c_str();
    c_data->genre = genre.c_str();
    c_data->comment = comment.c_str();
    c_data->lyrics = lyrics.c_str();
    c_data->reserved1 = reserved1.c_str();
    c_data->reserved2 = reserved2.c_str();
    c_data->trackNumber = trackNumber;
    c_data->discNumber = discNumber;
    c_data->duration = duration;
    c_data->year = year;
    c_data->rating = rating;
    c_data->reserved3 = reserved3;
    c_data->reserved4 = reserved4;
  }

  std::string title;
  std::string artist;
  std::string album;
  std::string albumArtist;
  std::string genre;
  std::string comment;
  std::string lyrics;
  std::string reserved1;
  std::string reserved2;
  int trackNumber;
  int discNumber;
  int duration;
  int year;
  int rating;
  int reserved3;
  int reserved4;

  MSGPACK_DEFINE(title,
                 artist,
                 album,
                 albumArtist,
                 genre,
                 comment,
                 lyrics,
                 reserved1,
                 reserved2,
                 trackNumber,
                 discNumber,
                 duration,
                 year,
                 rating,
                 reserved3,
                 reserved4);
};

struct IFC_VIS_PROPS
{
  IFC_VIS_PROPS() = default;
  IFC_VIS_PROPS(const VIS_PROPS* c_data)
  {
    if (c_data == nullptr)
      return;

    device = PtrValue(c_data->device);
    x = c_data->x;
    y = c_data->y;
    width = c_data->width;
    height = c_data->height;
    pixelRatio = c_data->pixelRatio;
    if (c_data->name)
      name = c_data->name;
    if (c_data->presets)
      presets = c_data->presets;
    if (c_data->profile)
      profile = c_data->profile;
  }

  static inline void CleanCStructure(VIS_PROPS* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->name)
    {
      free(c_data->name);
      c_data->name = nullptr;
    }
    if (c_data->presets)
    {
      free(c_data->presets);
      c_data->presets = nullptr;
    }
    if (c_data->profile)
    {
      free(c_data->profile);
      c_data->profile = nullptr;
    }
  }

  void SetCStructure(VIS_PROPS* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->device = reinterpret_cast<ADDON_HARDWARE_CONTEXT2>(device);
    c_data->x = x;
    c_data->y = y;
    c_data->width = width;
    c_data->height = height;
    c_data->pixelRatio = pixelRatio;
    if (!name.empty())
      c_data->name = strdup(name.c_str());
    if (!presets.empty())
      c_data->presets = strdup(presets.c_str());
    if (!profile.empty())
      c_data->profile = strdup(profile.c_str());
  }

  PtrValue device;
  int x;
  int y;
  int width;
  int height;
  float pixelRatio;
  std::string name;
  std::string presets;
  std::string profile;

  MSGPACK_DEFINE(device, x, y, width, height, pixelRatio, name, presets, profile);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_visualization_h : int
{
  funcParent_kodi_addon_visualization_get_properties_v1,
  funcParent_kodi_addon_visualization_transfer_preset_v1,
  funcParent_kodi_addon_visualization_clear_presets_v1,
} funcParent_addoninstance_visualization_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_get_properties(KODI_OWN_HDL hdl, struct VIS_PROPS* props) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_get_properties_v1; /* Autogenerated */
typedef std::tuple<IFC_VIS_PROPS> msgParent_OUT_kodi_addon_visualization_get_properties_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_transfer_preset(KODI_OWN_HDL hdl, const char* preset) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_transfer_preset_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_addon_visualization_clear_presets(KODI_OWN_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_visualization_clear_presets_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_visualization_h : int
{
  funcChild_kodi_addon_visualization_create_v1,
  funcChild_kodi_addon_visualization_destroy_v1,
  funcChild_kodi_addon_visualization_start_v1,
  funcChild_kodi_addon_visualization_stop_v1,
  funcChild_kodi_addon_visualization_get_info_v1,
  funcChild_kodi_addon_visualization_audio_data_v1,
  funcChild_kodi_addon_visualization_is_dirty_v1,
  funcChild_kodi_addon_visualization_render_v1,
  funcChild_kodi_addon_visualization_get_presets_v1,
  funcChild_kodi_addon_visualization_get_active_preset_v1,
  funcChild_kodi_addon_visualization_prev_preset_v1,
  funcChild_kodi_addon_visualization_next_preset_v1,
  funcChild_kodi_addon_visualization_load_preset_v1,
  funcChild_kodi_addon_visualization_random_preset_v1,
  funcChild_kodi_addon_visualization_lock_preset_v1,
  funcChild_kodi_addon_visualization_rate_preset_v1,
  funcChild_kodi_addon_visualization_is_locked_v1,
  funcChild_kodi_addon_visualization_update_albumart_v1,
  funcChild_kodi_addon_visualization_update_track_v1,
} funcChild_addoninstance_visualization_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef KODI_ADDON_VISUALIZATION_HDL(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_CREATE_V1)(KODI_OWN_HDL kodi_hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_create_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgChild_OUT_kodi_addon_visualization_create_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_DESTROY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_destroy_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_destroy_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_START_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int channels, int samples_per_sec, int bits_per_sample, const char* song_name);
typedef std::tuple<PtrValue, int, int, int, std::string> msgChild__IN_kodi_addon_visualization_start_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_start_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_STOP_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_stop_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_stop_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_INFO_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, struct VIS_INFO* info);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_info_v1; /* Autogenerated */
typedef std::tuple<IFC_VIS_INFO> msgChild_OUT_kodi_addon_visualization_get_info_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_AUDIO_DATA_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const float* audio_data, size_t audio_data_length, const float* freq_data, size_t freq_data_length);
typedef std::tuple<PtrValue, std::vector<float>, size_t, std::vector<float>, size_t> msgChild__IN_kodi_addon_visualization_audio_data_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_audio_data_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_DIRTY_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_dirty_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RENDER_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_render_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_visualization_render_v1; /* Autogenerated */
// Original API call: typedef unsigned int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_PRESETS_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_presets_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgChild_OUT_kodi_addon_visualization_get_presets_v1; /* Autogenerated */
// Original API call: typedef int(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_GET_ACTIVE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */
typedef std::tuple<int> msgChild_OUT_kodi_addon_visualization_get_active_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_PREV_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_prev_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_NEXT_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_next_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_next_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOAD_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, int select);
typedef std::tuple<PtrValue, int> msgChild__IN_kodi_addon_visualization_load_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_load_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RANDOM_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_random_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_random_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_LOCK_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_lock_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_RATE_PRESET_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, bool plus_minus);
typedef std::tuple<PtrValue, bool> msgChild__IN_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_rate_preset_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_IS_LOCKED_V1)(KODI_ADDON_VISUALIZATION_HDL hdl);
typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_visualization_is_locked_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_is_locked_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_ALBUMART_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const char* albumart);
typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_albumart_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_VISUALIZATION_UPDATE_TRACK_V1)(KODI_ADDON_VISUALIZATION_HDL hdl, const struct VIS_TRACK* track);
typedef std::tuple<PtrValue, IFC_VIS_TRACK> msgChild__IN_kodi_addon_visualization_update_track_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_visualization_update_track_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
