/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../include/kodi/c-api/audio_engine.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_AudioEngineDataFormat
#define MSGPACK_ADD_ENUM_AudioEngineDataFormat
MSGPACK_ADD_ENUM(AudioEngineDataFormat);
#endif
#ifndef MSGPACK_ADD_ENUM_AudioEngineChannel
#define MSGPACK_ADD_ENUM_AudioEngineChannel
MSGPACK_ADD_ENUM(AudioEngineChannel);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef KODI_AE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_MAKE_V1)(
    void*, const struct AUDIO_ENGINE_FMT*, unsigned int);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_GET_CURRENT_SINK_FORMAT_V1)(
    void*, struct AUDIO_ENGINE_FMT*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_IS_PLANAR_FORMAT_V1)(
    void*, enum AudioEngineDataFormat);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_IS_BUFFERING_V1)(void*,
                                                                                 KODI_AE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_IS_DRAINED_V1)(void*, KODI_AE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_IS_DRAINING_V1)(void*, KODI_AE_HDL);
typedef double(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CACHE_TIME_V1)(void*,
                                                                                     KODI_AE_HDL);
typedef double(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CACHE_TOTAL_V1)(void*,
                                                                                      KODI_AE_HDL);
typedef double(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_DELAY_V1)(void*, KODI_AE_HDL);
typedef double(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_RESAMPLE_RATIO_V1)(
    void*, KODI_AE_HDL);
typedef enum AudioEngineDataFormat(
    ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_DATA_FORMAT_V1)(void*, KODI_AE_HDL);
typedef float(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_AMPLIFICATION_V1)(void*,
                                                                                       KODI_AE_HDL);
typedef float(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_VOLUME_V1)(void*, KODI_AE_HDL);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_ADD_DATA_V1)(
    void*,
    KODI_AE_HDL,
    uint8_t* const*,
    size_t,
    size_t,
    unsigned int,
    unsigned int,
    unsigned int,
    double,
    bool,
    double);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CHANNEL_COUNT_V1)(
    void*, KODI_AE_HDL);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_FRAME_SIZE_V1)(
    void*, KODI_AE_HDL);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_SAMPLE_RATE_V1)(
    void*, KODI_AE_HDL);
typedef unsigned int(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_GET_SPACE_V1)(void*,
                                                                                      KODI_AE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_DRAIN_V1)(void*, KODI_AE_HDL, bool);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_FLUSH_V1)(void*, KODI_AE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_FREE_V1)(void*, KODI_AE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_PAUSE_V1)(void*, KODI_AE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_RESUME_V1)(void*, KODI_AE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_SET_AMPLIFICATION_V1)(void*,
                                                                                      KODI_AE_HDL,
                                                                                      float);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_SET_RESAMPLE_RATIO_V1)(void*,
                                                                                       KODI_AE_HDL,
                                                                                       double);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_AUDIOENGINE_STREAM_SET_VOLUME_V1)(void*,
                                                                               KODI_AE_HDL,
                                                                               float);

struct directFuncToKodi_audio_engine_h
{
  void* thisClassHdl;
  PFN_INT_KODI_AUDIOENGINE_GET_CURRENT_SINK_FORMAT_V1 kodi_audioengine_get_current_sink_format_v1;
  PFN_INT_KODI_AUDIOENGINE_IS_PLANAR_FORMAT_V1 kodi_audioengine_is_planar_format_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_ADD_DATA_V1 kodi_audioengine_stream_add_data_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_DRAIN_V1 kodi_audioengine_stream_drain_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_FLUSH_V1 kodi_audioengine_stream_flush_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_FREE_V1 kodi_audioengine_stream_free_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_AMPLIFICATION_V1 kodi_audioengine_stream_get_amplification_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CACHE_TIME_V1 kodi_audioengine_stream_get_cache_time_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CACHE_TOTAL_V1 kodi_audioengine_stream_get_cache_total_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_CHANNEL_COUNT_V1 kodi_audioengine_stream_get_channel_count_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_DATA_FORMAT_V1 kodi_audioengine_stream_get_data_format_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_DELAY_V1 kodi_audioengine_stream_get_delay_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_FRAME_SIZE_V1 kodi_audioengine_stream_get_frame_size_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_RESAMPLE_RATIO_V1
      kodi_audioengine_stream_get_resample_ratio_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_SAMPLE_RATE_V1 kodi_audioengine_stream_get_sample_rate_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_SPACE_V1 kodi_audioengine_stream_get_space_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_GET_VOLUME_V1 kodi_audioengine_stream_get_volume_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_IS_BUFFERING_V1 kodi_audioengine_stream_is_buffering_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_IS_DRAINED_V1 kodi_audioengine_stream_is_drained_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_IS_DRAINING_V1 kodi_audioengine_stream_is_draining_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_MAKE_V1 kodi_audioengine_stream_make_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_PAUSE_V1 kodi_audioengine_stream_pause_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_RESUME_V1 kodi_audioengine_stream_resume_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_SET_AMPLIFICATION_V1 kodi_audioengine_stream_set_amplification_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_SET_RESAMPLE_RATIO_V1
      kodi_audioengine_stream_set_resample_ratio_v1;
  PFN_INT_KODI_AUDIOENGINE_STREAM_SET_VOLUME_V1 kodi_audioengine_stream_set_volume_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{


struct directFuncToAddon_audio_engine_h
{
  void* thisClassHdl;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_AUDIO_ENGINE_FMT
{
  IFC_AUDIO_ENGINE_FMT() = default;
  IFC_AUDIO_ENGINE_FMT(const AUDIO_ENGINE_FMT* c_data)
  {
    if (c_data == nullptr)
      return;

    data_format = c_data->data_format;
    sample_rate = c_data->sample_rate;
    channel_count = c_data->channel_count;
    memcpy(channels.data(), c_data->channels, AUDIOENGINE_CH_MAX);
    frames = c_data->frames;
    frame_size = c_data->frame_size;
  }

  void SetCStructure(AUDIO_ENGINE_FMT* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->data_format = data_format;
    c_data->sample_rate = sample_rate;
    c_data->channel_count = channel_count;
    memcpy(c_data->channels, channels.data(), AUDIOENGINE_CH_MAX);
    c_data->frames = frames;
    c_data->frame_size = frame_size;
  }

  enum AudioEngineDataFormat data_format;
  unsigned int sample_rate;
  unsigned int channel_count;
  std::array<enum AudioEngineChannel, AUDIOENGINE_CH_MAX> channels;
  unsigned int frames;
  unsigned int frame_size;

  MSGPACK_DEFINE(data_format, sample_rate, channel_count, channels, frames, frame_size);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_audio_engine_h : int
{
  funcParent_kodi_audioengine_get_current_sink_format_v1,
  funcParent_kodi_audioengine_is_planar_format_v1,
  funcParent_kodi_audioengine_stream_make_v1,
  funcParent_kodi_audioengine_stream_free_v1,
  funcParent_kodi_audioengine_stream_get_space_v1,
  funcParent_kodi_audioengine_stream_add_data_v1,
  funcParent_kodi_audioengine_stream_get_delay_v1,
  funcParent_kodi_audioengine_stream_is_buffering_v1,
  funcParent_kodi_audioengine_stream_get_cache_time_v1,
  funcParent_kodi_audioengine_stream_get_cache_total_v1,
  funcParent_kodi_audioengine_stream_pause_v1,
  funcParent_kodi_audioengine_stream_resume_v1,
  funcParent_kodi_audioengine_stream_drain_v1,
  funcParent_kodi_audioengine_stream_is_draining_v1,
  funcParent_kodi_audioengine_stream_is_drained_v1,
  funcParent_kodi_audioengine_stream_flush_v1,
  funcParent_kodi_audioengine_stream_get_volume_v1,
  funcParent_kodi_audioengine_stream_set_volume_v1,
  funcParent_kodi_audioengine_stream_get_amplification_v1,
  funcParent_kodi_audioengine_stream_set_amplification_v1,
  funcParent_kodi_audioengine_stream_get_frame_size_v1,
  funcParent_kodi_audioengine_stream_get_channel_count_v1,
  funcParent_kodi_audioengine_stream_get_sample_rate_v1,
  funcParent_kodi_audioengine_stream_get_data_format_v1,
  funcParent_kodi_audioengine_stream_get_resample_ratio_v1,
  funcParent_kodi_audioengine_stream_set_resample_ratio_v1,
} funcParent_audio_engine_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT bool kodi_audioengine_get_current_sink_format(struct AUDIO_ENGINE_FMT* fmt) __INTRODUCED_IN_KODI(1);
typedef std::tuple<DummyValue> msgParent__IN_kodi_audioengine_get_current_sink_format_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_AUDIO_ENGINE_FMT> msgParent_OUT_kodi_audioengine_get_current_sink_format_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_audioengine_is_planar_format(enum AudioEngineDataFormat format) __INTRODUCED_IN_KODI(1);
typedef std::tuple<AudioEngineDataFormat> msgParent__IN_kodi_audioengine_is_planar_format_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_audioengine_is_planar_format_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT KODI_AE_HDL kodi_audioengine_stream_make(const struct AUDIO_ENGINE_FMT* fmt, unsigned int options) __INTRODUCED_IN_KODI(1);
typedef std::tuple<IFC_AUDIO_ENGINE_FMT, unsigned int> msgParent__IN_kodi_audioengine_stream_make_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgParent_OUT_kodi_audioengine_stream_make_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_free(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_free_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_free_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT unsigned int kodi_audioengine_stream_get_space(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_space_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgParent_OUT_kodi_audioengine_stream_get_space_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT unsigned int kodi_audioengine_stream_add_data(KODI_AE_HDL hdl, uint8_t* const* data, size_t planes, size_t data_size, unsigned int offset, unsigned int frames, unsigned int frame_size, double pts, bool hasDownmix, double centerMixLevel) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::vector<std::vector<uint8_t>>, size_t, size_t, unsigned int, unsigned int, unsigned int, double, bool, double> msgParent__IN_kodi_audioengine_stream_add_data_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgParent_OUT_kodi_audioengine_stream_add_data_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT double kodi_audioengine_stream_get_delay(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_delay_v1; /* Autogenerated */
typedef std::tuple<double> msgParent_OUT_kodi_audioengine_stream_get_delay_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_audioengine_stream_is_buffering(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_is_buffering_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_audioengine_stream_is_buffering_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT double kodi_audioengine_stream_get_cache_time(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_cache_time_v1; /* Autogenerated */
typedef std::tuple<double> msgParent_OUT_kodi_audioengine_stream_get_cache_time_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT double kodi_audioengine_stream_get_cache_total(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_cache_total_v1; /* Autogenerated */
typedef std::tuple<double> msgParent_OUT_kodi_audioengine_stream_get_cache_total_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_pause(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_pause_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_pause_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_resume(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_resume_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_resume_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_drain(KODI_AE_HDL hdl, bool wait) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_audioengine_stream_drain_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_drain_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_audioengine_stream_is_draining(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_is_draining_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_audioengine_stream_is_draining_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_audioengine_stream_is_drained(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_is_drained_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_audioengine_stream_is_drained_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_flush(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_flush_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_flush_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT float kodi_audioengine_stream_get_volume(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_volume_v1; /* Autogenerated */
typedef std::tuple<float> msgParent_OUT_kodi_audioengine_stream_get_volume_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_set_volume(KODI_AE_HDL hdl, float volume) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, float> msgParent__IN_kodi_audioengine_stream_set_volume_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_set_volume_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT float kodi_audioengine_stream_get_amplification(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_amplification_v1; /* Autogenerated */
typedef std::tuple<float> msgParent_OUT_kodi_audioengine_stream_get_amplification_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_set_amplification(KODI_AE_HDL hdl, float amplify) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, float> msgParent__IN_kodi_audioengine_stream_set_amplification_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_set_amplification_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT unsigned int kodi_audioengine_stream_get_frame_size(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_frame_size_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgParent_OUT_kodi_audioengine_stream_get_frame_size_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT unsigned int kodi_audioengine_stream_get_channel_count(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_channel_count_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgParent_OUT_kodi_audioengine_stream_get_channel_count_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT unsigned int kodi_audioengine_stream_get_sample_rate(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_sample_rate_v1; /* Autogenerated */
typedef std::tuple<unsigned int> msgParent_OUT_kodi_audioengine_stream_get_sample_rate_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT enum AudioEngineDataFormat kodi_audioengine_stream_get_data_format( KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_data_format_v1; /* Autogenerated */
typedef std::tuple<AudioEngineDataFormat> msgParent_OUT_kodi_audioengine_stream_get_data_format_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT double kodi_audioengine_stream_get_resample_ratio(KODI_AE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_audioengine_stream_get_resample_ratio_v1; /* Autogenerated */
typedef std::tuple<double> msgParent_OUT_kodi_audioengine_stream_get_resample_ratio_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_audioengine_stream_set_resample_ratio(KODI_AE_HDL hdl, double ratio) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, double> msgParent__IN_kodi_audioengine_stream_set_resample_ratio_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_audioengine_stream_set_resample_ratio_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_audio_engine_h : int
{
  funcChild_audio_engine_h_dummy
} funcChild_audio_engine_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
