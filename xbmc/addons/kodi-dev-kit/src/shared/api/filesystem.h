/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../include/kodi/c-api/filesystem.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_CURLOptiontype
#define MSGPACK_ADD_ENUM_CURLOptiontype
MSGPACK_ADD_ENUM(CURLOptiontype);
#endif
#ifndef MSGPACK_ADD_ENUM_FilePropertyTypes
#define MSGPACK_ADD_ENUM_FilePropertyTypes
MSGPACK_ADD_ENUM(FilePropertyTypes);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef KODI_FILE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_CURL_CREATE_V1)(void*, const char*);
typedef KODI_FILE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_OPEN_FOR_WRITE_V1)(void*,
                                                                                  const char*,
                                                                                  bool);
typedef KODI_FILE_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_OPEN_V1)(void*,
                                                                        const char*,
                                                                        unsigned int);
typedef KODI_HTTP_HEADER_HDL(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_OPEN_V1)(void*,
                                                                                      const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_CAN_OPEN_DIRECTORY_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_COPY_FILE_V1)(void*, const char*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_CREATE_DIRECTORY_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_DELETE_FILE_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_DIRECTORY_EXISTS_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_AT_END_V1)(void*, KODI_FILE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_CURL_ADD_OPTION_V1)(
    void*, KODI_FILE_HDL, enum CURLOptiontype, const char*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_CURL_OPEN_V1)(void*,
                                                                    KODI_FILE_HDL,
                                                                    unsigned int);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_EXISTS_V1)(void*, const char*, bool);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_IO_CTL_GET_CACHE_STATUS_V1)(
    void*, KODI_FILE_HDL, struct VFS_CACHE_STATUS*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_IO_CTL_GET_SEEK_POSSIBLE_V1)(void*,
                                                                                   KODI_FILE_HDL);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_IO_CTL_SET_CACHE_RATE_V1)(void*,
                                                                                KODI_FILE_HDL,
                                                                                unsigned int);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_IO_CTL_SET_RETRY_V1)(void*,
                                                                           KODI_FILE_HDL,
                                                                           bool);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_READ_LINE_V1)(void*,
                                                                    KODI_FILE_HDL,
                                                                    char*,
                                                                    size_t);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_CONTENT_TYPE_V1)(void*,
                                                                      const char*,
                                                                      char**,
                                                                      const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_COOKIES_V1)(void*, const char*, char**);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_DIRECTORY_V1)(
    void*, const char*, const char*, struct VFS_DIR_ENTRY**, size_t*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_DISK_SPACE_V1)(
    void*, const char*, uint64_t*, uint64_t*, uint64_t*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_MIME_TYPE_V1)(void*,
                                                                   const char*,
                                                                   char**,
                                                                   const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_IS_INTERNET_STREAM_V1)(void*, const char*, bool);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_IS_LOCAL_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_IS_ON_LAN_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_IS_REMOTE_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_IS_URL_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_REMOVE_DIRECTORY_RECURSIVE_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_REMOVE_DIRECTORY_V1)(void*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_RENAME_FILE_V1)(void*, const char*, const char*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_STAT_FILE_V1)(void*,
                                                               const char*,
                                                               struct VFS_STAT_STRUCTURE*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_PROPERTY_VALUE_V1)(
    void*, KODI_FILE_HDL, enum FilePropertyTypes, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_CACHE_THUMB_NAME_V1)(void*, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_GET_FILE_MD5_V1)(void*, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_CHARSET_V1)(void*,
                                                                              KODI_HTTP_HEADER_HDL);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_HEADER_V1)(void*,
                                                                             KODI_HTTP_HEADER_HDL);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_MIME_TYPE_V1)(
    void*, KODI_HTTP_HEADER_HDL);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_PROTO_LINE_V1)(
    void*, KODI_HTTP_HEADER_HDL);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_VALUE_V1)(void*,
                                                                            KODI_HTTP_HEADER_HDL,
                                                                            const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_MAKE_LEGAL_FILENAME_V1)(void*, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_MAKE_LEGAL_PATH_V1)(void*, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_TRANSLATE_SPECIAL_PROTOCOL_V1)(void*,
                                                                                 const char*);
typedef char**(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_PROPERTY_VALUES_V1)(
    void*, KODI_FILE_HDL, enum FilePropertyTypes, const char*, size_t*);
typedef char**(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_GET_VALUES_V1)(void*,
                                                                              KODI_HTTP_HEADER_HDL,
                                                                              const char*,
                                                                              size_t*);
typedef double(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_DOWNLOAD_SPEED_V1)(void*,
                                                                               KODI_FILE_HDL);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_CHUNK_SIZE_V1)(void*, KODI_FILE_HDL);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_TRUNCATE_V1)(void*, KODI_FILE_HDL, int64_t);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_LENGTH_V1)(void*, KODI_FILE_HDL);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_GET_POSITION_V1)(void*, KODI_FILE_HDL);
typedef int64_t(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_SEEK_V1)(void*,
                                                                  KODI_FILE_HDL,
                                                                  int64_t,
                                                                  int);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_READ_V1)(void*,
                                                                  KODI_FILE_HDL,
                                                                  uint8_t*,
                                                                  size_t);
typedef ssize_t(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_WRITE_V1)(void*,
                                                                   KODI_FILE_HDL,
                                                                   const uint8_t*,
                                                                   size_t);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_CLOSE_V1)(void*, KODI_FILE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_FILE_FLUSH_V1)(void*, KODI_FILE_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_VFS_HTTP_HEADER_CLOSE_V1)(void*, KODI_HTTP_HEADER_HDL);

struct directFuncToKodi_filesystem_h
{
  void* thisClassHdl;
  /* Function "kodi_vfs_free_directory" only used inside dev-kit library only */
  PFN_INT_KODI_VFS_CAN_OPEN_DIRECTORY_V1 kodi_vfs_can_open_directory_v1;
  PFN_INT_KODI_VFS_COPY_FILE_V1 kodi_vfs_copy_file_v1;
  PFN_INT_KODI_VFS_CREATE_DIRECTORY_V1 kodi_vfs_create_directory_v1;
  PFN_INT_KODI_VFS_DELETE_FILE_V1 kodi_vfs_delete_file_v1;
  PFN_INT_KODI_VFS_DIRECTORY_EXISTS_V1 kodi_vfs_directory_exists_v1;
  PFN_INT_KODI_VFS_FILE_AT_END_V1 kodi_vfs_file_at_end_v1;
  PFN_INT_KODI_VFS_FILE_CLOSE_V1 kodi_vfs_file_close_v1;
  PFN_INT_KODI_VFS_FILE_CURL_ADD_OPTION_V1 kodi_vfs_file_curl_add_option_v1;
  PFN_INT_KODI_VFS_FILE_CURL_CREATE_V1 kodi_vfs_file_curl_create_v1;
  PFN_INT_KODI_VFS_FILE_CURL_OPEN_V1 kodi_vfs_file_curl_open_v1;
  PFN_INT_KODI_VFS_FILE_EXISTS_V1 kodi_vfs_file_exists_v1;
  PFN_INT_KODI_VFS_FILE_FLUSH_V1 kodi_vfs_file_flush_v1;
  PFN_INT_KODI_VFS_FILE_GET_CHUNK_SIZE_V1 kodi_vfs_file_get_chunk_size_v1;
  PFN_INT_KODI_VFS_FILE_GET_DOWNLOAD_SPEED_V1 kodi_vfs_file_get_download_speed_v1;
  PFN_INT_KODI_VFS_FILE_GET_LENGTH_V1 kodi_vfs_file_get_length_v1;
  PFN_INT_KODI_VFS_FILE_GET_POSITION_V1 kodi_vfs_file_get_position_v1;
  PFN_INT_KODI_VFS_FILE_GET_PROPERTY_VALUES_V1 kodi_vfs_file_get_property_values_v1;
  PFN_INT_KODI_VFS_FILE_GET_PROPERTY_VALUE_V1 kodi_vfs_file_get_property_value_v1;
  PFN_INT_KODI_VFS_FILE_IO_CTL_GET_CACHE_STATUS_V1 kodi_vfs_file_io_ctl_get_cache_status_v1;
  PFN_INT_KODI_VFS_FILE_IO_CTL_GET_SEEK_POSSIBLE_V1 kodi_vfs_file_io_ctl_get_seek_possible_v1;
  PFN_INT_KODI_VFS_FILE_IO_CTL_SET_CACHE_RATE_V1 kodi_vfs_file_io_ctl_set_cache_rate_v1;
  PFN_INT_KODI_VFS_FILE_IO_CTL_SET_RETRY_V1 kodi_vfs_file_io_ctl_set_retry_v1;
  PFN_INT_KODI_VFS_FILE_OPEN_FOR_WRITE_V1 kodi_vfs_file_open_for_write_v1;
  PFN_INT_KODI_VFS_FILE_OPEN_V1 kodi_vfs_file_open_v1;
  PFN_INT_KODI_VFS_FILE_READ_LINE_V1 kodi_vfs_file_read_line_v1;
  PFN_INT_KODI_VFS_FILE_READ_V1 kodi_vfs_file_read_v1;
  PFN_INT_KODI_VFS_FILE_SEEK_V1 kodi_vfs_file_seek_v1;
  PFN_INT_KODI_VFS_FILE_TRUNCATE_V1 kodi_vfs_file_truncate_v1;
  PFN_INT_KODI_VFS_FILE_WRITE_V1 kodi_vfs_file_write_v1;
  PFN_INT_KODI_VFS_GET_CACHE_THUMB_NAME_V1 kodi_vfs_get_cache_thumb_name_v1;
  PFN_INT_KODI_VFS_GET_CONTENT_TYPE_V1 kodi_vfs_get_content_type_v1;
  PFN_INT_KODI_VFS_GET_COOKIES_V1 kodi_vfs_get_cookies_v1;
  PFN_INT_KODI_VFS_GET_DIRECTORY_V1 kodi_vfs_get_directory_v1;
  PFN_INT_KODI_VFS_GET_DISK_SPACE_V1 kodi_vfs_get_disk_space_v1;
  PFN_INT_KODI_VFS_GET_FILE_MD5_V1 kodi_vfs_get_file_md5_v1;
  PFN_INT_KODI_VFS_GET_MIME_TYPE_V1 kodi_vfs_get_mime_type_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_CLOSE_V1 kodi_vfs_http_header_close_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_CHARSET_V1 kodi_vfs_http_header_get_charset_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_HEADER_V1 kodi_vfs_http_header_get_header_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_MIME_TYPE_V1 kodi_vfs_http_header_get_mime_type_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_PROTO_LINE_V1 kodi_vfs_http_header_get_proto_line_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_VALUES_V1 kodi_vfs_http_header_get_values_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_GET_VALUE_V1 kodi_vfs_http_header_get_value_v1;
  PFN_INT_KODI_VFS_HTTP_HEADER_OPEN_V1 kodi_vfs_http_header_open_v1;
  PFN_INT_KODI_VFS_IS_INTERNET_STREAM_V1 kodi_vfs_is_internet_stream_v1;
  PFN_INT_KODI_VFS_IS_LOCAL_V1 kodi_vfs_is_local_v1;
  PFN_INT_KODI_VFS_IS_ON_LAN_V1 kodi_vfs_is_on_lan_v1;
  PFN_INT_KODI_VFS_IS_REMOTE_V1 kodi_vfs_is_remote_v1;
  PFN_INT_KODI_VFS_IS_URL_V1 kodi_vfs_is_url_v1;
  PFN_INT_KODI_VFS_MAKE_LEGAL_FILENAME_V1 kodi_vfs_make_legal_filename_v1;
  PFN_INT_KODI_VFS_MAKE_LEGAL_PATH_V1 kodi_vfs_make_legal_path_v1;
  PFN_INT_KODI_VFS_REMOVE_DIRECTORY_RECURSIVE_V1 kodi_vfs_remove_directory_recursive_v1;
  PFN_INT_KODI_VFS_REMOVE_DIRECTORY_V1 kodi_vfs_remove_directory_v1;
  PFN_INT_KODI_VFS_RENAME_FILE_V1 kodi_vfs_rename_file_v1;
  PFN_INT_KODI_VFS_STAT_FILE_V1 kodi_vfs_stat_file_v1;
  PFN_INT_KODI_VFS_TRANSLATE_SPECIAL_PROTOCOL_V1 kodi_vfs_translate_special_protocol_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{


struct directFuncToAddon_filesystem_h
{
  void* thisClassHdl;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_VFS_PROPERTY
{
  IFC_VFS_PROPERTY() = default;
  IFC_VFS_PROPERTY(const VFS_PROPERTY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->name)
      name = c_data->name;
    if (c_data->val)
      val = c_data->val;
  }

  static inline void CleanCStructure(VFS_PROPERTY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->name)
    {
      free(c_data->name);
      c_data->name = nullptr;
    }
    if (c_data->val)
    {
      free(c_data->val);
      c_data->val = nullptr;
    }
  }

  void SetCStructure(VFS_PROPERTY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (!name.empty())
      c_data->name = strdup(name.c_str());
    if (!val.empty())
      c_data->val = strdup(val.c_str());
  }

  std::string name;
  std::string val;

  MSGPACK_DEFINE(name, val);
};

struct IFC_VFS_DIR_ENTRY
{
  IFC_VFS_DIR_ENTRY() = default;
  IFC_VFS_DIR_ENTRY(const VFS_DIR_ENTRY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->label)
      label = c_data->label;
    if (c_data->title)
      title = c_data->title;
    if (c_data->path)
      path = c_data->path;
    num_props = c_data->num_props;
    if (c_data->properties && c_data->num_props != 0)
    {
      for (size_t i = 0; i < c_data->num_props; ++i)
        properties.emplace_back(&c_data->properties[i]);
    }
    date_time = c_data->date_time;
    folder = c_data->folder;
    size = c_data->size;
  }

  static inline void CleanCStructure(VFS_DIR_ENTRY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->label)
    {
      free(c_data->label);
      c_data->label = nullptr;
    }
    if (c_data->title)
    {
      free(c_data->title);
      c_data->title = nullptr;
    }
    if (c_data->path)
    {
      free(c_data->path);
      c_data->path = nullptr;
    }
    if (c_data->properties)
    {
      IFC_VFS_PROPERTY helper;
      for (size_t i = 0; i < c_data->num_props; ++i)
        helper.CleanCStructure(&c_data->properties[i]);
      free(c_data->properties);
      c_data->properties = nullptr;
    }
  }

  void SetCStructure(VFS_DIR_ENTRY* c_data)
  {
    if (c_data == nullptr)
      return;

    if (!label.empty())
      c_data->label = strdup(label.c_str());
    if (!title.empty())
      c_data->title = strdup(title.c_str());
    if (!path.empty())
      c_data->path = strdup(path.c_str());
    c_data->num_props = num_props;
    if (!properties.empty())
    {
      c_data->properties =
          static_cast<VFS_PROPERTY*>(malloc(sizeof(VFS_PROPERTY) * properties.size()));
      for (size_t i = 0; i < properties.size(); ++i)
        properties[i].SetCStructure(&c_data->properties[i]);
    }
    c_data->date_time = date_time;
    c_data->folder = folder;
    c_data->size = size;
  }

  std::string label;
  std::string title;
  std::string path;
  size_t num_props;
  std::vector<IFC_VFS_PROPERTY> properties;
  time_t date_time;
  bool folder;
  uint64_t size;

  MSGPACK_DEFINE(label, title, path, num_props, properties, date_time, folder, size);
};

struct IFC_VFS_STAT_STRUCTURE
{
  IFC_VFS_STAT_STRUCTURE() = default;
  IFC_VFS_STAT_STRUCTURE(const VFS_STAT_STRUCTURE* c_data)
  {
    if (c_data == nullptr)
      return;

    deviceId = c_data->deviceId;
    size = c_data->size;
    accessTime = c_data->accessTime;
    modificationTime = c_data->modificationTime;
    statusTime = c_data->statusTime;
    isDirectory = c_data->isDirectory;
    isSymLink = c_data->isSymLink;
    isBlock = c_data->isBlock;
    isCharacter = c_data->isCharacter;
    isFifo = c_data->isFifo;
    isRegular = c_data->isRegular;
    isSocket = c_data->isSocket;
    fileSerialNumber = c_data->fileSerialNumber;
  }

  void SetCStructure(VFS_STAT_STRUCTURE* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->deviceId = deviceId;
    c_data->size = size;
    c_data->accessTime = accessTime;
    c_data->modificationTime = modificationTime;
    c_data->statusTime = statusTime;
    c_data->isDirectory = isDirectory;
    c_data->isSymLink = isSymLink;
    c_data->isBlock = isBlock;
    c_data->isCharacter = isCharacter;
    c_data->isFifo = isFifo;
    c_data->isRegular = isRegular;
    c_data->isSocket = isSocket;
    c_data->fileSerialNumber = fileSerialNumber;
  }

  uint32_t deviceId;
  uint64_t size;
  time_t accessTime;
  time_t modificationTime;
  time_t statusTime;
  bool isDirectory;
  bool isSymLink;
  bool isBlock;
  bool isCharacter;
  bool isFifo;
  bool isRegular;
  bool isSocket;
  uint64_t fileSerialNumber;

  MSGPACK_DEFINE(deviceId,
                 size,
                 accessTime,
                 modificationTime,
                 statusTime,
                 isDirectory,
                 isSymLink,
                 isBlock,
                 isCharacter,
                 isFifo,
                 isRegular,
                 isSocket,
                 fileSerialNumber);
};

struct IFC_VFS_CACHE_STATUS
{
  IFC_VFS_CACHE_STATUS() = default;
  IFC_VFS_CACHE_STATUS(const VFS_CACHE_STATUS* c_data)
  {
    if (c_data == nullptr)
      return;

    forward = c_data->forward;
    maxrate = c_data->maxrate;
    currate = c_data->currate;
    lowspeed = c_data->lowspeed;
  }

  void SetCStructure(VFS_CACHE_STATUS* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->forward = forward;
    c_data->maxrate = maxrate;
    c_data->currate = currate;
    c_data->lowspeed = lowspeed;
  }

  uint64_t forward;
  unsigned int maxrate;
  unsigned int currate;
  bool lowspeed;

  MSGPACK_DEFINE(forward, maxrate, currate, lowspeed);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_filesystem_h : int
{
  funcParent_kodi_vfs_can_open_directory_v1,
  funcParent_kodi_vfs_create_directory_v1,
  funcParent_kodi_vfs_remove_directory_v1,
  funcParent_kodi_vfs_remove_directory_recursive_v1,
  funcParent_kodi_vfs_directory_exists_v1,
  funcParent_kodi_vfs_get_directory_v1,
  funcParent_kodi_vfs_free_directory_v1,
  funcParent_kodi_vfs_file_exists_v1,
  funcParent_kodi_vfs_stat_file_v1,
  funcParent_kodi_vfs_delete_file_v1,
  funcParent_kodi_vfs_rename_file_v1,
  funcParent_kodi_vfs_copy_file_v1,
  funcParent_kodi_vfs_get_file_md5_v1,
  funcParent_kodi_vfs_get_cache_thumb_name_v1,
  funcParent_kodi_vfs_make_legal_filename_v1,
  funcParent_kodi_vfs_make_legal_path_v1,
  funcParent_kodi_vfs_translate_special_protocol_v1,
  funcParent_kodi_vfs_is_internet_stream_v1,
  funcParent_kodi_vfs_is_on_lan_v1,
  funcParent_kodi_vfs_is_remote_v1,
  funcParent_kodi_vfs_is_local_v1,
  funcParent_kodi_vfs_is_url_v1,
  funcParent_kodi_vfs_get_mime_type_v1,
  funcParent_kodi_vfs_get_content_type_v1,
  funcParent_kodi_vfs_get_cookies_v1,
  funcParent_kodi_vfs_get_disk_space_v1,
  funcParent_kodi_vfs_http_header_open_v1,
  funcParent_kodi_vfs_http_header_close_v1,
  funcParent_kodi_vfs_http_header_get_value_v1,
  funcParent_kodi_vfs_http_header_get_values_v1,
  funcParent_kodi_vfs_http_header_get_header_v1,
  funcParent_kodi_vfs_http_header_get_mime_type_v1,
  funcParent_kodi_vfs_http_header_get_charset_v1,
  funcParent_kodi_vfs_http_header_get_proto_line_v1,
  funcParent_kodi_vfs_file_open_v1,
  funcParent_kodi_vfs_file_open_for_write_v1,
  funcParent_kodi_vfs_file_curl_create_v1,
  funcParent_kodi_vfs_file_curl_add_option_v1,
  funcParent_kodi_vfs_file_curl_open_v1,
  funcParent_kodi_vfs_file_close_v1,
  funcParent_kodi_vfs_file_read_v1,
  funcParent_kodi_vfs_file_read_line_v1,
  funcParent_kodi_vfs_file_write_v1,
  funcParent_kodi_vfs_file_flush_v1,
  funcParent_kodi_vfs_file_seek_v1,
  funcParent_kodi_vfs_file_truncate_v1,
  funcParent_kodi_vfs_file_get_position_v1,
  funcParent_kodi_vfs_file_get_length_v1,
  funcParent_kodi_vfs_file_at_end_v1,
  funcParent_kodi_vfs_file_get_download_speed_v1,
  funcParent_kodi_vfs_file_get_chunk_size_v1,
  funcParent_kodi_vfs_file_io_ctl_get_seek_possible_v1,
  funcParent_kodi_vfs_file_io_ctl_get_cache_status_v1,
  funcParent_kodi_vfs_file_io_ctl_set_cache_rate_v1,
  funcParent_kodi_vfs_file_io_ctl_set_retry_v1,
  funcParent_kodi_vfs_file_get_property_value_v1,
  funcParent_kodi_vfs_file_get_property_values_v1,
} funcParent_filesystem_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_can_open_directory(const char* url) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_can_open_directory_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_can_open_directory_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_create_directory(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_create_directory_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_create_directory_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_remove_directory(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_remove_directory_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_remove_directory_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_remove_directory_recursive(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_remove_directory_recursive_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_remove_directory_recursive_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_directory_exists(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_directory_exists_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_directory_exists_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_get_directory(const char* path, const char* mask, struct VFS_DIR_ENTRY** items, size_t* num_items) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, std::string, size_t> msgParent__IN_kodi_vfs_get_directory_v1; /* Autogenerated */
typedef std::tuple<bool, std::vector<IFC_VFS_DIR_ENTRY>, size_t> msgParent_OUT_kodi_vfs_get_directory_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_vfs_free_directory(struct VFS_DIR_ENTRY* items, size_t num_items) __INTRODUCED_IN_KODI(1);
/* NOTE: msgParent__IN_kodi_vfs_free_directory - Override active to use inside dev-kit library only */
/* NOTE: msgParent_OUT_kodi_vfs_free_directory - Override active to use inside dev-kit library only */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_exists(const char* filename, bool useCache) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool> msgParent__IN_kodi_vfs_file_exists_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_exists_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_stat_file(const char* filename, struct VFS_STAT_STRUCTURE* buffer) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_stat_file_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_VFS_STAT_STRUCTURE> msgParent_OUT_kodi_vfs_stat_file_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_delete_file(const char* filename) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_delete_file_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_delete_file_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_rename_file(const char* filename, const char* newFileName) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, std::string> msgParent__IN_kodi_vfs_rename_file_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_rename_file_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_copy_file(const char* filename, const char* dest) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, std::string> msgParent__IN_kodi_vfs_copy_file_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_copy_file_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_get_file_md5(const char* filename) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_get_file_md5_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_get_file_md5_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_get_cache_thumb_name(const char* filename) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_get_cache_thumb_name_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_get_cache_thumb_name_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_make_legal_filename(const char* filename) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_make_legal_filename_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_make_legal_filename_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_make_legal_path(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_make_legal_path_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_make_legal_path_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_translate_special_protocol(const char* strSource) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_translate_special_protocol_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_translate_special_protocol_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_is_internet_stream(const char* path, bool strictCheck) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool> msgParent__IN_kodi_vfs_is_internet_stream_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_is_internet_stream_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_is_on_lan(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_is_on_lan_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_is_on_lan_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_is_remote(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_is_remote_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_is_remote_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_is_local(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_is_local_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_is_local_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_is_url(const char* path) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_is_url_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_is_url_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_get_mime_type(const char* url, char** content, const char* useragent) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, std::string> msgParent__IN_kodi_vfs_get_mime_type_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_vfs_get_mime_type_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_get_content_type(const char* url, char** content, const char* useragent) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, std::string> msgParent__IN_kodi_vfs_get_content_type_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_vfs_get_content_type_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_get_cookies(const char* url, char** cookies) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_get_cookies_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_vfs_get_cookies_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_get_disk_space(const char* path, uint64_t* capacity, uint64_t* free, uint64_t* available) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, uint64_t, uint64_t, uint64_t> msgParent__IN_kodi_vfs_get_disk_space_v1; /* Autogenerated */
typedef std::tuple<bool, uint64_t, uint64_t, uint64_t> msgParent_OUT_kodi_vfs_get_disk_space_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT KODI_HTTP_HEADER_HDL kodi_vfs_http_header_open(const char* url) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_http_header_open_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgParent_OUT_kodi_vfs_http_header_open_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_vfs_http_header_close(KODI_HTTP_HEADER_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_http_header_close_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_vfs_http_header_close_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_http_header_get_value(KODI_HTTP_HEADER_HDL hdl, const char* param) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::string> msgParent__IN_kodi_vfs_http_header_get_value_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_http_header_get_value_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char** kodi_vfs_http_header_get_values(KODI_HTTP_HEADER_HDL hdl, const char* param, size_t* length) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::string, size_t> msgParent__IN_kodi_vfs_http_header_get_values_v1; /* Autogenerated */
typedef std::tuple<std::vector<std::string>, size_t> msgParent_OUT_kodi_vfs_http_header_get_values_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_http_header_get_header(KODI_HTTP_HEADER_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_http_header_get_header_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_http_header_get_header_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_http_header_get_mime_type(KODI_HTTP_HEADER_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_http_header_get_mime_type_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_http_header_get_mime_type_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_http_header_get_charset(KODI_HTTP_HEADER_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_http_header_get_charset_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_http_header_get_charset_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_http_header_get_proto_line(KODI_HTTP_HEADER_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_http_header_get_proto_line_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_http_header_get_proto_line_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT KODI_FILE_HDL kodi_vfs_file_open(const char* filename, unsigned int flags) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, unsigned int> msgParent__IN_kodi_vfs_file_open_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgParent_OUT_kodi_vfs_file_open_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT KODI_FILE_HDL kodi_vfs_file_open_for_write(const char* filename, bool overwrite) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool> msgParent__IN_kodi_vfs_file_open_for_write_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgParent_OUT_kodi_vfs_file_open_for_write_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT KODI_FILE_HDL kodi_vfs_file_curl_create(const char* url) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_vfs_file_curl_create_v1; /* Autogenerated */
typedef std::tuple<PtrValue> msgParent_OUT_kodi_vfs_file_curl_create_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_curl_add_option(KODI_FILE_HDL hdl, enum CURLOptiontype type, const char* name, const char* value) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, CURLOptiontype, std::string, std::string> msgParent__IN_kodi_vfs_file_curl_add_option_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_curl_add_option_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_curl_open(KODI_FILE_HDL hdl, unsigned int flags) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, unsigned int> msgParent__IN_kodi_vfs_file_curl_open_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_curl_open_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_vfs_file_close(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_close_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_vfs_file_close_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT ssize_t kodi_vfs_file_read(KODI_FILE_HDL hdl, uint8_t* ptr, size_t size) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, size_t> msgParent__IN_kodi_vfs_file_read_v1; /* Autogenerated */
typedef std::tuple<ssize_t, std::vector<uint8_t>> msgParent_OUT_kodi_vfs_file_read_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_read_line(KODI_FILE_HDL hdl, char* szLine, size_t lineLength) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, size_t> msgParent__IN_kodi_vfs_file_read_line_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_vfs_file_read_line_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT ssize_t kodi_vfs_file_write(KODI_FILE_HDL hdl, const uint8_t* ptr, size_t size) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, std::vector<uint8_t>, size_t> msgParent__IN_kodi_vfs_file_write_v1; /* Autogenerated */
typedef std::tuple<ssize_t> msgParent_OUT_kodi_vfs_file_write_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_vfs_file_flush(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_flush_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_vfs_file_flush_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int64_t kodi_vfs_file_seek(KODI_FILE_HDL hdl, int64_t position, int whence) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, int64_t, int> msgParent__IN_kodi_vfs_file_seek_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgParent_OUT_kodi_vfs_file_seek_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int kodi_vfs_file_truncate(KODI_FILE_HDL hdl, int64_t size) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, int64_t> msgParent__IN_kodi_vfs_file_truncate_v1; /* Autogenerated */
typedef std::tuple<int> msgParent_OUT_kodi_vfs_file_truncate_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int64_t kodi_vfs_file_get_position(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_get_position_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgParent_OUT_kodi_vfs_file_get_position_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int64_t kodi_vfs_file_get_length(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_get_length_v1; /* Autogenerated */
typedef std::tuple<int64_t> msgParent_OUT_kodi_vfs_file_get_length_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_at_end(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_at_end_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_at_end_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT double kodi_vfs_file_get_download_speed(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_get_download_speed_v1; /* Autogenerated */
typedef std::tuple<double> msgParent_OUT_kodi_vfs_file_get_download_speed_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int kodi_vfs_file_get_chunk_size(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_get_chunk_size_v1; /* Autogenerated */
typedef std::tuple<int> msgParent_OUT_kodi_vfs_file_get_chunk_size_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_io_ctl_get_seek_possible(KODI_FILE_HDL hdl) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_io_ctl_get_seek_possible_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_io_ctl_get_seek_possible_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_io_ctl_get_cache_status(KODI_FILE_HDL hdl, struct VFS_CACHE_STATUS* status) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_vfs_file_io_ctl_get_cache_status_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_VFS_CACHE_STATUS> msgParent_OUT_kodi_vfs_file_io_ctl_get_cache_status_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_io_ctl_set_cache_rate(KODI_FILE_HDL hdl, unsigned int rate) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, unsigned int> msgParent__IN_kodi_vfs_file_io_ctl_set_cache_rate_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_io_ctl_set_cache_rate_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_vfs_file_io_ctl_set_retry(KODI_FILE_HDL hdl, bool retry) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_vfs_file_io_ctl_set_retry_v1; /* Autogenerated */
typedef std::tuple<bool> msgParent_OUT_kodi_vfs_file_io_ctl_set_retry_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_vfs_file_get_property_value(KODI_FILE_HDL hdl, enum FilePropertyTypes type, const char* name) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, FilePropertyTypes, std::string> msgParent__IN_kodi_vfs_file_get_property_value_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_vfs_file_get_property_value_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char** kodi_vfs_file_get_property_values(KODI_FILE_HDL hdl, enum FilePropertyTypes type, const char* name, size_t* length) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue, FilePropertyTypes, std::string, size_t> msgParent__IN_kodi_vfs_file_get_property_values_v1; /* Autogenerated */
typedef std::tuple<std::vector<std::string>, size_t> msgParent_OUT_kodi_vfs_file_get_property_values_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_filesystem_h : int
{
  funcChild_filesystem_h_dummy
} funcChild_filesystem_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
