/*
 *  Copyright (C) 2005-2021 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../include/kodi/c-api/general.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_LangFormats
#define MSGPACK_ADD_ENUM_LangFormats
MSGPACK_ADD_ENUM(LangFormats);
#endif
#ifndef MSGPACK_ADD_ENUM_QueueMsg
#define MSGPACK_ADD_ENUM_QueueMsg
MSGPACK_ADD_ENUM(QueueMsg);
#endif
#ifndef MSGPACK_ADD_ENUM_DigestType
#define MSGPACK_ADD_ENUM_DigestType
MSGPACK_ADD_ENUM(DigestType);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_CHANGE_KEYBOARD_LAYOUT_V1)(void*, char**);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_KEYBOARD_LAYOUT_V1)(void*,
                                                                     int,
                                                                     char**,
                                                                     struct AddonKeyboardKeyTable*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_IS_ADDON_AVILABLE_V1)(void*,
                                                                   const char*,
                                                                   char**,
                                                                   bool*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_CURRENT_SKIN_ID_V1)(void*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_DIGEST_V1)(void*, enum DigestType, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_LANGUAGE_V1)(void*, enum LangFormats, bool);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_LOCALIZED_STRING_V1)(void*, long);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_REGION_V1)(void*, const char*);
typedef char*(ATTR_INT_APIENTRYP PFN_INT_KODI_UNKNOWN_TO_UTF8_V1)(void*, const char*, bool*, bool);
typedef int(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_GLOBAL_IDLE_TIME_V1)(void*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_GET_FREE_MEM_V1)(void*, long*, long*, bool);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_PLAY_SFX_V1)(void*, const char*, bool);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_QUEUE_NOTIFICATION_V1)(
    void*, enum QueueMsg, const char*, const char*, const char*, unsigned int, bool, unsigned int);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_STOP_SFX_V1)(void*);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_VERSION_V1)(
    void*, char**, int*, int*, char**, char**, char**);

struct directFuncToKodi_general_h
{
  void* thisClassHdl;
  PFN_INT_KODI_CHANGE_KEYBOARD_LAYOUT_V1 kodi_change_keyboard_layout_v1;
  PFN_INT_KODI_GET_CURRENT_SKIN_ID_V1 kodi_get_current_skin_id_v1;
  PFN_INT_KODI_GET_DIGEST_V1 kodi_get_digest_v1;
  PFN_INT_KODI_GET_FREE_MEM_V1 kodi_get_free_mem_v1;
  PFN_INT_KODI_GET_GLOBAL_IDLE_TIME_V1 kodi_get_global_idle_time_v1;
  PFN_INT_KODI_GET_KEYBOARD_LAYOUT_V1 kodi_get_keyboard_layout_v1;
  PFN_INT_KODI_GET_LANGUAGE_V1 kodi_get_language_v1;
  PFN_INT_KODI_GET_LOCALIZED_STRING_V1 kodi_get_localized_string_v1;
  PFN_INT_KODI_GET_REGION_V1 kodi_get_region_v1;
  PFN_INT_KODI_IS_ADDON_AVILABLE_V1 kodi_is_addon_avilable_v1;
  PFN_INT_KODI_PLAY_SFX_V1 kodi_play_sfx_v1;
  PFN_INT_KODI_QUEUE_NOTIFICATION_V1 kodi_queue_notification_v1;
  PFN_INT_KODI_STOP_SFX_V1 kodi_stop_sfx_v1;
  PFN_INT_KODI_UNKNOWN_TO_UTF8_V1 kodi_unknown_to_utf8_v1;
  PFN_INT_KODI_VERSION_V1 kodi_version_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{


struct directFuncToAddon_general_h
{
  void* thisClassHdl;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_AddonKeyboardKeyTable
{
  IFC_AddonKeyboardKeyTable() = default;
  IFC_AddonKeyboardKeyTable(const AddonKeyboardKeyTable* c_data)
  {
    if (c_data == nullptr)
      return;

    for (unsigned int i = 0; i < STD_KB_BUTTONS_MAX_ROWS; ++i)
    {
      for (unsigned int j = 0; j < STD_KB_BUTTONS_PER_ROW; ++j)
      {
        keys[i][j] = c_data->keys[i][j] ? c_data->keys[i][j] : "";
      }
    }
  }

  void SetCStructure(AddonKeyboardKeyTable* c_data)
  {
    if (c_data == nullptr)
      return;

    for (unsigned int i = 0; i < STD_KB_BUTTONS_MAX_ROWS; ++i)
    {
      for (unsigned int j = 0; j < STD_KB_BUTTONS_PER_ROW; ++j)
      {
        if (c_data->keys[i][j])
          free(c_data->keys[i][j]);
        c_data->keys[i][j] = strdup(keys[i][j].c_str());
      }
    }
  }

  std::array<std::array<std::string, STD_KB_BUTTONS_PER_ROW>, STD_KB_BUTTONS_MAX_ROWS> keys;

  MSGPACK_DEFINE(keys);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_general_h : int
{
  funcParent_kodi_get_localized_string_v1,
  funcParent_kodi_get_free_mem_v1,
  funcParent_kodi_unknown_to_utf8_v1,
  funcParent_kodi_get_language_v1,
  funcParent_kodi_queue_notification_v1,
  funcParent_kodi_get_digest_v1,
  funcParent_kodi_get_region_v1,
  funcParent_kodi_get_global_idle_time_v1,
  funcParent_kodi_is_addon_avilable_v1,
  funcParent_kodi_version_v1,
  funcParent_kodi_get_current_skin_id_v1,
  funcParent_kodi_get_keyboard_layout_v1,
  funcParent_kodi_change_keyboard_layout_v1,
  funcParent_kodi_play_sfx_v1,
  funcParent_kodi_stop_sfx_v1,
} funcParent_general_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT char* kodi_get_localized_string(long label_id) __INTRODUCED_IN_KODI(1);
typedef std::tuple<long> msgParent__IN_kodi_get_localized_string_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_get_localized_string_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_get_free_mem(long* free, long* total, bool as_bytes) __INTRODUCED_IN_KODI(1);
typedef std::tuple<long, long, bool> msgParent__IN_kodi_get_free_mem_v1; /* Autogenerated */
typedef std::tuple<long, long> msgParent_OUT_kodi_get_free_mem_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_unknown_to_utf8(const char* source, bool* ret, bool failOnBadChar) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool, bool> msgParent__IN_kodi_unknown_to_utf8_v1; /* Autogenerated */
typedef std::tuple<std::string, bool> msgParent_OUT_kodi_unknown_to_utf8_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_get_language(enum LangFormats format, bool region) __INTRODUCED_IN_KODI(1);
typedef std::tuple<LangFormats, bool> msgParent__IN_kodi_get_language_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_get_language_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_queue_notification(enum QueueMsg type, const char* header, const char* message, const char* imageFile, unsigned int displayTime, bool withSound, unsigned int messageTime) __INTRODUCED_IN_KODI(1);
typedef std::tuple<QueueMsg, std::string, std::string, std::string, unsigned int, bool, unsigned int> msgParent__IN_kodi_queue_notification_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_queue_notification_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_get_digest(enum DigestType type, const char* text) __INTRODUCED_IN_KODI(1);
typedef std::tuple<DigestType, std::string> msgParent__IN_kodi_get_digest_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_get_digest_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_get_region(const char* id) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string> msgParent__IN_kodi_get_region_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_get_region_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT int kodi_get_global_idle_time() __INTRODUCED_IN_KODI(1);
typedef std::tuple<DummyValue> msgParent__IN_kodi_get_global_idle_time_v1; /* Autogenerated */
typedef std::tuple<int> msgParent_OUT_kodi_get_global_idle_time_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_is_addon_avilable(const char* id, char** version, bool* enabled) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool> msgParent__IN_kodi_is_addon_avilable_v1; /* Autogenerated */
typedef std::tuple<bool, std::string, bool> msgParent_OUT_kodi_is_addon_avilable_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_version( char** compile_name, int* major, int* minor, char** revision, char** tag, char** tagversion) __INTRODUCED_IN_KODI(1);
typedef std::tuple<int, int> msgParent__IN_kodi_version_v1; /* Autogenerated */
typedef std::tuple<std::string, int, int, std::string, std::string, std::string> msgParent_OUT_kodi_version_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT char* kodi_get_current_skin_id() __INTRODUCED_IN_KODI(1);
typedef std::tuple<DummyValue> msgParent__IN_kodi_get_current_skin_id_v1; /* Autogenerated */
typedef std::tuple<std::string> msgParent_OUT_kodi_get_current_skin_id_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_get_keyboard_layout(int modifier_key, char** layout_name, struct AddonKeyboardKeyTable* layout) __INTRODUCED_IN_KODI(1);
typedef std::tuple<int> msgParent__IN_kodi_get_keyboard_layout_v1; /* Autogenerated */
typedef std::tuple<bool, std::string, IFC_AddonKeyboardKeyTable> msgParent_OUT_kodi_get_keyboard_layout_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT bool kodi_change_keyboard_layout(char** layout_name) __INTRODUCED_IN_KODI(1);
typedef std::tuple<DummyValue> msgParent__IN_kodi_change_keyboard_layout_v1; /* Autogenerated */
typedef std::tuple<bool, std::string> msgParent_OUT_kodi_change_keyboard_layout_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_play_sfx(const char* filename, bool use_cached) __INTRODUCED_IN_KODI(1);
typedef std::tuple<std::string, bool> msgParent__IN_kodi_play_sfx_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_play_sfx_v1; /* Autogenerated */
// Original API call: ATTR_DLL_EXPORT void kodi_stop_sfx() __INTRODUCED_IN_KODI(1);
typedef std::tuple<DummyValue> msgParent__IN_kodi_stop_sfx_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgParent_OUT_kodi_stop_sfx_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_general_h : int
{
  funcChild_general_h_dummy
} funcChild_general_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
