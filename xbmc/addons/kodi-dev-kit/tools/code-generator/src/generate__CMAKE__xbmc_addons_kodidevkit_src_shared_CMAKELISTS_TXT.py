from code_generator import *
from .sub_file_hdl import *
from .helpers import *

import glob
import os
import re

def generate__CMAKE__xbmc_addons_kodidevkit_src_shared_CMAKELISTS_TXT(force):
  """
  This function generate the "CMakeLists.txt" in xbmc/addons/kodi-dev-kit/src/shared
  and sub dirs by scan of available files

  The base CMakeLists.txt is not generated by him and need hand edit.
  """
  print('  - Generate xbmc/addons/kodi-dev-kit/src/shared/CMakeLists.txt')

  base_dir = kodi_dir + 'xbmc/addons/kodi-dev-kit/src/shared/'
  scan_dir = base_dir + '**/'

  base_cmake_file = 'xbmc/addons/kodi-dev-kit/src/shared/CMakeLists.txt'
  if not os.path.exists(kodi_dir + base_cmake_file):
    print('ERROR: Needed ' + base_cmake_file + ' not present!')
    exit()

  found = False
  source_entry = []
  header_entry = []
  dirs = sorted(glob.glob(scan_dir, recursive=True))
  for dir in dirs:
    source_dir = dir.replace(kodi_dir, '')

    # Scan for *.cpp
    src_parts = sorted(glob.glob(dir + '*.cpp', recursive=False))
    for src_part in src_parts:
      with open(src_part) as search:
        for line in search:
          line = line.rstrip()  # remove '\n' at end of line
          m = re.search('^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/', line)
          if m:
            if m.group(1) == 'CORE_SYSTEM_NAME':
              for entry in m.group(2).split(","):
                source_entry.append('$<$<STREQUAL:${CORE_SYSTEM_NAME},' + entry + '>:' + src_part.replace(base_dir, '${CMAKE_CURRENT_SOURCE_DIR}/') + '>')
              found = True
              break
      if not found:
        source_entry.append(src_part.replace(base_dir, '${CMAKE_CURRENT_SOURCE_DIR}/'))
      found = False

    # Scan for *.h
    src_parts = sorted(glob.glob(dir + '*.h', recursive=False))
    for src_part in src_parts:
      with open(src_part) as search:
        for line in search:
          line = line.rstrip()  # remove '\n' at end of line
          m = re.search('^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/', line)
          if m:
            if m.group(1) == 'CORE_SYSTEM_NAME':
              for entry in m.group(2).split(","):
                header_entry.append('$<$<STREQUAL:${CORE_SYSTEM_NAME},' + entry + '>:' + src_part.replace(base_dir, '${CMAKE_CURRENT_SOURCE_DIR}/') + '>')
              found = True
              break
      if not found:
        header_entry.append(src_part.replace(base_dir, '${CMAKE_CURRENT_SOURCE_DIR}/'))
      found = False

  CMAKE_SHARED_DEV_KIT_SOURCES = 'set(SOURCES\n'
  for entry in source_entry:
    CMAKE_SHARED_DEV_KIT_SOURCES += '  ' + entry + '\n'
  CMAKE_SHARED_DEV_KIT_SOURCES += ')'

  CMAKE_SHARED_DEV_KIT_HEADERS = 'set(HEADERS\n'
  for entry in header_entry:
    CMAKE_SHARED_DEV_KIT_HEADERS += '  ' + entry + '\n'
  CMAKE_SHARED_DEV_KIT_HEADERS += ')'

  source_file = ''
  f = open(base_dir + 'CMakeLists.txt', 'r')
  data = f.read()
  start_1 = False
  start_2 = False
  for line in data.splitlines():
    # Header include
    if '---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_SOURCES>---' in line:
      source_file += line + '\n'
      source_file += '# Code below autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator.py\n'
      start_1 = True
    elif '---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_SOURCES_END>---' in line:
      source_file += CMAKE_SHARED_DEV_KIT_SOURCES + '\n'
      source_file += line + '\n'
      start_1 = False
    elif start_1:
      continue
    # Class creation
    elif '---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_HEADERS>---' in line:
      source_file += line + '\n'
      source_file += '# Code below autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator.py\n'
      start_2 = True
    elif '---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_HEADERS_END>---' in line:
      source_file += CMAKE_SHARED_DEV_KIT_HEADERS + '\n'
      source_file += line + '\n'
      start_2 = False
    elif start_2:
      continue
    else:
      source_file += line + '\n'

  if start_1 or start_2:
    print('ERROR: Needed CMAKE_SHARED_DEV_KIT_SOURCES_END or CMAKE_SHARED_DEV_KIT_HEADERS_END not present in' + base_dir + 'CMakeLists.txt')
    exit()

  if source_file != data or force:
    print('    - Updating ' + base_dir + 'CMakeLists.txt')
    f = open(base_dir + 'CMakeLists.txt', "w")
    f.write(source_file)
    f.close()
