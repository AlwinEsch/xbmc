from code_generator import *
from .sub_file_hdl import *
from .helpers import *

import glob
import os
import re
import filecmp
import shutil

class Generate_kodi_addon_instance_construct:
  """
  This class generate the code for following two interface functions within devkit lib.
   - CHdl_kodi_addon_base_h::kodi_addon_create_instance
   - CHdl_kodi_addon_base_h::kodi_addon_destroy_instance

  Becomes done to reduce hand work as for every instance type a copy of his function address
  structure is needed.

  NOTE: Maybe improve the whole ways to prevent this here?

  As usable class values are:
   - self.create_code for kodi_addon_create_instance
   - self.destroy_code for kodi_addon_destroy_instance
  """
  def __init__(self, options):
    self.options = options

    search_dir = '{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/'.format(kodi_dir)
    scan_dir = search_dir + '**/'

    instance_stucts = []
    src_parts = sorted(glob.glob(scan_dir + '*.h', recursive=True))
    for src_part in src_parts:
      if not FileContainsInterfaceAPICalls(src_part):
        continue

      with open(src_part) as f:
        file_text = f.read()
        f.close()

      if not '_CREATE_V' in file_text or not '_DESTROY_V' in file_text: # a bit ugly check now
        continue

      instance_stucts.append(src_part.replace(search_dir, '').replace('.h', '').replace('-', ''))

    lowest_api = GetLowestUsedAPI()
    highest_api = GetHighestUsedAPI()

    #---------------------------------------------------------------------------
    # Generate part for "CHdl_kodi_addon_base_h::kodi_addon_create_instance"

    code = 'ADDON_STATUS dummy()\n{\n'
    code += '  // Autogenerated by "Generate_kodi_addon_instance_construct.py", edit this for code changes!\n'
    code += '  ADDON_STATUS status;\n'
    code += '  UnionAddonFunctions* data = reinterpret_cast<UnionAddonFunctions*>(hdl);\n'
    code += '  if (data->types.kodi_addon.v1.create_instance)\n'
    code += '  {\n'
    code += '    UnionAddonFunctions* instanceStruct = new UnionAddonFunctions();\n'
    code += '    instanceStruct->type = instanceType;\n'
    code += '    instanceStruct->kodi = instance;\n'
    code += '\n'
    code += '    KODI_INSTANCE_HDL addonIntInstance = {};\n'
    code += '    addonIntInstance.type = instanceType;\n'
    code += '    addonIntInstance.kodi = instance;\n'
    code += '    addonIntInstance.kodi_first_instance = instance == thisClass->m_ifc->kodiFirstInstance;\n'
    code += '    addonIntInstance.dummy = &instanceStruct->types.dummy;\n'
    code += '\n'
    code += '    status = data->types.kodi_addon.v1.create_instance(data->hdl, instanceType, instanceID.c_str(),\n'
    code += '                                                       &addonIntInstance, parent);\n'
    code += '    if ((!addonIntInstance.dummy || addonIntInstance.type != instanceType) &&\n'
    code += '        status == ADDON_STATUS_OK)\n'
    code += '    {\n'
    code += '      status = ADDON_STATUS_PERMANENT_FAILURE;\n'
    code += '    }\n'
    code += '    else if (addonIntInstance.dummy)\n'
    code += '    {\n'
    code += '      instanceStruct->type = instanceType;\n'
    code += '      instanceStruct->addon_struct_ptr = addonIntInstance.dummy;\n'

    for entry in instance_stucts:
      funcname = 'kodi_addon_{}'.format(entry)
      filename = '{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/{}.h'.format(kodi_dir, entry)

      code += '      if (instanceType == ADDON_INSTANCE_{})\n'.format(entry.upper())
      code += '      {\n'
      if IsHighestUsedFunctionVersion(filename, funcname + '_create', 'create', lowest_api):
        code += ('            if (&instanceStruct->types.{}.v{} != reinterpret_cast<decltype(instanceStruct->types.{}.v{})*>(addonIntInstance.{}))\n'
                .format(funcname, lowest_api, funcname, lowest_api, entry))
        code += ('              instanceStruct->types.{}.v{} = *reinterpret_cast<decltype(instanceStruct->types.{}.v{})*>(addonIntInstance.{});\n'
                .format(funcname, lowest_api, funcname, lowest_api, entry))
        code += '            if (instanceStruct->types.{}.v{}.create)\n'.format(funcname, lowest_api)
        code += '              instanceStruct->hdl = instanceStruct->types.{}.v{}.create(instance);\n'.format(funcname, lowest_api)
        code += '            else\n'
        code += '              instanceStruct->hdl = addonIntInstance.instance;\n'
        code += '            goto done;\n'
      else:
        code += '        switch (AddonIfc::g_ifc->api)\n'
        code += '        {\n'
        for i in range(highest_api, lowest_api-1, -1):
          code += '          case __KODI_API_{}__:\n'.format(i)
          if not IsLowerToUsedFunctionVersion(filename, funcname + '_create', 'create', i):
            code += '          {\n'
            code += ('            if (&instanceStruct->types.{}.v{} != reinterpret_cast<decltype(instanceStruct->types.{}.v{})*>(addonIntInstance.{}))\n'
                    .format(funcname, i, funcname, i, entry))
            code += ('              instanceStruct->types.{}.v{} = *reinterpret_cast<decltype(instanceStruct->types.{}.v{})*>(addonIntInstance.{});\n'
                    .format(funcname, i, funcname, i, entry))
            code += '            if (instanceStruct->types.{}.v{}.create)\n'.format(funcname, i)
            code += '              instanceStruct->hdl = instanceStruct->types.{}.v{}.create(instance);\n'.format(funcname, i)
            code += '            else\n'
            code += '              instanceStruct->hdl = addonIntInstance.instance;\n'
            code += '            goto done;\n'
            code += '          }\n'
        code += '        default:\n'
        code += '          break;\n'
        code += '        }\n'
      code += '      }\n'
    code += '    done:\n'
    code += '      *addonInstance = instanceStruct;\n'
    code += '      return status;\n'
    code += '    }\n'
    code += '\n'
    code += '    delete instanceStruct;\n'
    code += '  }\n'
    code += '  else\n'
    code += '    status = ADDON_STATUS_NOT_IMPLEMENTED;\n'
    code += '\n'
    code += '  return status;\n'
    code += '}\n'

    # Make temporary file for clang cleanup
    temp_file = './tmp/addon-instance/Generate_kodi_addon_create_instance.cpp'
    os.makedirs(os.path.dirname(temp_file), exist_ok=True)
    f = open(temp_file, "w")
    f.write(code)
    f.close()
    os.system('clang-format -style=file -i ' + temp_file)
    f = open(temp_file, "r")
    code = f.read()
    f.close()
    code = code.split("\n", 2)[2].rsplit("\n",2)[0]

    self.create_code = code

    #---------------------------------------------------------------------------
    # Generate part for "CHdl_kodi_addon_base_h::kodi_addon_destroy_instance"

    code = 'void dummy()\n{\n'
    code += '  // Autogenerated by "Generate_kodi_addon_instance_construct.py", edit this for code changes!\n'
    code += '  UnionAddonFunctions* data = reinterpret_cast<UnionAddonFunctions*>(hdl);\n'
    code += '  UnionAddonFunctions* instanceStruct = reinterpret_cast<UnionAddonFunctions*>(instance);\n'
    code += '  if (instanceStruct)\n'
    code += '  {\n'

    for entry in instance_stucts:
      print(entry)
      funcname = 'kodi_addon_{}'.format(entry)
      filename = '{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/{}.h'.format(kodi_dir, entry)

      code += '    if (instanceType == ADDON_INSTANCE_{})\n'.format(entry.upper())
      code += '    {\n'
      if IsHighestUsedFunctionVersion(filename, funcname + '_destroy', 'destroy', lowest_api):
        code += '      if (instanceStruct->types.{}.v{}.destroy)\n'.format(funcname, lowest_api)
        code += '        instanceStruct->types.{}.v{}.destroy(instanceStruct->hdl);\n'.format(funcname, lowest_api)
        code += '      goto done;\n'
      else:
        code += '      switch (AddonIfc::g_ifc->api)\n'
        code += '      {\n'
        for i in range(highest_api, lowest_api-1, -1):
          code += '        case __KODI_API_{}__:\n'.format(i)
          if not IsLowerToUsedFunctionVersion(filename, funcname + '_destroy', 'destroy', i):
            code += '        {\n'
            code += '          if (instanceStruct->types.{}.v{}.destroy)\n'.format(funcname, i)
            code += '            instanceStruct->types.{}.v{}.destroy(instanceStruct->hdl);\n'.format(funcname, i)
            code += '          goto done;\n'
            code += '        }\n'
        code += '      default:\n'
        code += '        break;\n'
        code += '      }\n'
      code += '    }\n'

    code += '  done:\n'
    code += '    if (data->types.kodi_addon.v1.destroy_instance)\n'
    code += '    {\n'
    code += '      KODI_INSTANCE_HDL addonInstance = {};\n'
    code += '      addonInstance.kodi = instanceStruct->kodi;\n'
    code += '      addonInstance.type = instanceType;\n'
    code += '      addonInstance.instance = instanceStruct->hdl;\n'
    code += '      addonInstance.dummy = instanceStruct->addon_struct_ptr;\n'
    code += '      data->types.kodi_addon.v1.destroy_instance(data->hdl, instanceType, &addonInstance);\n'
    code += '    }\n'
    code += '    delete instanceStruct;\n'
    code += '  }\n'
    code += '}\n'

    # Make temporary file for clang cleanup
    temp_file = './tmp/addon-instance/Generate_kodi_addon_destroy_instance.cpp'
    os.makedirs(os.path.dirname(temp_file), exist_ok=True)
    f = open(temp_file, "w")
    f.write(code)
    f.close()
    os.system('clang-format -style=file -i ' + temp_file)
    f = open(temp_file, "r")
    code = f.read()
    f.close()
    code = code.split("\n", 2)[2].rsplit("\n",2)[0]

    self.destroy_code = code
