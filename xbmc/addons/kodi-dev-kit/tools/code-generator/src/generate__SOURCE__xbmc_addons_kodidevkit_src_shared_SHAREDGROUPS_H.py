from code_generator import *
from .sub_file_hdl import *
from .helpers import *

import glob
import os

def generate__SOURCE__xbmc_addons_kodidevkit_src_shared_SHAREDGROUPS_H(force):
  """
  This function generate the "SharedGroups.h in xbmc/addons/kodi-dev-kit/src/shared.

  The whole file not generated, only the related group enums becomes updated
  """
  print('  - Generate used interface groups in xbmc/addons/kodi-dev-kit/src/shared/SharedGroups.h')

  search_dir = kodi_dir + 'xbmc/addons/kodi-dev-kit/include/kodi/c-api/'
  scan_dir = search_dir + '**/'
  new_source_insert = ''

  dirs = sorted(glob.glob(scan_dir, recursive=True))
  for dir in dirs:
    source_dir = dir.replace(kodi_dir, '')

    # Scan for used interface headers
    src_parts = sorted(glob.glob(dir + '*.h', recursive=False))
    for src_part in src_parts:
      if not FileContainsInterfaceAPICalls(src_part):
        continue

      # Translate the dir to a C usable ident string
      new_source_insert += '  funcGroup_' + TranslatePathToCUsableString(src_part, search_dir) + ',\n'

  source_file = kodi_dir + 'xbmc/addons/kodi-dev-kit/src/shared/SharedGroups.h'

  # Read SharedGroups.h and add wanted enums
  new_source = ''
  f = open(source_file, 'r')
  data = f.read()
  start = False
  for line in data.splitlines():
    if '/*---AUTO_GEN_PARSE<FUNC_GROUP_ENUM>---*/' in line:
      start = True
      new_source += line + '\n'
      new_source += '  /* Code below autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */\n'
      new_source += new_source_insert

    if not start:
      new_source += line + '\n'

    if '/*---AUTO_GEN_PARSE<FUNC_GROUP_ENUM_END>---*/' in line:
      start = False
      new_source += line + '\n'
    if (start):
      continue

  f.close()

  # If differences or force update the file
  if not os.path.isfile(source_file) or new_source != open(source_file).read() or force:
    print('    - Updated ' +  source_file.replace(kodi_dir, ''))
    f = open(source_file, 'w')
    f.write(new_source)
    f.close()
    os.system('clang-format -style=file -i ' + source_file)
